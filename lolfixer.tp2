BACKUP ~lolfixer/backup~
AUTHOR ~Lollorian~
VERSION ~0.1A~

BEGIN ~Area Stuff - Offset Checker (fixes incorrect offsets)~
  GROUP ~Area Stuff~

COPY_EXISTING_REGEXP GLOB ~^.+\.are$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x11b) THEN BEGIN
    READ_LONG  0x54 "actor_off"
    READ_SHORT 0x58 "actor_num"
    READ_SHORT 0x5a "info_num"
    READ_LONG  0x5c "info_off"
    READ_LONG  0x60 "spawn_off"
    READ_LONG  0x64 "spawn_num"
    READ_LONG  0x68 "ent_off"
    READ_LONG  0x6c "ent_num"
    READ_LONG  0x70 "cont_off"
    READ_SHORT 0x74 "cont_num"
    READ_SHORT 0x76 "item_num"
    READ_LONG  0x78 "item_off"
    READ_LONG  0x7c "vert_off"
    READ_SHORT 0x80 "vert_num"
    READ_SHORT 0x82 "amb_num"
    READ_LONG  0x84 "amb_off"
    READ_LONG  0x88 "var_off"
    READ_LONG  0x8c "var_num"
    READ_ASCII 0x94 "script"
    READ_LONG  0x9c "bmp_size"
    READ_LONG  0xa0 "bmp_off"
    READ_LONG  0xa4 "door_num"
    READ_LONG  0xa8 "door_off"
    READ_LONG  0xac "anim_num"
    READ_LONG  0xb0 "anim_off"
    READ_LONG  0xb4 "tiled_num"
    READ_LONG  0xb8 "tiled_off"
    READ_LONG  0xbc "song_off"
    READ_LONG  0xc0 "rest_off"
    READ_LONG  0xc4 "note_off"
    READ_LONG  0xc8 "note_num"
    SET "running_offset" = 0x11c

    // check actors
    PATCH_IF ("%running_offset%" != "%actor_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Actor offset is incorrect! Correcting..."
      WRITE_LONG  0x54 "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + ("%actor_num%" * 0x110))
    // check info points
    PATCH_IF ("%running_offset%" != "%info_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Info Point offset is incorrect! Correcting..."
      WRITE_LONG  0x5c "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + ("%info_num%" * 0xc4))
    // check spawn points
    PATCH_IF ("%running_offset%" != "%spawn_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Spawn Point offset is incorrect! Correcting..."
      WRITE_LONG  0x60 "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + ("%spawn_num%" * 0xc8))
    // check entrance points
    PATCH_IF ("%running_offset%" != "%ent_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Entrances offset is incorrect! Correcting..."
      WRITE_LONG  0x68 "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + ("%ent_num%" * 0x68))
    // check containers
    PATCH_IF ("%running_offset%" != "%cont_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Containers offset is incorrect! Correcting..."
      WRITE_LONG  0x70 "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + ("%cont_num%" * 0xc0))
    // check items
    PATCH_IF ("%running_offset%" != "%item_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Items offset is incorrect! Correcting..."
      WRITE_LONG  0x78 "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + ("%item_num%" * 0x14))
    // check ambients
    PATCH_IF ("%running_offset%" != "%amb_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Ambients offset is incorrect! Correcting..."
      WRITE_LONG  0x84 "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + ("%amb_num%" * 0xd4))
    // check variables
    PATCH_IF ("%running_offset%" != "%var_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Variables offset is incorrect! Correcting..."
      WRITE_LONG  0x88 "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + ("%var_num%" * 0x54))
    // check doors
    PATCH_IF ("%running_offset%" != "%door_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Door offset is incorrect! Correcting..."
      WRITE_LONG  0xa8 "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + ("%door_num%" * 0xc8))
    // check tiled objects
    PATCH_IF ("%running_offset%" != "%tiled_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Tiled Objects offset is incorrect! Correcting..."
      WRITE_LONG  0xb8 "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + ("%tiled_num%" * 0x6c))
    // check vertices
    PATCH_IF ("%running_offset%" != "%vert_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Vertices offset is incorrect! Correcting..."
      WRITE_LONG  0x7c "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + ("%vert_num%" * 0x04))
    // check animations
    PATCH_IF ("%running_offset%" != "%anim_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Animations offset is incorrect! Correcting..."
      WRITE_LONG  0xb0 "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + ("%anim_num%" * 0x4c))
    // check bitmap
    PATCH_IF ("%running_offset%" != "%bmp_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Bitmap offset is incorrect! Correcting..."
      WRITE_LONG  0xa0 "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + "%bmp_size%")
    // check songs block
    PATCH_IF ("%running_offset%" != "%song_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Songs offset is incorrect! Correcting..."
      WRITE_LONG  0xbc "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + 0x90)
    // check rest spawn block
    PATCH_IF ("%running_offset%" != "%rest_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Rest Spawn offset is incorrect! Correcting..."
      WRITE_LONG  0xc0 "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + 0xe4)
    // check map notes
    PATCH_IF ("%running_offset%" != "%note_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Map Notes offset is incorrect! Correcting..."
      WRITE_LONG  0xc4 "running_offset"
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Area Stuff (Recommended) - Script Assigner (assigns missing/unassigned scripts to areas)~
  GROUP ~Area Stuff (Recommended)~

ACTION_IF !(FILE_EXISTS ~override/xr2400.are~) THEN BEGIN
  COPY_EXISTING ~ar0087.are~ ~override/xr2400.are~
END
ACTION_IF !(FILE_EXISTS ~override/xr2600.are~) THEN BEGIN
  COPY_EXISTING ~ar0087.are~ ~override/xr2600.are~
END

COPY_EXISTING_REGEXP GLOB ~^.+\.are$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x11b) THEN BEGIN
    READ_ASCII 0x94 "script"

    SET "exists" = 0
    SET "unassigned" = 0
    SET "missing" = 0
    INNER_PATCH_FILE ~%SOURCE_RES%.bcs~ BEGIN
      SET "exists" = 1
    END
    PATCH_IF (("%script%" STRING_EQUAL_CASE "%SOURCE_RES%") AND ("%exists%" = 0)) BEGIN
      SET "missing" = 1
    END
    PATCH_IF (NOT ("%script%" STRING_EQUAL_CASE "%SOURCE_RES%") AND ("%exists%" = 1)) BEGIN
      SET "unassigned" = 1
    END
    PATCH_IF ("%unassigned%" = 1) BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Area Script (%SOURCE_RES%.bcs) assigned"
      WRITE_ASCIIE 0x94 ~%SOURCE_RES%~ #8
    END ELSE
    PATCH_IF ("%missing%" = 1) BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Missing area Script (%script%.bcs) created"
      INNER_ACTION BEGIN
        <<<<<<<< %script%.BAF
>>>>>>>>
        COMPILE ~%script%.BAF~
      END
    END ELSE
    PATCH_IF ((("%script%" STRING_EQUAL_CASE "NONE") OR ("%script%" STRING_EQUAL_CASE "")) AND (NOT FILE_EXISTS_IN_GAME ~%SOURCE_FILE%.bcs~)) BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Missing area Script (%SOURCE_RES%.bcs) created and assigned"
      INNER_ACTION BEGIN
        <<<<<<<< %SOURCE_RES%.BAF
>>>>>>>>
        COMPILE ~%SOURCE_RES%.BAF~
      END
      WRITE_ASCIIE 0x94 ~%SOURCE_RES%~ #8
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Area Stuff (Recommended) - Missing Ambient Remover (removes ambients that don't have their WAV present)~
  GROUP ~Area Stuff (Recommended)~

ACTION_IF !(FILE_EXISTS ~override/xr2400.are~) THEN BEGIN
  COPY_EXISTING ~ar0087.are~ ~override/xr2400.are~
END
ACTION_IF !(FILE_EXISTS ~override/xr2600.are~) THEN BEGIN
  COPY_EXISTING ~ar0087.are~ ~override/xr2600.are~
END

COPY_EXISTING_REGEXP GLOB ~^.+\.are$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x11b) THEN BEGIN
    READ_SHORT 0x82 "amb_num"
    READ_LONG  0x84 "amb_off"

    FOR (index = 0 ; index < amb_num ; index = index + 1) BEGIN
      FOR (index2 = 0 ; index2 < 10 ; index2 = index2 + 1) BEGIN
        READ_ASCII ("%amb_off%" + 0x30 + ("%index2%" * 0x08) + (0xd4 * "%index%")) "resref"
        PATCH_IF NOT (("%resref%" STRING_EQUAL_CASE "") OR ("%resref%" STRING_EQUAL_CASE "none")) BEGIN
          SET "exists" = 0
          INNER_PATCH_FILE ~%resref%.wav~ BEGIN
            SET "exists" = 1
          END
          PATCH_IF ("%exists%" = 0) BEGIN
            PATCH_PRINT "%SOURCE_FILE% error: Ambient #%index% does not exist (%resref%.wav)! Nulling..."
            WRITE_ASCIIE ("%amb_off%" + 0x30 + ("%index2%" * 0x08) + (0xd4 * "%index%")) ~NONE~ #8
          END
        END
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Area Stuff (Recommended) - Missing Actor Remover (removes actors that don't have their CRE present)~
  GROUP ~Area Stuff (Recommended)~

ACTION_IF !(FILE_EXISTS ~override/xr2400.are~) THEN BEGIN
  COPY_EXISTING ~ar0087.are~ ~override/xr2400.are~
END
ACTION_IF !(FILE_EXISTS ~override/xr2600.are~) THEN BEGIN
  COPY_EXISTING ~ar0087.are~ ~override/xr2600.are~
END

COPY_EXISTING_REGEXP GLOB ~^.+\.are$~ ~override~
  PATCH_IF ((SOURCE_SIZE > 0x11b) AND NOT (~%SOURCE_RES%~ STRING_EQUAL_CASE ~F_6666~)) THEN BEGIN
    READ_LONG  0x54 "actor_off"
    READ_SHORT 0x58 "actor_num"

    FOR (index = 0 ; index < actor_num ; index = index + 1) BEGIN
      READ_ASCII ("%actor_off%" + 0x80 + (0x110 * "%index%")) "resref" // cre file
      PATCH_IF ("%resref%" STRING_COMPARE_REGEXP "^[Rr][Dd].+$") BEGIN // ignore creatures starting with RD
        SET "exists" = 0
        INNER_PATCH_FILE ~%resref%.cre~ BEGIN
          SET "exists" = 1
        END
        PATCH_IF ("%exists%" = 0) BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Actor #%index% does not exist (%resref%.cre)! Removing actor..."
          LPF fj_are_structure
            INT_VAR fj_delete_mode    = "%index%"
            STR_VAR fj_structure_type = actor
          END
          SET "index" = "index" - 1
          READ_SHORT 0x58 "actor_num"
        END
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Area Stuff (Recommended) - Missing Spawn Remover (nulls spawn entries that don't have their CRE present)~
  GROUP ~Area Stuff (Recommended)~

ACTION_IF !(FILE_EXISTS ~override/xr2400.are~) THEN BEGIN
  COPY_EXISTING ~ar0087.are~ ~override/xr2400.are~
END
ACTION_IF !(FILE_EXISTS ~override/xr2600.are~) THEN BEGIN
  COPY_EXISTING ~ar0087.are~ ~override/xr2600.are~
END

COPY_EXISTING_REGEXP GLOB ~^.+\.are$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x11b) THEN BEGIN
    READ_LONG  0x60 "spawn_off"
    READ_LONG  0x64 "spawn_num"
    FOR (index = 0 ; index < spawn_num ; index = index + 1) BEGIN
      FOR (index2 = 0 ; index2 < 10 ; index2 = index2 + 1) BEGIN
        READ_ASCII ("%spawn_off%" + 0x24 + ("%index2%" * 0x08) + ("%index%" * 0xc8)) "resref"
        PATCH_IF (("%resref%" STRING_COMPARE_CASE "") AND                  // ignore empty entries
                  ("%resref%" STRING_COMPARE_CASE "none") AND              // ignore 'none'
                  ("%resref%" STRING_COMPARE_REGEXP "^[Rr][Dd].+$")) BEGIN // ignore creatures starting with RD
          SET "exists" = 0
          INNER_PATCH_FILE ~%resref%.cre~ BEGIN
            SET "exists" = 1
          END
          PATCH_IF ("%exists%" = 0) BEGIN
            PATCH_PRINT "%SOURCE_FILE% error: Spawn Point #%index% creature file does not exist (%resref%.cre)! Nulling..."
            WRITE_ASCII ("%spawn_off%" + 0x24 + ("%index2%" * 0x08) + ("%index%" * 0xc8)) ~NONE~ #8
          END
        END
      END
      SET "none_count" = 0
      FOR (index2 = 0 ; index2 < 10 ; index2 = index2 + 1) BEGIN
        READ_ASCII ("%spawn_off%" + 0x24 + ("%index2%" * 0x08) + ("%index%" * 0xc8)) "resref"
        PATCH_IF (("%resref%" STRING_EQUAL_CASE "") OR ("%resref%" STRING_EQUAL_CASE "none")) BEGIN
          SET "none_count" = "none_count" + 1
        END
      END
      PATCH_IF ("%none_count%" = 10) BEGIN
        PATCH_PRINT "%SOURCE_FILE% error: Spawn Point #%index% has no creatures to spawn! Removing spawn entry..."
        LPF fj_are_structure
          INT_VAR fj_delete_mode    = "%index%"
          STR_VAR fj_structure_type = spawn
        END
        SET "index" = "index" - 1
        READ_LONG  0x64 "spawn_num"
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Area Stuff (Recommended) - Missing Rest Spawn Remover (nulls rest spawn entries that don't have their CRE present)~
  GROUP ~Area Stuff (Recommended)~

ACTION_IF !(FILE_EXISTS ~override/xr2400.are~) THEN BEGIN
  COPY_EXISTING ~ar0087.are~ ~override/xr2400.are~
END
ACTION_IF !(FILE_EXISTS ~override/xr2600.are~) THEN BEGIN
  COPY_EXISTING ~ar0087.are~ ~override/xr2600.are~
END

COPY_EXISTING_REGEXP GLOB ~^.+\.are$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x11b) THEN BEGIN
    READ_LONG  0xc0 "rest_off" ELSE 0

    // BGFixpack: Super Happy modder Pack - fix common error of incorrect map note offsets
    FOR (index = 0 ; index < 10 ; index = index + 1) BEGIN
      READ_ASCII ("%rest_off%" + 0x48 + ("%index%" * 0x08)) "resref"
      PATCH_IF (("%resref%" STRING_COMPARE_CASE "") AND                  // ignore empty entries
                ("%resref%" STRING_COMPARE_CASE "none") AND              // ignore 'none'
                ("%resref%" STRING_COMPARE_REGEXP "^[Rr][Dd].+$")) BEGIN // ignore creatures starting with RD
        SET "exists" = 0
        INNER_PATCH_FILE ~%resref%.cre~ BEGIN
          SET "exists" = 1
        END
        PATCH_IF ("%exists%" = 0) BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Rest Spawn creature file does not exist (%resref%.cre)! Nulling..."
          WRITE_ASCII ("%rest_off%" + 0x48 + ("%index%" * 0x08)) "NONE" #8
        END
      END
    END
    SET "none_count" = 0
    FOR (index = 0 ; index < 10 ; index = index + 1) BEGIN
      READ_ASCII ("%rest_off%" + 0x48 + ("%index%" * 0x08)) "resref"
      PATCH_IF (("%resref%" STRING_EQUAL_CASE "") OR ("%resref%" STRING_EQUAL_CASE "none")) BEGIN
        SET "none_count" = "none_count" + 1
      END
    END
    READ_SHORT ("%rest_off%" + 0x98) "spawncount"
    PATCH_IF (("%none_count%" = 10) AND ("%spawncount%" != 0)) BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: No creatures in Rest Spawn Entry but area still set to spawn something! Setting number of spawnable creatures to 0..."
      WRITE_SHORT ("%rest_off%" + 0x98) 0
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Area Stuff - Trap Unflagger (remove trap flag if trap is undetectable, undisarmable and has no script)~
  GROUP ~Area Stuff~

ACTION_IF !(FILE_EXISTS ~override/xr2400.are~) THEN BEGIN
  COPY_EXISTING ~ar0087.are~ ~override/xr2400.are~
END
ACTION_IF !(FILE_EXISTS ~override/xr2600.are~) THEN BEGIN
  COPY_EXISTING ~ar0087.are~ ~override/xr2600.are~
END

COPY_EXISTING_REGEXP GLOB ~^.+\.are$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x11b) THEN BEGIN
    READ_LONG  0x70 "cont_off" ELSE 0
    READ_SHORT 0x74 "cont_num" ELSE 0

    // BGFixpack: Super Happy modder Pack - if trap is undetectable, undisarmable, and has no script, remove trapped flag
    FOR (index = 0 ; index < cont_num ; index = index + 1) BEGIN
      READ_SHORT ("%cont_off%" + 0x2c + ("%index%" * 0xc0)) "trap_detect"
      READ_SHORT ("%cont_off%" + 0x2e + ("%index%" * 0xc0)) "trap_remove"
      READ_SHORT ("%cont_off%" + 0x30 + ("%index%" * 0xc0)) "trapped"
      READ_ASCII ("%cont_off%" + 0x48 + ("%index%" * 0xc0)) "script"
      PATCH_IF ((("%script%" STRING_EQUAL_CASE "") OR ("%script%" STRING_EQUAL_CASE "None")) AND
                 ("%trapped%" = 1) AND ("%trap_detect%" > 99) AND ("%trap_remove%" > 99)) BEGIN
        PATCH_PRINT "%SOURCE_FILE% error: Spurious Trap flag removed"
        WRITE_SHORT ("%cont_off%" + 0x2c + ("%index%" * 0xc0)) 0
        WRITE_SHORT ("%cont_off%" + 0x2e + ("%index%" * 0xc0)) 0
        WRITE_SHORT ("%cont_off%" + 0x30 + ("%index%" * 0xc0)) 0
        WRITE_ASCII ("%cont_off%" + 0x48 + ("%index%" * 0xc0)) ~~ #8
      END ELSE
      PATCH_IF (("%trap_detect%" > 99) AND ("%trapped%" = 1)) BEGIN
        PATCH_PRINT "%SOURCE_FILE% error: Spurious Trap flag removed"
        WRITE_SHORT ("%cont_off%" + 0x2C + ("%index%" * 0xc0)) 0
        WRITE_SHORT ("%cont_off%" + 0x30 + ("%index%" * 0xc0)) 0
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Area Stuff - Door Unpicker (makes doors that need keys but were pickable - unpickable)~
  GROUP ~Area Stuff~

ACTION_IF !(FILE_EXISTS ~override/xr2400.are~) THEN BEGIN
  COPY_EXISTING ~ar0087.are~ ~override/xr2400.are~
END
ACTION_IF !(FILE_EXISTS ~override/xr2600.are~) THEN BEGIN
  COPY_EXISTING ~ar0087.are~ ~override/xr2600.are~
END

COPY_EXISTING_REGEXP GLOB ~^.+\.are$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x11b) THEN BEGIN
    READ_LONG  0xa4 "door_num" ELSE 0
    READ_LONG  0xa8 "door_off" ELSE 0

    // G3 Debugging Suite - make keyed doors unpickable
    FOR (index = 0 ; index < door_num ; index = index + 1) BEGIN
      READ_ASCII ("%door_off%" + 0x78 + ("%index%" * 0xc8)) "resref"
      PATCH_IF NOT (("%resref%" STRING_EQUAL_CASE "") OR ("%resref%" STRING_EQUAL_CASE "none")) BEGIN // legit key entry
        READ_LONG ("%door_off%" + 0x8c + ("%index%" * 0xc8)) "lockdiff"
        PATCH_IF (("%lockdiff%" < 100) AND (FILE_EXISTS_IN_GAME ~%resref%.itm~)) BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Door #%index% has key (%resref%.itm) but could be picked! Made unpickable"
          WRITE_LONG ("%door_off%" + 0x8c + ("%index%" * 0xc8)) 100
        END
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Area Stuff - Door Locker (locks doors that need keys but were unlocked)~
  GROUP ~Area Stuff~

ACTION_IF !(FILE_EXISTS ~override/xr2400.are~) THEN BEGIN
  COPY_EXISTING ~ar0087.are~ ~override/xr2400.are~
END
ACTION_IF !(FILE_EXISTS ~override/xr2600.are~) THEN BEGIN
  COPY_EXISTING ~ar0087.are~ ~override/xr2600.are~
END

COPY_EXISTING_REGEXP GLOB ~^.+\.are$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x11b) THEN BEGIN
    READ_LONG  0xa4 "door_num" ELSE 0
    READ_LONG  0xa8 "door_off" ELSE 0

    // G3 Debugging Suite - make keyed doors locked
    FOR (index = 0 ; index < door_num ; index = index + 1) BEGIN
      READ_ASCII ("%door_off%" + 0x78 + ("%index%" * 0xc8)) "resref"
      PATCH_IF NOT (("%resref%" STRING_EQUAL_CASE "") OR ("%resref%" STRING_EQUAL_CASE "none")) BEGIN // legit key entry
        READ_BYTE ("%door_off%" + 0x28 + ("%index%" * 0xc8)) "flags"
        PATCH_IF ((("%flags%" BAND 0b00000010) != 0b00000010) AND (FILE_EXISTS_IN_GAME ~%resref%.itm~)) BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Door #%index% has key (%resref%.itm) but was not locked! Locked now..."
          WRITE_BYTE ("%door_off%" + 0x28 + ("%index%" * 0xc8)) ("%flags%" BOR 0b00000010)
        END
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Creature Stuff (Recommended) - Creature Resource Fixer (res_fixer for ALL CREATURES)~
  GROUP ~Creature Stuff (Recommended)~

//ResFixer - Basic fixing
COPY_EXISTING_REGEXP GLOB ~^.+\.cre$~ ~override~
  PATCH_INCLUDE ~lolfixer/lib/fj_cre_validity.tpp~
  PATCH_IF valid BEGIN
    PATCH_INCLUDE ~lolfixer/lib/fj_cre_reindex.tpp~
    PATCH_INCLUDE ~lolfixer/lib/fj_cre_eff_v2.tpp~
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Creature Stuff - Offset Checker (fixes incorrect offsets)~
  GROUP ~Creature Stuff~

COPY_EXISTING_REGEXP GLOB ~^.+\.cre$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x2d3) THEN BEGIN
    READ_BYTE  0x33  "fx_type"
    READ_LONG  0x2a0 "known_off"
    READ_LONG  0x2a4 "known_num"
    READ_LONG  0x2a8 "meminfo_off"
    READ_LONG  0x2ac "meminfo_num"
    READ_LONG  0x2b0 "mem_off"
    READ_LONG  0x2b4 "mem_num"
    READ_LONG  0x2b8 "slot_off"
    READ_LONG  0x2bc "item_off"
    READ_LONG  0x2c0 "item_num"
    READ_LONG  0x2c4 "fx_off"
    READ_LONG  0x2c8 "fx_num"
    SET "running_offset" = 0x2d4
    SET "running_spl_idx" = 0

    // check known spells
    PATCH_IF ("%known_off%" != "%running_offset%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Known Spells offset is incorrect! Correcting..."
      WRITE_LONG  0x2a0 "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + ("%known_num%" * 0x0c))
    // check spell memorization info
    PATCH_IF ("%meminfo_off%" != "%running_offset%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Memorization Info offset is incorrect! Correcting..."
      WRITE_LONG  0x2a8 "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + ("%meminfo_num%" * 0x10))
    // check memorized spells
    PATCH_IF ("%mem_off%" != "%running_offset%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Memorized Spells offset is incorrect! Correcting..."
      WRITE_LONG  0x2b0 "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + ("%mem_num%" * 0x0c))
    // check effects
    PATCH_IF ("%fx_off%" != "%running_offset%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Effects offset is incorrect! Correcting..."
      WRITE_LONG  0x2c4 "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + ("%fx_num%" * (0x30 + ("%fx_type%" * 0xd8))))
    // check items
    PATCH_IF ("%item_off%" != "%running_offset%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Item offset is incorrect! Correcting..."
      WRITE_LONG  0x2bc "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + ("%item_num%" * 0x14))
    // check slot offset
    PATCH_IF ("%slot_off%" != "%running_offset%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Item Slot offset is incorrect! Correcting..."
      WRITE_LONG  0x2b8 "running_offset"
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Creature Stuff (Recommended) - Inventory Unborker (removes spurious references to the item table)~
  GROUP ~Creature Stuff (Recommended)~

COPY_EXISTING_REGEXP GLOB ~^.+\.cre$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x2d3) THEN BEGIN
    READ_LONG  0x2b8 "slot_off" ELSE 0
    READ_SHORT 0x2c0 "itm_num" ELSE 0

    FOR (index = 0 ; index < 36 ; index = index + 1) BEGIN
      READ_SHORT ("%slot_off%" + (0x02 * "%index%")) "ref" ELSE 0xffff
      PATCH_IF ("%ref%" != 0xffff) BEGIN
        PATCH_IF ((%ref% + 1) > %itm_num%) BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Inventory Item Slot #%index% refers to an item outside the Item Table! Setting to -1..."
          WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
        END
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Creature Stuff (Recommended) - Inventory Cleaner (removes items that don't exist and converts them into already present items where applicable)~
  GROUP ~Creature Stuff (Recommended)~

COPY_EXISTING_REGEXP GLOB ~^.+\.cre$~ ~override~
  PATCH_IF ((SOURCE_SIZE > 0x2d3) AND NOT (~%SOURCE_RES%~ STRING_EQUAL_CASE ~SENDRO03~)) THEN BEGIN
    READ_LONG  0x2bc "itm_off" ELSE 0
    READ_LONG  0x2c0 "itm_num" ELSE 0

    FOR (index = 0 ; index < itm_num ; index = index + 1) BEGIN
      READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item"
      PATCH_IF (NOT (FILE_EXISTS_IN_GAME ~%item%.itm~) AND ("%item%" STRING_COMPARE_REGEXP "^[Rr][Nn][Dd].+$")) BEGIN
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_AROW01") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "AROW01" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_AROW02") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "AROW02" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_AROW07") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "AROW01" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_BOW01") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "BOW03" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_BOW03") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "BOW03" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_BOW08") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "BOW08" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_BLUN02") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "BLUN02" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_BULL02") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "BULL02" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_CHAN04") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "CHAN04" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_CHAN05") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "CHAN05" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_DAGG01") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "DAGG01" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_DAGG03") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "DAGG03" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_DAGG05") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "DAGG05" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_DART01") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "DART01" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_DART02") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "DART02" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_HELM09") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "HELM09" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_HELM11") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "HELM11" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_JELLGR1") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "JELLGR1" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_LEAT01") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "LEAT01" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_LEAT02") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "LEAT02" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_LEAT04") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "LEAT04" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_MAGE01") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "MAGE02" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_MAGE02") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "MAGE02" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_MAGE05") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "MAGE05" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_AGEBRAC") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "MAGEBRAC" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_MISC33") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "MISC33" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_PLAT01") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "PLAT01" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_PLAT04") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "PLAT04" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_POTN20") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "POTN20" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_POTN21") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "POTN21" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_POTN36") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "POTN36" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_POTN37") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "POTN37" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_POTN45") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "POTN45" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_RING95") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "RING95" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_SCRL96") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "SCRL96" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_SHLD01") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "SHLD01" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_SHLD08") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "SHLD08" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_SLNG02") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "SLNG02" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_SPER01") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "SPER01" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_SPER02") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "SPER02" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_STAF01") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "STAF01" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_STAF02") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "STAF02" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_STAF07") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "STAF07" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_SW2H01") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "SW2H01" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_SW1H01") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "SW1H01" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_SW1H04") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "SW1H04" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_SW1H07") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "SW1H07" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_SW1H08") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "SW1H08" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF ("%item%" STRING_EQUAL_CASE "_SW1H24") BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "SW1H24" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF (~%item%~ STRING_EQUAL_CASE ~RNGDEMN~) THEN BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "RINGDEMN" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF (~%item%~ STRING_EQUAL_CASE ~ANKSHELL~) THEN BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "MISC1A" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF (~%item%~ STRING_EQUAL_CASE ~MIN1HP~) THEN BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "MINHP1" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        PATCH_IF (~%item%~ STRING_EQUAL_CASE ~HRZRSHED~) THEN BEGIN
          WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "SD_HRZR" #8
          READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
          PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
        END ELSE
        BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Inventory Item #%index% (%item%.itm) does not exist! Removing item..."
          REMOVE_CRE_ITEM ~%item%~
          SET "index" = "index" - 1
          READ_LONG  0x2c0 "itm_num"
        END
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Creature Stuff - Inventory Overhauler (moves invalid equippable items to inventory and equips anything in the inventory to a free slot)~
  GROUP ~Creature Stuff~

//G3 Debugging Suite - Equip invalid items
COPY_EXISTING_REGEXP GLOB ~^.+\.cre$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x2d3) THEN BEGIN
    READ_LONG  0x2b8 "slot_off" ELSE 0
    READ_LONG  0x2bc "itm_off" ELSE 0

    // tracking variables
    SET "2hweapon" = 0
    SET "offhand" = 0
    SET "bow" = 0
    SET "arrows" = 0
    SET "xbow" = 0
    SET "bolts" = 0
    SET "sling" = 0
    SET "bullets" = 0
    SET "helm" = 0
    SET "armor" = 0
    SET "gloves" = 0
    SET "lring" = 0
    SET "rring" = 0
    SET "boots" = 0
    SET "belt" = 0
    SET "amulet" = 0
    SET "weapon1" = 0
    SET "weapon2" = 0
    SET "weapon3" = 0
    SET "weapon4" = 0
    SET "quiver1" = 0
    SET "quiver2" = 0
    SET "quiver3" = 0
    SET "quiver4" = 0
    SET "cloak" = 0
    FOR (index = 0 ; index < 36 ; index = index + 1) BEGIN
      READ_SHORT ("%slot_off%" + (0x02 * "%index%")) "ref" ELSE 0xffff
      PATCH_IF ("%ref%" != 0xffff) BEGIN
        READ_ASCII ("%itm_off%" + (0x14 * "%ref%")) "item"
        PATCH_IF (!((~%item%~ STRING_EQUAL_CASE ~AA8BALA~) OR
                    (~%item%~ STRING_EQUAL_CASE ~AADEMRNG~) OR
                    (~%item%~ STRING_EQUAL_CASE ~AAGOLSTN~) OR
                    (~%item%~ STRING_EQUAL_CASE ~AAHELM~) OR
                    (~%item%~ STRING_EQUAL_CASE ~AAOROFN1~) OR
                    (~%item%~ STRING_EQUAL_CASE ~AAREVIMM~) OR
                    (~%item%~ STRING_EQUAL_CASE ~AAWEATH1~) OR
                    (~%item%~ STRING_EQUAL_CASE ~ARROPHEO~) OR
                    (~%item%~ STRING_EQUAL_CASE ~BAZPLO02~) OR
                    (~%item%~ STRING_EQUAL_CASE ~BEHOLDER~) OR
                    (~%item%~ STRING_EQUAL_CASE ~BHAALHP1~) OR
                    (~%item%~ STRING_EQUAL_CASE ~BHAALIMM~) OR
                    (~%item%~ STRING_EQUAL_CASE ~BONEDAG~) OR
                    (~%item%~ STRING_EQUAL_CASE ~CBBNLCH0~) OR
                    (~%item%~ STRING_EQUAL_CASE ~CBBNLCH1~) OR
                    (~%item%~ STRING_EQUAL_CASE ~CHWRAITH~) OR
                    (~%item%~ STRING_EQUAL_CASE ~DRAGGRE1~) OR
                    (~%item%~ STRING_EQUAL_CASE ~DRAGSHA1~) OR
                    (~%item%~ STRING_EQUAL_CASE ~DW#SKRNG~) OR
                    (~%item%~ STRING_EQUAL_CASE ~DWDUST~) OR
                    (~%item%~ STRING_EQUAL_CASE ~FAMMY~) OR
                    (~%item%~ STRING_EQUAL_CASE ~GHOST~) OR
                    (~%item%~ STRING_EQUAL_CASE ~GHOST3~) OR
                    (~%item%~ STRING_EQUAL_CASE ~GOLCLA~) OR
                    (~%item%~ STRING_EQUAL_CASE ~GOLFLE~) OR
                    (~%item%~ STRING_EQUAL_CASE ~GOLSTONE~) OR
                    (~%item%~ STRING_EQUAL_CASE ~GORAIR~) OR
                    (~%item%~ STRING_EQUAL_CASE ~GORMISTI~) OR
                    (~%item%~ STRING_EQUAL_CASE ~ILLBLUR~) OR
                    (~%item%~ STRING_EQUAL_CASE ~IMMCHS~) OR
                    (~%item%~ STRING_EQUAL_CASE ~IMMCLOUD~) OR
                    (~%item%~ STRING_EQUAL_CASE ~IMMUNE1~) OR
                    (~%item%~ STRING_EQUAL_CASE ~IMMUNE10~) OR
                    (~%item%~ STRING_EQUAL_CASE ~IMMUNE2~) OR
                    (~%item%~ STRING_EQUAL_CASE ~IMMUNE3~) OR
                    (~%item%~ STRING_EQUAL_CASE ~IMOENHP1~) OR
                    (~%item%~ STRING_EQUAL_CASE ~IMPINVIS~) OR
                    (~%item%~ STRING_EQUAL_CASE ~INVULNER~) OR
                    (~%item%~ STRING_EQUAL_CASE ~IRONGOL~) OR
                    (~%item%~ STRING_EQUAL_CASE ~JONHP1~) OR
                    (~%item%~ STRING_EQUAL_CASE ~KUORING~) OR
                    (~%item%~ STRING_EQUAL_CASE ~LICH~) OR
                    (~%item%~ STRING_EQUAL_CASE ~LICHIM2~) OR
                    (~%item%~ STRING_EQUAL_CASE ~LK#IBELT~) OR
                    (~%item%~ STRING_EQUAL_CASE ~MAGE03~) OR
                    (~%item%~ STRING_EQUAL_CASE ~MAGE04~) OR
                    (~%item%~ STRING_EQUAL_CASE ~MAGE05~) OR
                    (~%item%~ STRING_EQUAL_CASE ~MAGE06~) OR
                    (~%item%~ STRING_EQUAL_CASE ~MAGEBRAC~) OR
                    (~%item%~ STRING_EQUAL_CASE ~MAHARPER~) OR
                    (~%item%~ STRING_EQUAL_CASE ~MASAKIIM~) OR
                    (~%item%~ STRING_EQUAL_CASE ~MEL01~) OR
                    (~%item%~ STRING_EQUAL_CASE ~MGLOBE~) OR
                    (~%item%~ STRING_EQUAL_CASE ~MINHP1~) OR
                    (~%item%~ STRING_EQUAL_CASE ~MINHP20~) OR
                    (~%item%~ STRING_EQUAL_CASE ~MISTPO~) OR
                    (~%item%~ STRING_EQUAL_CASE ~MONHP1~) OR
                    (~%item%~ STRING_EQUAL_CASE ~MONHP80~) OR
                    (~%item%~ STRING_EQUAL_CASE ~NOCIRC~) OR
                    (~%item%~ STRING_EQUAL_CASE ~POWEATH1~) OR
                    (~%item%~ STRING_EQUAL_CASE ~REGHP1~) OR
                    (~%item%~ STRING_EQUAL_CASE ~REGHP2R~) OR
                    (~%item%~ STRING_EQUAL_CASE ~RIDRING~) OR
                    (~%item%~ STRING_EQUAL_CASE ~RINGDEMN~) OR
                    (~%item%~ STRING_EQUAL_CASE ~RINGWOLF~) OR
                    (~%item%~ STRING_EQUAL_CASE ~S1-20~) OR
                    (~%item%~ STRING_EQUAL_CASE ~SAREVIMM~) OR
                    (~%item%~ STRING_EQUAL_CASE ~SENGUA04~) OR
                    (~%item%~ STRING_EQUAL_CASE ~SPEC02~) OR
                    (~%item%~ STRING_EQUAL_CASE ~SPECTR~) OR
                    (~%item%~ STRING_EQUAL_CASE ~STONSKIN~) OR
                    (~%item%~ STRING_EQUAL_CASE ~T-BAMM02~) OR
                    (~%item%~ STRING_EQUAL_CASE ~TELSLAV~) OR
                    (~%item%~ STRING_EQUAL_CASE ~TELSLAV2~) OR
                    (~%item%~ STRING_EQUAL_CASE ~TRANS3~) OR
                    (~%item%~ STRING_EQUAL_CASE ~TROLLDIE~) OR
                    (~%item%~ STRING_EQUAL_CASE ~TSTATUE~) OR
                    (~%item%~ STRING_EQUAL_CASE ~TZ25_!SK~) OR
                    (~%item%~ STRING_EQUAL_CASE ~TZ25_#MH~) OR
                    (~%item%~ STRING_EQUAL_CASE ~TZ25__NB~) OR
                    (~%item%~ STRING_EQUAL_CASE ~VAMPREG1~) OR
                    (~%item%~ STRING_EQUAL_CASE ~VAMPREG2~) OR
                    (~%item%~ STRING_EQUAL_CASE ~VERMTYPE~) OR
                    (~%item%~ STRING_EQUAL_CASE ~VORSQUI1~) OR
                    (~%item%~ STRING_EQUAL_CASE ~WALLPASS~) OR
                    (~%item%~ STRING_EQUAL_CASE ~ZY18BALA~) OR
                    (~%item%~ STRING_EQUAL_CASE ~ZYCLCKN1~) OR
                    (~%item%~ STRING_EQUAL_CASE ~ZYHELME5~) OR
                    (~%item%~ STRING_EQUAL_CASE ~ZYHELMN1~) OR
                    (~%item%~ STRING_EQUAL_CASE ~ZYINVULN~) OR
                    (~%item%~ STRING_EQUAL_CASE ~ZYOROFN1~) OR
                    (~%item%~ STRING_EQUAL_CASE ~ZYREG1P3~) OR
                    (~%item%~ STRING_EQUAL_CASE ~ZYRINGN1~) OR
                    (~%item%~ STRING_EQUAL_CASE ~ZYSW1HN3~)) AND (FILE_EXISTS_IN_GAME ~%item%.itm~)) THEN BEGIN
          INNER_PATCH_FILE ~%item%.itm~ BEGIN
            READ_SHORT 0x1c "type"
            READ_BYTE 0x18 "flags"
          END
          PATCH_IF ("%index%" = 0) BEGIN // helm slot
            SET "helm" = 1
            PATCH_IF ("%type%" != 7) BEGIN // helm
              PATCH_PRINT ~%SOURCE_FILE%: Invalid HELM: %item%.itm! Moving to inventory~
              REMOVE_CRE_ITEM ~%item%~
              ADD_CRE_ITEM ~%item%~ #0 #0 #0 ~IDENTIFIED~ ~INV~
              SET "helm" = 0
            END
          END ELSE
          PATCH_IF ("%index%" = 1) BEGIN // armor slot
            SET "armor" = 1
            PATCH_IF ("%type%" != 2) BEGIN // armor
              PATCH_PRINT ~%SOURCE_FILE%: Invalid ARMOR: %item%.itm! Moving to inventory~
              REMOVE_CRE_ITEM ~%item%~
              ADD_CRE_ITEM ~%item%~ #0 #0 #0 ~IDENTIFIED~ ~INV~
              SET "armor" = 0
            END
          END ELSE
          PATCH_IF ("%index%" = 2) BEGIN // shield slot
            SET "offhand" = 1
            PATCH_IF (("%flags%" BAND 0b00000010) = 0b00000010) BEGIN // 2h check
              PATCH_PRINT ~%SOURCE_FILE%: 2-HANDED OFFHAND: %item%.itm! Moving to inventory~
              REMOVE_CRE_ITEM ~%item%~
              ADD_CRE_ITEM ~%item%~ #0 #0 #0 ~IDENTIFIED~ ~INV~
              SET "offhand" = 0
            END ELSE
            PATCH_IF ("%type%" != 12) BEGIN // if not shield, check for valid melee abilities
              SET "legit_offhand" = 0
              INNER_PATCH_FILE ~%item%.itm~ BEGIN
                READ_LONG  0x64 "abil_off"
                READ_SHORT 0x68 "abil_num"
                FOR (index3 = 0 ; index3 < abil_num ; index3 = index3 + 1) BEGIN
                  READ_BYTE ("%abil_off%" + (0x38 * "%index3%")) "ability"
                  PATCH_IF ("%ability%" = 1) BEGIN // only melee allowed in offhand
                    SET "legit_offhand" = 1
                  END
                END
              END
              PATCH_IF ("%legit_offhand%" = 0) BEGIN
                PATCH_PRINT ~%SOURCE_FILE%: Invalid OFFHAND: %item%.itm! Moving to inventory~
                REMOVE_CRE_ITEM ~%item%~
                ADD_CRE_ITEM ~%item%~ #0 #0 #0 ~IDENTIFIED~ ~INV~
                SET "offhand" = 0
              END
            END
          END ELSE
          PATCH_IF ("%index%" = 3) BEGIN // glove slot
            SET "gloves" = 1
            PATCH_IF ("%type%" != 6) BEGIN // gloves
              PATCH_PRINT ~%SOURCE_FILE%: Invalid GLOVES: %item%.itm! Moving to inventory~
              REMOVE_CRE_ITEM ~%item%~
              ADD_CRE_ITEM ~%item%~ #0 #0 #0 ~IDENTIFIED~ ~INV~
              SET "gloves" = 0
            END
          END ELSE
          PATCH_IF ("%index%" = 4) BEGIN
            SET "lring" = 1
            PATCH_IF ("%type%" != 10) BEGIN // rings
              PATCH_PRINT ~%SOURCE_FILE%: Invalid LRING: %item%.itm! Moving to inventory~
              REMOVE_CRE_ITEM ~%item%~
              ADD_CRE_ITEM ~%item%~ #0 #0 #0 ~IDENTIFIED~ ~INV~
              SET "lring" = 0
            END
          END ELSE
          PATCH_IF ("%index%" = 5) BEGIN
            SET "rring" = 1
            PATCH_IF ("%type%" != 10) BEGIN // rings
              PATCH_PRINT ~%SOURCE_FILE%: Invalid RRING: %item%.itm! Moving to inventory~
              REMOVE_CRE_ITEM ~%item%~
              ADD_CRE_ITEM ~%item%~ #0 #0 #0 ~IDENTIFIED~ ~INV~
              SET "rring" = 0
            END
          END ELSE
          PATCH_IF ("%index%" = 6) BEGIN // amulet slot
            SET "amulet" = 1
            PATCH_IF ("%type%" != 1) BEGIN // amulet
              PATCH_PRINT ~%SOURCE_FILE%: Invalid AMULET: %item%.itm! Moving to inventory~
              REMOVE_CRE_ITEM ~%item%~
              ADD_CRE_ITEM ~%item%~ #0 #0 #0 ~IDENTIFIED~ ~INV~
              SET "amulet" = 0
            END
          END ELSE
          PATCH_IF ("%index%" = 7) BEGIN // belt slot
            SET "belt" = 1
            PATCH_IF ("%type%" != 3) BEGIN // belt
              PATCH_PRINT ~%SOURCE_FILE%: Invalid BELT: %item%.itm! Moving to inventory~
              REMOVE_CRE_ITEM ~%item%~
              ADD_CRE_ITEM ~%item%~ #0 #0 #0 ~IDENTIFIED~ ~INV~
              SET "belt" = 0
            END
          END ELSE
          PATCH_IF ("%index%" = 8) BEGIN // boot slot
            SET "boots" = 1
            PATCH_IF ("%type%" != 4) BEGIN // boot
              PATCH_PRINT ~%SOURCE_FILE%: Invalid BOOTS: %item%.itm! Moving to inventory~
              REMOVE_CRE_ITEM ~%item%~
              ADD_CRE_ITEM ~%item%~ #0 #0 #0 ~IDENTIFIED~ ~INV~
              SET "boots" = 0
            END
          END ELSE
          PATCH_IF ("%index%" = 9) BEGIN // first weapon slot
            SET "weapon1" = 1
            SET "legit_weapon" = 0
            INNER_PATCH_FILE ~%item%.itm~ BEGIN
              READ_LONG  0x64 "abil_off"
              READ_SHORT 0x68 "abil_num"
              FOR (index3 = 0 ; index3 < abil_num ; index3 = index3 + 1) BEGIN
                READ_BYTE ("%abil_off%" + (0x38 * "%index3%")) "ability"
                PATCH_IF (("%ability%" = 1) OR ("%ability%" = 2) OR ("%ability%" = 4)) BEGIN // melee, ranged, or launcher
                  SET "legit_weapon" = 1
                END
              END
            END
            PATCH_IF ("%legit_weapon%" = 0) BEGIN
              PATCH_PRINT ~%SOURCE_FILE%: Invalid WEAPON1: %item%.itm! Moving to inventory~
              REMOVE_CRE_ITEM ~%item%~
              ADD_CRE_ITEM ~%item%~ #0 #0 #0 ~IDENTIFIED~ ~INV~
              SET "weapon1" = 0
            END
          END ELSE
          PATCH_IF ("%index%" = 10) BEGIN // first weapon slot
            SET "weapon2" = 1
            SET "legit_weapon" = 0
            INNER_PATCH_FILE ~%item%.itm~ BEGIN
              READ_LONG  0x64 "abil_off"
              READ_SHORT 0x68 "abil_num"
              FOR (index3 = 0 ; index3 < abil_num ; index3 = index3 + 1) BEGIN
                READ_BYTE ("%abil_off%" + (0x38 * "%index3%")) "ability"
                PATCH_IF (("%ability%" = 1) OR ("%ability%" = 2) OR ("%ability%" = 4)) BEGIN // melee, ranged, or launcher
                  SET "legit_weapon" = 1
                END
              END
            END
            PATCH_IF ("%legit_weapon%" = 0) BEGIN
              PATCH_PRINT ~%SOURCE_FILE%: Invalid WEAPON2: %item%.itm! Moving to inventory~
              REMOVE_CRE_ITEM ~%item%~
              ADD_CRE_ITEM ~%item%~ #0 #0 #0 ~IDENTIFIED~ ~INV~
              SET "weapon2" = 0
            END
          END ELSE
          PATCH_IF ("%index%" = 11) BEGIN // first weapon slot
            SET "weapon3" = 1
            SET "legit_weapon" = 0
            INNER_PATCH_FILE ~%item%.itm~ BEGIN
              READ_LONG  0x64 "abil_off"
              READ_SHORT 0x68 "abil_num"
              FOR (index3 = 0 ; index3 < abil_num ; index3 = index3 + 1) BEGIN
                READ_BYTE ("%abil_off%" + (0x38 * "%index3%")) "ability"
                PATCH_IF (("%ability%" = 1) OR ("%ability%" = 2) OR ("%ability%" = 4)) BEGIN // melee, ranged, or launcher
                  SET "legit_weapon" = 1
                END
              END
            END
            PATCH_IF ("%legit_weapon%" = 0) BEGIN
              PATCH_PRINT ~%SOURCE_FILE%: Invalid WEAPON3: %item%.itm! Moving to inventory~
              REMOVE_CRE_ITEM ~%item%~
              ADD_CRE_ITEM ~%item%~ #0 #0 #0 ~IDENTIFIED~ ~INV~
              SET "weapon3" = 0
            END
          END ELSE
          PATCH_IF ("%index%" = 12) BEGIN // first weapon slot
            SET "weapon4" = 1
            SET "legit_weapon" = 0
            INNER_PATCH_FILE ~%item%.itm~ BEGIN
              READ_LONG  0x64 "abil_off"
              READ_SHORT 0x68 "abil_num"
              FOR (index3 = 0 ; index3 < abil_num ; index3 = index3 + 1) BEGIN
                READ_BYTE ("%abil_off%" + (0x38 * "%index3%")) "ability"
                PATCH_IF (("%ability%" = 1) OR ("%ability%" = 2) OR ("%ability%" = 4)) BEGIN // melee, ranged, or launcher
                  SET "legit_weapon" = 1
                END
              END
            END
            PATCH_IF ("%legit_weapon%" = 0) BEGIN
              PATCH_PRINT ~%SOURCE_FILE%: Invalid WEAPON4: %item%.itm! Moving to inventory~
              REMOVE_CRE_ITEM ~%item%~
              ADD_CRE_ITEM ~%item%~ #0 #0 #0 ~IDENTIFIED~ ~INV~
              SET "weapon4" = 0
            END
          END ELSE
          PATCH_IF ("%index%" = 13) BEGIN // first quiver slot
            SET "quiver1" = 1
            PATCH_IF NOT (("%type%" = 5) OR ("%type%" = 31) OR ("%type%" = 14)) BEGIN
              PATCH_PRINT ~%SOURCE_FILE%: Invalid QUIVER1: %item%.itm! Moving to inventory~
              REMOVE_CRE_ITEM ~%item%~
              ADD_CRE_ITEM ~%item%~ #0 #0 #0 ~IDENTIFIED~ ~INV~
              SET "quiver1" = 0
            END
          END ELSE
          PATCH_IF ("%index%" = 14) BEGIN // first quiver slot
            SET "quiver2" = 1
            PATCH_IF NOT (("%type%" = 5) OR ("%type%" = 31) OR ("%type%" = 14)) BEGIN
              PATCH_PRINT ~%SOURCE_FILE%: Invalid QUIVER2: %item%.itm! Moving to inventory~
              REMOVE_CRE_ITEM ~%item%~
              ADD_CRE_ITEM ~%item%~ #0 #0 #0 ~IDENTIFIED~ ~INV~
              SET "quiver2" = 0
            END
          END ELSE
          PATCH_IF ("%index%" = 15) BEGIN // first quiver slot
            SET "quiver3" = 1
            PATCH_IF NOT (("%type%" = 5) OR ("%type%" = 31) OR ("%type%" = 14)) BEGIN
              PATCH_PRINT ~%SOURCE_FILE%: Invalid QUIVER3: %item%.itm! Moving to inventory~
              REMOVE_CRE_ITEM ~%item%~
              ADD_CRE_ITEM ~%item%~ #0 #0 #0 ~IDENTIFIED~ ~INV~
              SET "quiver3" = 0
            END
          END ELSE
          PATCH_IF ("%index%" = 16) BEGIN // first quiver slot
            SET "quiver4" = 1
            PATCH_IF NOT (("%type%" = 5) OR ("%type%" = 31) OR ("%type%" = 14)) BEGIN
              PATCH_PRINT ~%SOURCE_FILE%: Invalid QUIVER4: %item%.itm! Moving to inventory~
              REMOVE_CRE_ITEM ~%item%~
              ADD_CRE_ITEM ~%item%~ #0 #0 #0 ~IDENTIFIED~ ~INV~
              SET "quiver4" = 0
            END
          END ELSE
          PATCH_IF ("%index%" = 17) BEGIN // cloak
            SET "cloak" = 1
            PATCH_IF ("%type%" != 32) BEGIN // cloak
              PATCH_PRINT ~%SOURCE_FILE%: Invalid CLOAK: %item%.itm! Moving to inventory~
              REMOVE_CRE_ITEM ~%item%~
              ADD_CRE_ITEM ~%item%~ #0 #0 #0 ~IDENTIFIED~ ~INV~
            END
          END ELSE
          PATCH_IF ((("%type%" =  1) AND ("%amulet%" = 0))) AND ("%index%" > 17) BEGIN
            PATCH_PRINT ~%SOURCE_FILE%: Equippable items in inventory: %item%.itm! Equipping AMULET~
            REMOVE_CRE_ITEM ~%item%~
            ADD_CRE_ITEM ~%item%~ #0 #0 #0 ~IDENTIFIED~ ~AMULET~
            SET "%amulet%" = 1
          END ELSE
          PATCH_IF ((("%type%" =  2) AND ("%armor%" = 0))) AND ("%index%" > 17) BEGIN
            PATCH_PRINT ~%SOURCE_FILE%: Equippable items in inventory: %item%.itm! Equipping ARMOR~
            REMOVE_CRE_ITEM ~%item%~
            ADD_CRE_ITEM ~%item%~ #0 #0 #0 ~IDENTIFIED~ ~ARMOR~
            SET "%armor%" = 1
          END ELSE
          PATCH_IF ((("%type%" =  3) AND ("%belt%" = 0))) AND ("%index%" > 17) BEGIN
            PATCH_PRINT ~%SOURCE_FILE%: Equippable items in inventory: %item%.itm! Equipping BELT~
            REMOVE_CRE_ITEM ~%item%~
            ADD_CRE_ITEM ~%item%~ #0 #0 #0 ~IDENTIFIED~ ~BELT~
            SET "%belt%" = 1
          END ELSE
          PATCH_IF ((("%type%" =  4) AND ("%boots%" = 0))) AND ("%index%" > 17) BEGIN
            PATCH_PRINT ~%SOURCE_FILE%: Equippable items in inventory: %item%.itm! Equipping BOOTS~
            REMOVE_CRE_ITEM ~%item%~
            ADD_CRE_ITEM ~%item%~ #0 #0 #0 ~IDENTIFIED~ ~BOOTS~
            SET "%boots%" = 1
          END ELSE
          PATCH_IF (((("%type%" =  5) OR
                      ("%type%" = 14) OR
                      ("%type%" = 31)) AND ("%quiver1%" = 0)) AND ("%index%" > 17)) BEGIN
            PATCH_PRINT ~%SOURCE_FILE%: Equippable items in inventory: %item%.itm! Equipping QUIVER1~
            REMOVE_CRE_ITEM ~%item%~
            ADD_CRE_ITEM ~%item%~ #0 #0 #0 ~IDENTIFIED~ ~QUIVER1 INV~
            SET "%quiver1%" = 1
          END ELSE
          PATCH_IF (((("%type%" =  5) OR
                      ("%type%" = 14) OR
                      ("%type%" = 31)) AND ("%quiver2%" = 0)) AND ("%index%" > 17)) BEGIN
            PATCH_PRINT ~%SOURCE_FILE%: Equippable items in inventory: %item%.itm! Equipping QUIVER2~
            REMOVE_CRE_ITEM ~%item%~
            ADD_CRE_ITEM ~%item%~ #0 #0 #0 ~IDENTIFIED~ ~QUIVER2 INV~
            SET "%quiver2%" = 1
          END ELSE
          PATCH_IF (((("%type%" =  5) OR
                      ("%type%" = 14) OR
                      ("%type%" = 31)) AND ("%quiver3%" = 0)) AND ("%index%" > 17)) BEGIN
            PATCH_PRINT ~%SOURCE_FILE%: Equippable items in inventory: %item%.itm! Equipping QUIVER3~
            REMOVE_CRE_ITEM ~%item%~
            ADD_CRE_ITEM ~%item%~ #0 #0 #0 ~IDENTIFIED~ ~QUIVER3 INV~
            SET "%quiver3%" = 1
          END ELSE
          PATCH_IF (((("%type%" =  5) OR
                      ("%type%" = 14) OR
                      ("%type%" = 31)) AND ("%quiver4%" = 0)) AND ("%index%" > 17)) BEGIN
            PATCH_PRINT ~%SOURCE_FILE%: Equippable items in inventory: %item%.itm! Equipping QUIVER4~
            REMOVE_CRE_ITEM ~%item%~
            ADD_CRE_ITEM ~%item%~ #0 #0 #0 ~IDENTIFIED~ ~QUIVER4 INV~
            SET "%quiver4%" = 1
          END ELSE
          PATCH_IF ((("%type%" =  6) AND ("%gloves%" = 0))) AND ("%index%" > 17) BEGIN
            PATCH_PRINT ~%SOURCE_FILE%: Equippable items in inventory: %item%.itm! Equipping GLOVES~
            REMOVE_CRE_ITEM ~%item%~
            ADD_CRE_ITEM ~%item%~ #0 #0 #0 ~IDENTIFIED~ ~GLOVES~
            SET "gloves" = 1
          END ELSE
          PATCH_IF ((("%type%" =  7) AND ("%helm%" = 0))) AND ("%index%" > 17) BEGIN
            PATCH_PRINT ~%SOURCE_FILE%: Equippable items in inventory: %item%.itm! Equipping HELM~
            REMOVE_CRE_ITEM ~%item%~
            ADD_CRE_ITEM ~%item%~ #0 #0 #0 ~IDENTIFIED~ ~HELMET~
            SET "helm" = 1
          END ELSE
          PATCH_IF ((("%type%" = 10) AND ("%lring%" = 0))) AND ("%index%" > 17) BEGIN
            PATCH_PRINT ~%SOURCE_FILE%: Equippable items in inventory: %item%.itm! Equipping LRING~
            REMOVE_CRE_ITEM ~%item%~
            ADD_CRE_ITEM ~%item%~ #0 #0 #0 ~IDENTIFIED~ ~LRING~
            SET "lring" = 1
          END ELSE
          PATCH_IF ((("%type%" = 10) AND ("%rring%" = 0))) AND ("%index%" > 17) BEGIN
            PATCH_PRINT ~%SOURCE_FILE%: Equippable items in inventory: %item%.itm! Equipping RRING~
            REMOVE_CRE_ITEM ~%item%~
            ADD_CRE_ITEM ~%item%~ #0 #0 #0 ~IDENTIFIED~ ~RRING~
            SET "rring" = 1
          END ELSE
          PATCH_IF (((("%type%" = 15) OR // bow
                      ("%type%" = 16) OR // dagger
                      ("%type%" = 17) OR // maces
                      ("%type%" = 18) OR // sling
                      ("%type%" = 19) OR // short sword
                      ("%type%" = 20) OR // swords
                      ("%type%" = 21) OR // hammer
                      ("%type%" = 22) OR // morning stars
                      ("%type%" = 23) OR // flail
                      ("%type%" = 24) OR // darts
                      ("%type%" = 25) OR // axe
                      ("%type%" = 26) OR // staff
                      ("%type%" = 27) OR // xbow
                      ("%type%" = 28) OR // hand to hand
                      ("%type%" = 29) OR // Spear
                      ("%type%" = 30) OR // halberd
                      ("%type%" = 32) OR // cloak
                      ("%type%" = 44)) AND ("%weapon1%" = 0) AND ("%index%" > 17)))  BEGIN
            PATCH_IF NOT ((("%flags%" BAND 0b00000010) = 0b00000010) AND ("%offhand%" = 1)) BEGIN
              PATCH_PRINT ~%SOURCE_FILE%: Equippable items in inventory: %item%.itm! Equipping WEAPON1~
              REMOVE_CRE_ITEM ~%item%~
              ADD_CRE_ITEM ~%item%~ #0 #0 #0 ~IDENTIFIED~ ~WEAPON1 INV~
              SET "%weapon1%" = 1
            END
          END ELSE
          PATCH_IF ((("%type%" = 12) AND ("%offhand%" = 0))) AND ("%index%" > 17) BEGIN
            PATCH_PRINT ~%SOURCE_FILE%: Equippable items in inventory: %item%.itm! Equipping SHIELD~
            REMOVE_CRE_ITEM ~%item%~
            ADD_CRE_ITEM ~%item%~ #0 #0 #0 ~IDENTIFIED~ ~SHIELD~
            SET "offhand" = 1
          END ELSE
          PATCH_IF ((("%type%" != 12) AND ("%offhand%" = 0))) AND ("%index%" > 17) BEGIN // if not shield, check for valid melee abilities
            SET "2handed" = 0
            SET "legit_offhand" = 0
            INNER_PATCH_FILE ~%item%.itm~ BEGIN
              READ_BYTE  0x18 "flags"
              READ_LONG  0x64 "abil_off"
              READ_SHORT 0x68 "abil_num"
              PATCH_IF (("%flags%" BAND 0b00000010) = 0b00000010) BEGIN // 2h check
                  SET "2handed" = 1
              END
              FOR (index3 = 0 ; index3 < abil_num ; index3 = index3 + 1) BEGIN
                READ_BYTE ("%abil_off%" + (0x38 * "%index3%")) "ability"
                PATCH_IF ("%ability%" = 1) BEGIN // only melee allowed in offhand
                  SET "legit_offhand" = 1
                END
              END
            END
            PATCH_IF (("%legit_offhand%" = 1) AND ("%2handed%" = 0))BEGIN
              PATCH_PRINT ~%SOURCE_FILE%: Equippable items in inventory: %item%.itm! Equipping OFFHAND~
              REMOVE_CRE_ITEM ~%item%~
              ADD_CRE_ITEM ~%item%~ #0 #0 #0 ~IDENTIFIED~ ~SHIELD~
              SET "offhand" = 1
            END
          END ELSE
          PATCH_IF (((("%type%" = 15) OR // bow
                      ("%type%" = 16) OR // dagger
                      ("%type%" = 17) OR // maces
                      ("%type%" = 18) OR // sling
                      ("%type%" = 19) OR // short sword
                      ("%type%" = 20) OR // swords
                      ("%type%" = 21) OR // hammer
                      ("%type%" = 22) OR // morning stars
                      ("%type%" = 23) OR // flail
                      ("%type%" = 24) OR // darts
                      ("%type%" = 25) OR // axe
                      ("%type%" = 26) OR // staff
                      ("%type%" = 27) OR // xbow
                      ("%type%" = 28) OR // hand to hand
                      ("%type%" = 29) OR // Spear
                      ("%type%" = 30) OR // halberd
                      ("%type%" = 32) OR // cloak
                      ("%type%" = 44)) AND ("%weapon2%" = 0) AND ("%index%" > 17)))  BEGIN
            PATCH_IF NOT ((("%flags%" BAND 0b00000010) = 0b00000010) AND ("%offhand%" = 1)) BEGIN
              PATCH_PRINT ~%SOURCE_FILE%: Equippable items in inventory: %item%.itm! Equipping WEAPON2~
              REMOVE_CRE_ITEM ~%item%~
              ADD_CRE_ITEM ~%item%~ #0 #0 #0 ~IDENTIFIED~ ~WEAPON2 INV~
              SET "%weapon2%" = 1
            END
          END ELSE
          PATCH_IF (((("%type%" = 15) OR // bow
                      ("%type%" = 16) OR // dagger
                      ("%type%" = 17) OR // maces
                      ("%type%" = 18) OR // sling
                      ("%type%" = 19) OR // short sword
                      ("%type%" = 20) OR // swords
                      ("%type%" = 21) OR // hammer
                      ("%type%" = 22) OR // morning stars
                      ("%type%" = 23) OR // flail
                      ("%type%" = 24) OR // darts
                      ("%type%" = 25) OR // axe
                      ("%type%" = 26) OR // staff
                      ("%type%" = 27) OR // xbow
                      ("%type%" = 28) OR // hand to hand
                      ("%type%" = 29) OR // Spear
                      ("%type%" = 30) OR // halberd
                      ("%type%" = 32) OR // cloak
                      ("%type%" = 44)) AND ("%weapon3%" = 0) AND ("%index%" > 17)))  BEGIN
            PATCH_IF NOT ((("%flags%" BAND 0b00000010) = 0b00000010) AND ("%offhand%" = 1)) BEGIN
              PATCH_PRINT ~%SOURCE_FILE%: Equippable items in inventory: %item%.itm! Equipping WEAPON3~
              REMOVE_CRE_ITEM ~%item%~
              ADD_CRE_ITEM ~%item%~ #0 #0 #0 ~IDENTIFIED~ ~WEAPON3 INV~
              SET "%weapon3%" = 1
            END
          END ELSE
          PATCH_IF (((("%type%" = 15) OR // bow
                      ("%type%" = 16) OR // dagger
                      ("%type%" = 17) OR // maces
                      ("%type%" = 18) OR // sling
                      ("%type%" = 19) OR // short sword
                      ("%type%" = 20) OR // swords
                      ("%type%" = 21) OR // hammer
                      ("%type%" = 22) OR // morning stars
                      ("%type%" = 23) OR // flail
                      ("%type%" = 24) OR // darts
                      ("%type%" = 25) OR // axe
                      ("%type%" = 26) OR // staff
                      ("%type%" = 27) OR // xbow
                      ("%type%" = 28) OR // hand to hand
                      ("%type%" = 29) OR // Spear
                      ("%type%" = 30) OR // halberd
                      ("%type%" = 32) OR // cloak
                      ("%type%" = 44)) AND ("%weapon4%" = 0) AND ("%index%" > 17)))  BEGIN
            PATCH_IF NOT ((("%flags%" BAND 0b00000010) = 0b00000010) AND ("%offhand%" = 1)) BEGIN
              PATCH_PRINT ~%SOURCE_FILE%: Equippable items in inventory: %item%.itm! Equipping WEAPON4~
              REMOVE_CRE_ITEM ~%item%~
              ADD_CRE_ITEM ~%item%~ #0 #0 #0 ~IDENTIFIED~ ~WEAPON4 INV~
                SET "%weapon4%" = 1
            END
          END
        END
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Item Stuff (Recommended) - Item Resource Fixer (res_fixer for ALL ITEMS)~
  GROUP ~Item Stuff (Recommended)~

//ResFixer - Basic Fixing
COPY_EXISTING_REGEXP GLOB ~^.+\.itm$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x71) BEGIN
    PATCH_INCLUDE ~lolfixer/lib/fj_spl_itm_reindex.tpp~
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Item Stuff - Offset Checker (fixes incorrect offsets)~
  GROUP ~Item Stuff~

COPY_EXISTING_REGEXP GLOB ~^.+\.itm$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x72) BEGIN
    READ_LONG  0x64 "abil_off"
    READ_SHORT 0x68 "abil_num"
    READ_LONG  0x6a "fx_off"
    READ_SHORT 0x70 "fx_num"
    SET "running_offset" = 0x72

    // check abilities/extended header
    PATCH_IF ("%abil_off%" != "%running_offset%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Abilities offset is incorrect! Correcting..."
      WRITE_LONG  0x64 "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + ("%abil_num%" * 0x38))
    // check features/equipped effects
    PATCH_IF ("%fx_off%" != "%running_offset%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Equipped Effect offset is incorrect! Correcting..."
      WRITE_LONG  0x6a "running_offset"
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Item Stuff - Permanent Effect Duration Nuller (sets duration for permanent effects to 0)~
  GROUP ~Item Stuff~

//G3Debugging Suite - Permanent effects with non-zero duration
COPY_EXISTING_REGEXP GLOB ~^.+\.itm$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x71) BEGIN
    READ_LONG  0x64 "abil_off"
    READ_SHORT 0x68 "abil_num"
    READ_LONG  0x6a "fx_off"

    FOR (index = 0; index < abil_num; index = index + 1) BEGIN
      READ_SHORT ("%abil_off%" + 0x1e + (0x38 * "%index%")) "abil_fx_num"
      READ_SHORT ("%abil_off%" + 0x20 + (0x38 * "%index%")) "abil_fx_idx"
      FOR (index2 = 0 ; index2 < abil_fx_num ; index2 = index2 + 1) BEGIN
        READ_SHORT ("%fx_off%" +        (("%index2%" + "%abil_fx_idx%") * 0x30)) "opcode"
        READ_BYTE  ("%fx_off%" + 0x0c + (("%index2%" + "%abil_fx_idx%") * 0x30)) "timing"
        READ_LONG  ("%fx_off%" + 0x0e + (("%index2%" + "%abil_fx_idx%") * 0x30)) "duration"
        PATCH_IF ((("%timing%" = 1) OR ("%timing%" = 9)) AND ("%duration%" > 0)) BEGIN
          PATCH_PRINT "%SOURCE_FILE%: Ability #%index% has a permanent effect with non-zero duration (effect #%index2%, opcode %opcode%)! Nulling duration..."
          WRITE_LONG  ("%fx_off%" + 0x0e + (("%index2%" + "%abil_fx_idx%") * 0x30)) 0
        END
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Item Stuff - Equipped Effect Targetter (makes any items that don't target self on equip, target self)~
  GROUP ~Item Stuff~

COPY_EXISTING_REGEXP GLOB ~^.+\.itm$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x71) BEGIN
    READ_LONG  0x6a "fx_off"
    READ_SHORT 0x70 "fx_num"
    FOR (index = 0 ; index < fx_num ; index = index + 1) BEGIN // check equipping effects
      READ_SHORT ("%fx_off%" +        ("%index%" * 0x30)) "opcode"
      READ_BYTE  ("%fx_off%" + 0x02 + ("%index%" * 0x30)) "target"
      PATCH_IF ("%target%" != 1) BEGIN
        PATCH_PRINT "%SOURCE_FILE%: Global Effect #%index% (opcode %opcode%) has an incorrect target! Targeting self..."
        WRITE_BYTE  ("%fx_off%" + 0x02 + ("%index%" * 0x30)) 1
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Item Stuff - Equipped Effect Activator (makes any equipped effects that didn't activate on equip now activate)~
  GROUP ~Item Stuff~

COPY_EXISTING_REGEXP GLOB ~^.+\.itm$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x71) BEGIN
    READ_LONG  0x6a "fx_off"
    READ_SHORT 0x70 "fx_num"

    FOR (index = 0 ; index < fx_num ; index = index + 1) BEGIN // check equipping effects
      READ_SHORT ("%fx_off%" +        ("%index%" * 0x30)) "opcode"
      READ_BYTE  ("%fx_off%" + 0x0c + ("%index%" * 0x30)) "timing"
      PATCH_IF ("%timing%" != 2) BEGIN
        PATCH_PRINT "%SOURCE_FILE%: Global Effect #%index% (opcode %opcode%) has an incorrect timing mode! Making effect active when equipped..."
        WRITE_BYTE  ("%fx_off%" + 0x0c + ("%index%" * 0x30)) 2
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Item Stuff - Equipped Effect Undispeller (makes any dispellable equipped effects undispellable)~
  GROUP ~Item Stuff~

COPY_EXISTING_REGEXP GLOB ~^.+\.itm$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x71) BEGIN
    READ_LONG  0x6a "fx_off"
    READ_SHORT 0x70 "fx_num"

    FOR (index = 0 ; index < fx_num ; index = index + 1) BEGIN // check equipping effects
      READ_SHORT ("%fx_off%" +        ("%index%" * 0x30)) "opcode"
      READ_BYTE  ("%fx_off%" + 0x0d + ("%index%" * 0x30)) "dispel"

      PATCH_IF (("%dispel%" != 0) AND ("%dispel%" != 2)) BEGIN
        PATCH_PRINT "%SOURCE_FILE%: Global Effect #%index% (opcode %opcode%) can be dispelled! Making non-dispellable..."
        WRITE_BYTE  ("%fx_off%" + 0x0d + ("%index%" * 0x30)) 2
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Item Stuff - Equipped Item 100% Probability Check (makes equipped effects that don't have a 100% probability of happening always activate)~
  GROUP ~Item Stuff~

COPY_EXISTING_REGEXP GLOB ~^.+\.itm$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x71) BEGIN
    READ_LONG  0x6a "fx_off"
    READ_SHORT 0x70 "fx_num"

    FOR (index = 0 ; index < fx_num ; index = index + 1) BEGIN // check equipping effects
      READ_SHORT ("%fx_off%" +        ("%index%" * 0x30)) "opcode"
      READ_BYTE  ("%fx_off%" + 0x12 + ("%index%" * 0x30)) "prob1"
      READ_BYTE  ("%fx_off%" + 0x13 + ("%index%" * 0x30)) "prob2"

      PATCH_IF (("%prob1%" != 100) AND ("%prob2%" != 0)) BEGIN
        PATCH_PRINT "%SOURCE_FILE%: Global Effect #%index% (opcode %opcode%) is not always applied! Making effect always occur..."
        WRITE_BYTE  ("%fx_off%" + 0x12 + ("%index%" * 0x30)) 100
        WRITE_BYTE  ("%fx_off%" + 0x13 + ("%index%" * 0x30)) 0
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Spell Stuff (Recommended) - Spell Resource Fixer (res_fixer for ALL THE SPELLS)~
  GROUP ~Spell Stuff (Recommended)~

//ResFixer
COPY_EXISTING_REGEXP GLOB ~^.+\.spl$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x71) BEGIN
    PATCH_INCLUDE ~lolfixer/lib/fj_spl_itm_reindex.tpp~
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Spell Stuff - Offset Checker (fixes incorrect offsets)~
  GROUP ~Spell Stuff~

COPY_EXISTING_REGEXP GLOB ~^.+\.spl$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x72) BEGIN
    READ_LONG  0x64 "abil_off"
    READ_SHORT 0x68 "abil_num"
    READ_LONG  0x6a "fx_off"
    READ_SHORT 0x70 "fx_num"
    SET "running_offset" = 0x72

    // check abilities/extended header
    PATCH_IF ("%abil_off%" != "%running_offset%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Abilities offset is incorrect! Correcting..."
      WRITE_LONG  0x64 "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + ("%abil_num%" * 0x28))
    // check features/equipped effects
    PATCH_IF ("%fx_off%" != "%running_offset%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Casting Effect offset is incorrect! Correcting..."
      WRITE_LONG  0x6a "running_offset"
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Spell Stuff (Recommended) - Innate Fixer (makes Innate spells level 1)~
  GROUP ~Spell Stuff (Recommended)~

//Innate Fixer
COPY_EXISTING_REGEXP GLOB ~^.+\.spl$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x71) BEGIN
    READ_LONG  0x34 spell_level
    READ_SHORT 0x1c spell_type
    PATCH_IF ((%spell_type% = 4) AND (%spell_level% != 1)) BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Innate Spell is not Level 1! Setting level to 1..."
      WRITE_LONG 0x34 ~1~
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Spell Stuff - Permanent Effect Duration Nuller (sets duration for permanent effects to 0)~
  GROUP ~Spell Stuff~

//G3 Debugging Suite
COPY_EXISTING_REGEXP GLOB ~^.+\.spl$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x71) BEGIN
    READ_LONG  0x64 "abil_off"
    READ_SHORT 0x68 "abil_num"
    READ_LONG  0x6a "fx_off"

    FOR (index = 0; index < abil_num; index = index + 1) BEGIN
      READ_SHORT ("%abil_off%" + 0x1e + (0x28 * "%index%")) "abil_fx_num"
      READ_SHORT ("%abil_off%" + 0x20 + (0x28 * "%index%")) "abil_fx_idx"
      FOR (index2 = 0 ; index2 < abil_fx_num ; index2 = index2 + 1) BEGIN
        READ_SHORT ("%fx_off%" +        (("%index2%" + "%abil_fx_idx%") * 0x30)) "opcode"
        READ_BYTE  ("%fx_off%" + 0x0c + (("%index2%" + "%abil_fx_idx%") * 0x30)) "timing"
        READ_LONG  ("%fx_off%" + 0x0e + (("%index2%" + "%abil_fx_idx%") * 0x30)) "duration"
        PATCH_IF ((("%timing%" = 1) OR ("%timing%" = 9)) AND ("%duration%" > 0)) BEGIN
          PATCH_PRINT "%SOURCE_FILE%: Ability #%index% has a permanent effect with non-zero duration (effect #%index2%, opcode %opcode%)! Nulling duration..."
          WRITE_LONG  ("%fx_off%" + 0x0e + (("%index2%" + "%abil_fx_idx%") * 0x30)) 0
        END
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES