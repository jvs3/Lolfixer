BACKUP ~lolfixer/backup~
AUTHOR ~Lollorian~
VERSION ~0.1B~

BEGIN ~Area Stuff - MAJESTIC Area Fixer~
  GROUP ~Area Stuff~

ACTION_IF !(FILE_EXISTS ~override/xr2400.are~) THEN BEGIN
  COPY_EXISTING ~ar0087.are~ ~override/xr2400.are~
END
ACTION_IF !(FILE_EXISTS ~override/xr2600.are~) THEN BEGIN
  COPY_EXISTING ~ar0087.are~ ~override/xr2600.are~
END

COPY_EXISTING_REGEXP GLOB ~^.+\.are$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x11b) THEN BEGIN

    // Script Assigner
    READ_ASCII 0x94 "script"

    SET "exists" = 0
    SET "scexists" = 0
    SET "unassigned" = 0
    SET "missing" = 0
    INNER_PATCH_FILE ~%SOURCE_RES%.bcs~ BEGIN
      SET "exists" = 1
    END
    INNER_PATCH_FILE ~%script%.bcs~ BEGIN
      SET "scexists" = 1
    END
    PATCH_IF (("%scexists%" = 0) AND ("%exists%" = 0)) BEGIN
      SET "missing" = 1
    END
    PATCH_IF (("%scexists%" = 0) AND ("%exists%" = 1)) BEGIN
      SET "unassigned" = 1
    END
    PATCH_IF ("%unassigned%" = 1) BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Area Script (%SOURCE_RES%.bcs) assigned"
      WRITE_ASCIIE 0x94 ~%SOURCE_RES%~ #8
    END ELSE
    PATCH_IF ("%missing%" = 1) BEGIN
      PATCH_IF NOT (("%script%" STRING_EQUAL_CASE "NONE") OR ("%script%" STRING_EQUAL_CASE "")) BEGIN
        PATCH_PRINT "%SOURCE_FILE% error: Missing area Script (%script%.bcs) created"
        INNER_ACTION BEGIN
          <<<<<<<< %script%.BAF
>>>>>>>>
          COMPILE ~%script%.BAF~
        END
      END ELSE
      BEGIN
        PATCH_PRINT "%SOURCE_FILE% error: Missing area Script (%SOURCE_RES%.bcs) created and assigned"
        INNER_ACTION BEGIN
          <<<<<<<< %SOURCE_RES%.BAF
>>>>>>>>
          COMPILE ~%SOURCE_RES%.BAF~
        END
        WRITE_ASCIIE 0x94 ~%SOURCE_RES%~ #8
      END
    END

    // Missing Ambient Remover
    READ_SHORT 0x82 "amb_num" ELSE 0
    READ_LONG  0x84 "amb_off" ELSE 0

    PATCH_IF (amb_off > 0x11b) THEN BEGIN
      FOR (index = 0 ; index < amb_num ; index = index + 1) BEGIN
        FOR (index2 = 0 ; index2 < 10 ; index2 = index2 + 1) BEGIN
          READ_ASCII ("%amb_off%" + 0x30 + ("%index2%" * 0x08) + (0xd4 * "%index%")) "resref"
          PATCH_IF NOT (("%resref%" STRING_EQUAL_CASE "") OR ("%resref%" STRING_EQUAL_CASE "none")) BEGIN
            SET "exists" = 0
            INNER_PATCH_FILE ~%resref%.wav~ BEGIN
              SET "exists" = 1
            END
            PATCH_IF ("%exists%" = 0) BEGIN
              PATCH_PRINT "%SOURCE_FILE% error: Ambient #%index% does not exist (%resref%.wav)! Nulling..."
              WRITE_ASCII ("%amb_off%" + 0x30 + ("%index2%" * 0x08) + (0xd4 * "%index%")) ~NONE~ #8
            END
          END
        END
      END
    END

    // Missing Actor Remover
    READ_LONG  0x54 "actor_off" ELSE 0
    READ_SHORT 0x58 "actor_num" ELSE 0

    PATCH_IF (actor_off > 0x11b) THEN BEGIN
      FOR (index = 0 ; index < actor_num ; index = index + 1) BEGIN
        READ_BYTE  ("%actor_off%" + 0x28 + (0x110 * "%index%")) "flags"  // flags first byte
        READ_ASCII ("%actor_off%" + 0x80 + (0x110 * "%index%")) "resref" // cre file
        PATCH_IF ("%resref%" STRING_COMPARE_REGEXP "^[Rr][Dd].+$") BEGIN // ignore creatures starting with RD
          SET "exists" = 0
          SET "attached" = 0
          INNER_PATCH_FILE ~%resref%.cre~ BEGIN
            SET "exists" = 1
          END
          PATCH_IF (("%flags%" BAND 0b10000000) = 0b00000000) BEGIN
            SET "attached" = 1
          END
          PATCH_IF (("%exists%" = 0) AND ("%attached%" = 0)) BEGIN
            PATCH_PRINT "%SOURCE_FILE% error: Actor #%index% does not exist (%resref%.cre)! Removing actor..."
            LPF fj_are_structure
              INT_VAR fj_delete_mode    = "%index%"
              STR_VAR fj_structure_type = actor
            END
            SET "index" = 0 - 1
            READ_SHORT 0x58 "actor_num"
          END
        END
      END
    END

    // Missing Spawn Remover
    READ_LONG  0x60 "spawn_off" ELSE 0
    READ_LONG  0x64 "spawn_num" ELSE 0

    PATCH_IF (spawn_off > 0x11b) THEN BEGIN
      FOR (index = 0 ; index < spawn_num ; index = index + 1) BEGIN
        FOR (index2 = 0 ; index2 < 10 ; index2 = index2 + 1) BEGIN
          READ_ASCII ("%spawn_off%" + 0x24 + ("%index2%" * 0x08) + ("%index%" * 0xc8)) "resref"
          PATCH_IF (("%resref%" STRING_COMPARE_CASE "") AND                  // ignore empty entries
                    ("%resref%" STRING_COMPARE_CASE "none") AND              // ignore 'none'
                    ("%resref%" STRING_COMPARE_REGEXP "^[Rr][Dd].+$")) BEGIN // ignore creatures starting with RD
            SET "exists" = 0
            INNER_PATCH_FILE ~%resref%.cre~ BEGIN
              SET "exists" = 1
            END
            PATCH_IF ("%exists%" = 0) BEGIN
              PATCH_PRINT "%SOURCE_FILE% error: Spawn Point #%index% creature file does not exist (%resref%.cre)! Nulling..."
              WRITE_ASCII ("%spawn_off%" + 0x24 + ("%index2%" * 0x08) + ("%index%" * 0xc8)) ~NONE~ #8
            END
          END
        END
        SET "none_count" = 0
        FOR (index2 = 0 ; index2 < 10 ; index2 = index2 + 1) BEGIN
          READ_ASCII ("%spawn_off%" + 0x24 + ("%index2%" * 0x08) + ("%index%" * 0xc8)) "resref"
          PATCH_IF (("%resref%" STRING_EQUAL_CASE "") OR ("%resref%" STRING_EQUAL_CASE "none")) BEGIN
            SET "none_count" = "none_count" + 1
          END
        END
        PATCH_IF ("%none_count%" = 10) BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Spawn Point #%index% has no creatures to spawn! Removing spawn entry..."
          LPF fj_are_structure
            INT_VAR fj_delete_mode    = "%index%"
            STR_VAR fj_structure_type = spawn
          END
          SET "index" = 0 - 1
          READ_LONG  0x64 "spawn_num"
        END
      END
    END

    // Missing Rest Spawn Remover
    READ_LONG  0xc0 "rest_off" ELSE 0

    PATCH_IF (rest_off > 0x11b) THEN BEGIN
      FOR (index = 0 ; index < 10 ; index = index + 1) BEGIN
        READ_ASCII ("%rest_off%" + 0x48 + ("%index%" * 0x08)) "resref"
        PATCH_IF (("%resref%" STRING_COMPARE_CASE "") AND                  // ignore empty entries
                  ("%resref%" STRING_COMPARE_CASE "none") AND              // ignore 'none'
                  ("%resref%" STRING_COMPARE_REGEXP "^[Rr][Dd].+$")) BEGIN // ignore creatures starting with RD
          SET "exists" = 0
          INNER_PATCH_FILE ~%resref%.cre~ BEGIN
            SET "exists" = 1
          END
          PATCH_IF ("%exists%" = 0) BEGIN
            PATCH_PRINT "%SOURCE_FILE% error: Rest Spawn creature file does not exist (%resref%.cre)! Nulling..."
            WRITE_ASCII ("%rest_off%" + 0x48 + ("%index%" * 0x08)) "NONE" #8
          END
        END
      END
      SET "none_count" = 0
      FOR (index = 0 ; index < 10 ; index = index + 1) BEGIN
        READ_ASCII ("%rest_off%" + 0x48 + ("%index%" * 0x08)) "resref"
        PATCH_IF (("%resref%" STRING_EQUAL_CASE "") OR ("%resref%" STRING_EQUAL_CASE "none")) BEGIN
          SET "none_count" = "none_count" + 1
        END
      END
      READ_SHORT ("%rest_off%" + 0x98) "spawncount"
      PATCH_IF (("%none_count%" = 10) AND ("%spawncount%" != 0)) BEGIN
        PATCH_PRINT "%SOURCE_FILE% error: No creatures in Rest Spawn Entry but area still set to spawn something! Setting number of spawnable creatures to 0..."
        WRITE_SHORT ("%rest_off%" + 0x98) 0
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Creature Stuff - Creature Resource Fixer (res_fixer for ALL CREATURES)~
  GROUP ~Creature Stuff~

COPY_EXISTING_REGEXP GLOB ~^.+\.cre$~ ~override~
  LPF FJ_CRE_VALIDITY
    INT_VAR do_message = 1
  END
  PATCH_IF ("%SOURCE_RES%" STRING_EQUAL_CASE "SENDRO03") AND (SOURCE_SIZE > 0x2d3) THEN BEGIN
    READ_LONG  0x2a8 "meminfo_off" ELSE 0
    READ_LONG  0x2ac "meminfo_num" ELSE 0
    READ_LONG  0x2b0 "mem_spl_off" ELSE 0
    READ_LONG  0x2b4 "mem_spl_num" ELSE 0

    PATCH_IF ("meminfo_off" > 0x2d3) AND ("mem_spl_off" > 0x2d3) THEN BEGIN
      READ_SHORT ("%meminfo_off%" + 0x04 + (0x10 * ("%meminfo_num%" - 1))) "spl_mem_num"
      READ_SHORT ("%meminfo_off%" + 0x08 + (0x10 * ("%meminfo_num%" - 1))) "spl_tbl_idx"
      READ_SHORT ("%meminfo_off%" + 0x0c + (0x10 * ("%meminfo_num%" - 1))) "spl_tbl_cnt"
      READ_ASCII ("%mem_spl_off%" +        (0x0c * ("%spl_tbl_idx%" + "%spl_tbl_cnt%"))) "resref1" ELSE 0
      READ_ASCII ("%mem_spl_off%" +        (0x0c * ("%spl_tbl_idx%" + "%spl_tbl_cnt%" + 1))) "resref2" ELSE 0
      READ_ASCII ("%mem_spl_off%" +        (0x0c * ("%spl_tbl_idx%" + "%spl_tbl_cnt%" + 2))) "resref3" ELSE 0
      READ_ASCII ("%mem_spl_off%" +        (0x0c * ("%spl_tbl_idx%" + "%spl_tbl_cnt%" + 3))) "resref4" ELSE 0
      PATCH_IF ("%resref1%" STRING_EQUAL_CASE "SPCL900") BEGIN
        PATCH_PRINT "%SOURCE_FILE% error: Known ERROR in SENDRO03.CRE! (%resref1%, %resref2%, %resref3%, %resref4%) unaccounted for! Fixing..."
        WRITE_SHORT ("%meminfo_off%" + 0x04 + (0x10 * ("%meminfo_num%" - 1))) 6
        WRITE_SHORT ("%meminfo_off%" + 0x0c + (0x10 * ("%meminfo_num%" - 1))) 6
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Creature Stuff - Inventory Unborker (removes spurious references to the item table)~
  GROUP ~Creature Stuff~

COPY_EXISTING_REGEXP GLOB ~^.+\.cre$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x2d3) THEN BEGIN
    READ_LONG  0x2b8 "slot_off" ELSE 0
    READ_LONG  0x2bc "itm_off" ELSE 0
    READ_SHORT 0x2c0 "itm_num" ELSE 0

    PATCH_IF ("slot_off" > 0x2d3) THEN BEGIN
      FOR (index = 0 ; index < 37 ; index = index + 1) BEGIN
        READ_SHORT ("%slot_off%" + (0x02 * "%index%")) "ref" ELSE 0xffff
        PATCH_IF ("%ref%" != 0xffff) BEGIN
          PATCH_IF ((%ref% + 1) > %itm_num%) BEGIN
            PATCH_PRINT "%SOURCE_FILE% error: Inventory Item Slot #%index% refers to an item outside the Item Table! Setting to -1..."
            WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
          END
        END
      END
    END
    PATCH_IF (("slot_off" > 0x2d3) AND ("itm_off" > 0x2d3)) THEN BEGIN
      FOR (index = 0 ; index < itm_num ; index = index + 1) BEGIN
        SET "found" = 0
        SET "foundslot" = 0
        FOR (index1 = 0 ; index1 < 37 && found = 0 ; index1 = index1 + 1) BEGIN
          READ_SHORT ("%slot_off%" + (0x02 * "%index1%")) "ref" ELSE 0xffff
          PATCH_IF (%index% = %ref%) BEGIN
            SET "found" = 1
          END
        END
        PATCH_IF (%found% = 0) BEGIN
          FOR (index1 = 21 ; index1 < 37 && "foundslot" = 0 ; index1 = index1 + 1) BEGIN
            READ_SHORT ("%slot_off%" + (0x02 * "%index1%")) "ref" ELSE 0xffff
            PATCH_IF ("%ref%" = 0xffff) BEGIN
              SET "foundslot" = "index1"
            END
          END
          PATCH_IF ("%foundslot%" > 0) BEGIN
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item"
            PATCH_PRINT "%SOURCE_FILE% error: Inventory Item #%index% (%item%.ITM) is not actually in inventory! Adding to Inventory Slot #%foundslot%..."
            WRITE_SHORT ("%slot_off%" + (0x02 * "%foundslot%")) "index"
          END ELSE
          BEGIN
            FOR (index1 = 0 ; index1 < 22 && "foundslot" = 0 ; index1 = index1 + 1) BEGIN
              READ_SHORT ("%slot_off%" + (0x02 * "%index1%")) "ref" ELSE 0xffff
              PATCH_IF ("%ref%" = 0xffff) BEGIN
                SET "foundslot" = "index1"
              END
            END
            PATCH_PRINT "%SOURCE_FILE% error: Inventory Item #%index% (%item%.ITM) is not actually in inventory! No free inventory slot found! Adding to Slot #%foundslot%..."
            WRITE_SHORT ("%slot_off%" + (0x02 * "%foundslot%")) "index"
          END
        END
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Creature Stuff - Inventory Cleaner (removes items that don't exist and converts them into already present items where applicable)~
  GROUP ~Creature Stuff~

COPY_EXISTING_REGEXP GLOB ~^.+\.cre$~ ~override~
  PATCH_IF ((SOURCE_SIZE > 0x2d3)) THEN BEGIN
    READ_LONG  0x2bc "itm_off" ELSE 0
    READ_LONG  0x2c0 "itm_num" ELSE 0

    PATCH_IF ("itm_off" > 0x2d3) THEN BEGIN
      FOR (index = 0 ; index < itm_num ; index = index + 1) BEGIN
        READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item"
        PATCH_IF (NOT (FILE_EXISTS_IN_GAME ~%item%.itm~) AND ("%item%" STRING_COMPARE_REGEXP "^[Rr][Nn][Dd].+$")) BEGIN
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_AROW01") AND (FILE_EXISTS_IN_GAME ~AROW01.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "AROW01" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_AROW02") AND (FILE_EXISTS_IN_GAME ~AROW02.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "AROW02" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_AROW07") AND (FILE_EXISTS_IN_GAME ~AROW07.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "AROW07" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_BOW01") AND (FILE_EXISTS_IN_GAME ~BOW01.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "BOW01" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_BOW03") AND (FILE_EXISTS_IN_GAME ~BOW03.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "BOW03" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_BOW08") AND (FILE_EXISTS_IN_GAME ~BOW08.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "BOW08" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_BLUN02") AND (FILE_EXISTS_IN_GAME ~BLUN02.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "BLUN02" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_BULL02") AND (FILE_EXISTS_IN_GAME ~BULL02.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "BULL02" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_BRAC04") AND (FILE_EXISTS_IN_GAME ~BRAC04.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "BRAC04" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_CHAN04") AND (FILE_EXISTS_IN_GAME ~CHAN04.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "CHAN04" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_CHAN05") AND (FILE_EXISTS_IN_GAME ~CHAN05.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "CHAN05" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_CHAN07") AND (FILE_EXISTS_IN_GAME ~CHAN07.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "CHAN07" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_DAGG01") AND (FILE_EXISTS_IN_GAME ~DAGG01.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "DAGG01" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_DAGG03") AND (FILE_EXISTS_IN_GAME ~DAGG03.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "DAGG03" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_DAGG05") AND (FILE_EXISTS_IN_GAME ~DAGG05.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "DAGG05" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_DART01") AND (FILE_EXISTS_IN_GAME ~DART01.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "DART01" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_DART02") AND (FILE_EXISTS_IN_GAME ~DART02.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "DART02" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_HELM01") AND (FILE_EXISTS_IN_GAME ~HELM01.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "HELM01" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_HELM09") AND (FILE_EXISTS_IN_GAME ~HELM09.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "HELM09" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_HELM11") AND (FILE_EXISTS_IN_GAME ~HELM11.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "HELM11" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_JELLGR1") AND (FILE_EXISTS_IN_GAME ~JELLGR1.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "JELLGR1" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_LEAT01") AND (FILE_EXISTS_IN_GAME ~LEAT01.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "LEAT01" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_LEAT02") AND (FILE_EXISTS_IN_GAME ~LEAT02.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "LEAT02" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_LEAT04") AND (FILE_EXISTS_IN_GAME ~LEAT04.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "LEAT04" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_MAGE01") AND (FILE_EXISTS_IN_GAME ~MAGE02.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "MAGE02" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_MAGE02") AND (FILE_EXISTS_IN_GAME ~MAGE02.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "MAGE02" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_MAGE05") AND (FILE_EXISTS_IN_GAME ~MAGE05.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "MAGE05" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_AGEBRAC") AND (FILE_EXISTS_IN_GAME ~MAGEBRAC.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "MAGEBRAC" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_MISC33") AND (FILE_EXISTS_IN_GAME ~MISC33.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "MISC33" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_PLAT01") AND (FILE_EXISTS_IN_GAME ~PLAT01.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "PLAT01" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_PLAT04") AND (FILE_EXISTS_IN_GAME ~PLAT04.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "PLAT04" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_POTN08") AND (FILE_EXISTS_IN_GAME ~POTN08.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "POTN08" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_POTN20") AND (FILE_EXISTS_IN_GAME ~POTN20.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "POTN20" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_POTN21") AND (FILE_EXISTS_IN_GAME ~POTN21.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "POTN21" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_POTN36") AND (FILE_EXISTS_IN_GAME ~POTN36.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "POTN36" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_POTN37") AND (FILE_EXISTS_IN_GAME ~POTN37.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "POTN37" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_POTN45") AND (FILE_EXISTS_IN_GAME ~POTN45.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "POTN45" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_RING95") AND (FILE_EXISTS_IN_GAME ~RING95.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "RING95" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_SCRL96") AND (FILE_EXISTS_IN_GAME ~SCRL96.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "SCRL96" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_SHLD01") AND (FILE_EXISTS_IN_GAME ~SHLD01.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "SHLD01" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_SHLD08") AND (FILE_EXISTS_IN_GAME ~SHLD08.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "SHLD08" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_SLNG02") AND (FILE_EXISTS_IN_GAME ~SLNG02.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "SLNG02" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_SPER01") AND (FILE_EXISTS_IN_GAME ~SPER01.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "SPER01" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_SPER02") AND (FILE_EXISTS_IN_GAME ~SPER02.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "SPER02" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_STAF01") AND (FILE_EXISTS_IN_GAME ~STAF01.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "STAF01" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_STAF02") AND (FILE_EXISTS_IN_GAME ~STAF02.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "STAF02" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_STAF07") AND (FILE_EXISTS_IN_GAME ~STAF07.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "STAF07" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_SW1H01") AND (FILE_EXISTS_IN_GAME ~SW1H01.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "SW1H01" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_SW1H04") AND (FILE_EXISTS_IN_GAME ~SW1H04.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "SW1H04" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_SW1H07") AND (FILE_EXISTS_IN_GAME ~SW1H07.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "SW1H07" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_SW1H08") AND (FILE_EXISTS_IN_GAME ~SW1H08.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "SW1H08" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_SW1H24") AND (FILE_EXISTS_IN_GAME ~SW1H24.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "SW1H24" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_SW2H01") AND (FILE_EXISTS_IN_GAME ~SW2H01.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "SW2H01" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF ((~%item%~ STRING_EQUAL_CASE ~ANKSHELL~) AND (FILE_EXISTS_IN_GAME ~MISC1A.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "MISC1A" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF ((~%item%~ STRING_EQUAL_CASE ~HRZRSHED~) AND (FILE_EXISTS_IN_GAME ~SD_HRZR.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "SD_HRZR" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF ((~%item%~ STRING_EQUAL_CASE ~IOUNX6~) AND (FILE_EXISTS_IN_GAME ~IOUNX8.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "IOUNX8" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF ((~%item%~ STRING_EQUAL_CASE ~MIN1HP~) AND (FILE_EXISTS_IN_GAME ~MINHP1.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "MINHP1" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF ((~%item%~ STRING_EQUAL_CASE ~RNGDEMN~) AND (FILE_EXISTS_IN_GAME ~RINGDEMN.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "RINGDEMN" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF ((~%item%~ STRING_EQUAL_CASE ~SCRL1R~) AND (FILE_EXISTS_IN_GAME ~U!SCRL03.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "U!SCRL03" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          PATCH_IF ((~%item%~ STRING_EQUAL_CASE ~SLING04~) AND (FILE_EXISTS_IN_GAME ~SLNG04.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "SLNG04" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
          END ELSE
          BEGIN
            PATCH_PRINT "%SOURCE_FILE% error: Inventory Item #%index% (%item%.itm) does not exist! Removing item..."
            REMOVE_CRE_ITEM ~%item%~
            SET "index" = 0 - 1
            READ_LONG  0x2c0 "itm_num"
          END
        END
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Creature Stuff - Inventory Overhauler (moves invalid but equippable items to inventory and equips anything in the inventory to a free slot)~
  GROUP ~Creature Stuff~

//G3 Debugging Suite - Equip invalid items
COPY_EXISTING_REGEXP GLOB ~^.+\.cre$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x2d3) BEGIN
    READ_LONG  0x2b8 "slot_off" ELSE 0
    READ_LONG  0x2bc "itm_off" ELSE 0

    // tracking variables
    SET "2hweapon" = 0
    SET "offhand" = 0
    SET "bow" = 0
    SET "arrows" = 0
    SET "xbow" = 0
    SET "bolts" = 0
    SET "sling" = 0
    SET "bullets" = 0
    SET "helm" = 0
    SET "armor" = 0
    SET "gloves" = 0
    SET "lring" = 0
    SET "rring" = 0
    SET "boots" = 0
    SET "belt" = 0
    SET "amulet" = 0
    SET "weapon1" = 0
    SET "weapon2" = 0
    SET "weapon3" = 0
    SET "weapon4" = 0
    SET "quiver1" = 0
    SET "quiver2" = 0
    SET "quiver3" = 0
    SET "quiver4" = 0
    SET "cloak" = 0
    SET "2handedequip" = 0
    PATCH_IF (("slot_off" > 0x2d3) AND ("itm_off" > 0x2d3)) BEGIN
      FOR (index = 0 ; index < 36 ; index = index + 1) BEGIN
        READ_SHORT ("%slot_off%" + (0x02 * "%index%")) "ref"
        PATCH_IF ("%ref%" != 0xffff) BEGIN
          READ_ASCII ("%itm_off%" + (0x14 * "%ref%")) "item"
          SET "ignore" = 0
          PATCH_IF ((~%item%~ STRING_EQUAL_CASE ~MISC86~) OR                                                           //Bandit Scalp
                   ((~%item%~ STRING_EQUAL_CASE ~MISC54~) AND (~%SOURCE_RES%~ STRING_EQUAL_CASE ~JALANT~)) OR          //Child's Body
                   ((~%item%~ STRING_EQUAL_CASE ~RING07~) AND (~%SOURCE_RES%~ STRING_EQUAL_CASE ~RAMAZI~)) OR          //Ramazith's Prot Ring
                   ((~%item%~ STRING_EQUAL_CASE ~MISC2H~) AND (~%SOURCE_RES%~ STRING_EQUAL_CASE ~SHANDAL2~)) OR        //Shandalar's Wardstone
                   ((~%item%~ STRING_EQUAL_CASE ~MISC6Z~) AND (~%SOURCE_RES%~ STRING_EQUAL_CASE ~GEMCH02~)) OR         //Imnesvale Chicken's Beljuril
                   ((~%item%~ STRING_EQUAL_CASE ~MISCB7~) AND (~%SOURCE_RES%~ STRING_EQUAL_CASE ~HELLGEN~)) OR         //Genie's Tears of Bhaal
                   ((~%item%~ STRING_EQUAL_CASE ~RING39~) AND (~%SOURCE_RES%~ STRING_EQUAL_CASE ~HLKANG~)) OR          //Kangaxx's Gaxx Ring
                   ((~%item%~ STRING_EQUAL_CASE ~MISC8K~) AND (~%SOURCE_RES%~ STRING_EQUAL_CASE ~TRRAK01~)) OR         //Ihtafeer's Head
                   ((~%item%~ STRING_EQUAL_CASE ~MISCA7~) AND (~%SOURCE_RES%~ STRING_EQUAL_CASE ~UDPRINCE~)) OR        //Kuo-Tuan Prince's Blood
                   ((~%item%~ STRING_EQUAL_CASE ~MISC8H~) AND (~%SOURCE_RES%~ STRING_EQUAL_CASE ~UDSILVER~)) OR        //Adalon's Blood
                   ((~%item%~ STRING_EQUAL_CASE ~MISCCC~) AND (~%SOURCE_RES%~ STRING_EQUAL_CASE ~UDSILVER~))           //Adalon's Note
                   ) THEN BEGIN
            SET "ignore" = 1
          END
          PATCH_IF ((FILE_EXISTS_IN_GAME ~%item%.itm~)) THEN BEGIN
            INNER_PATCH_FILE ~%item%.itm~ BEGIN
              READ_SHORT 0x1c "type"
              READ_BYTE  0x18 "flags"
            END
            PATCH_IF ("%index%" = 0) BEGIN // helm slot
              SET "helm" = 1
              PATCH_IF (("%type%" != 7) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00010100) = 0b00000100)) BEGIN // helm
                PATCH_PRINT ~%SOURCE_FILE% error: Invalid HELM: %item%.itm! Moving to inventory~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                SET "ref2" = 1
                FOR (index3 = 21 ; ref2 != 0xffff ; index3 = index3 + 1) BEGIN
                  READ_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref2"
                END
                SET "index3" = "index3" - 1
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref"
                SET "helm" = 0
                SET "index" = 0 - 1
              END
            END
            PATCH_IF ("%index%" = 1) BEGIN // armor slot
              SET "armor" = 1
              PATCH_IF (("%type%" != 2) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00010100) = 0b00000100)) BEGIN // armor
                PATCH_PRINT ~%SOURCE_FILE% error: Invalid ARMOR: %item%.itm! Moving to inventory~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                SET "ref2" = 1
                FOR (index3 = 21 ; ref2 != 0xffff ; index3 = index3 + 1) BEGIN
                  READ_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref2"
                END
                SET "index3" = "index3" - 1
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref"
                SET "armor" = 0
                SET "index" = 0 - 1
              END
            END
            PATCH_IF ("%index%" = 2) BEGIN // shield slot
              SET "offhand" = 1
              PATCH_IF ((("%flags%" BAND 0b00010110) = 0b00000110) AND ("%ignore%" = 0)) BEGIN // 2h, uncursed and droppable check
                PATCH_PRINT ~%SOURCE_FILE% error: 2-HANDED OFFHAND: %item%.itm! Moving to inventory~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                SET "ref2" = 1
                FOR (index3 = 21 ; ref2 != 0xffff ; index3 = index3 + 1) BEGIN
                  READ_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref2"
                END
                SET "index3" = "index3" - 1
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref"
                SET "offhand" = 0
                SET "index" = 0 - 1
              END ELSE
              PATCH_IF (("%type%" != 12) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00010100) = 0b00000100)) BEGIN // if not shield, check for valid melee abilities
                SET "legit_offhand" = 0
                INNER_PATCH_FILE ~%item%.itm~ BEGIN
                  READ_LONG  0x64 "abil_off"
                  READ_SHORT 0x68 "abil_num"
                  FOR (index3 = 0 ; index3 < abil_num ; index3 = index3 + 1) BEGIN
                    READ_BYTE ("%abil_off%" + (0x38 * "%index3%")) "ability"
                    PATCH_IF ("%ability%" = 1) AND (%type% > 15) AND (%type% < 31) BEGIN // only melee weapons allowed in offhand
                      SET "legit_offhand" = 1
                    END
                  END
                END
                PATCH_IF ("%legit_offhand%" = 0) BEGIN
                  PATCH_PRINT ~%SOURCE_FILE% error: Invalid OFFHAND: %item%.itm! Moving to inventory~
                  WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                  SET "ref2" = 1
                  FOR (index3 = 21 ; ref2 != 0xffff ; index3 = index3 + 1) BEGIN
                    READ_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref2"
                   END
                  SET "index3" = "index3" - 1
                  WRITE_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref"
                  SET "offhand" = 0
                  SET "index" = 0 - 1
                END
              END ELSE
              PATCH_IF ("%type%" = 12) AND (("%flags%" BAND 0b00010100) = 0b00000100) BEGIN
                READ_SHORT ("%slot_off%" + (0x02 * 9))  "refa"
                READ_SHORT ("%slot_off%" + (0x02 * 10)) "refb"
                READ_SHORT ("%slot_off%" + (0x02 * 11)) "refc"
                READ_SHORT ("%slot_off%" + (0x02 * 12)) "refd"
                PATCH_IF ("%refa%" != 0xffff) BEGIN
                  READ_ASCII ("%itm_off%" + (0x14 * "%refa%")) "item1"
                  PATCH_IF ((FILE_EXISTS_IN_GAME ~%item1%.itm~)) THEN BEGIN
                    INNER_PATCH_FILE ~%item1%.itm~ BEGIN
                      READ_SHORT 0x1c "type1"
                      READ_BYTE  0x18 "flags1"
                      PATCH_IF (("%flags1%" BAND 0b00000010) = 0b00000010) AND ((%type1% > 14) AND (%type1% < 31)) THEN BEGIN
                        SET "2handedequip" = 1
                      END
                    END
                  END
                END
                PATCH_IF ("%refb%" != 0xffff) BEGIN
                  READ_ASCII ("%itm_off%" + (0x14 * "%refb%")) "item2"
                  PATCH_IF ((FILE_EXISTS_IN_GAME ~%item2%.itm~)) THEN BEGIN
                    INNER_PATCH_FILE ~%item2%.itm~ BEGIN
                      READ_SHORT 0x1c "type2"
                      READ_BYTE  0x18 "flags2"
                      PATCH_IF (("%flags2%" BAND 0b00000010) = 0b00000010) AND ((%type2% > 14) AND (%type2% < 31)) THEN BEGIN
                        SET "2handedequip" = 1
                      END
                    END
                  END
                END
                PATCH_IF ("%refc%" != 0xffff) BEGIN
                  READ_ASCII ("%itm_off%" + (0x14 * "%refc%")) "item3"
                  PATCH_IF ((FILE_EXISTS_IN_GAME ~%item3%.itm~)) THEN BEGIN
                    INNER_PATCH_FILE ~%item3%.itm~ BEGIN
                      READ_SHORT 0x1c "type3"
                      READ_BYTE  0x18 "flags3"
                      PATCH_IF (("%flags3%" BAND 0b00000010) = 0b00000010) AND ((%type3% > 14) AND (%type3% < 31)) THEN BEGIN
                        SET "2handedequip" = 1
                      END
                    END
                  END
                END
                PATCH_IF ("%refd%" != 0xffff) BEGIN
                  READ_ASCII ("%itm_off%" + (0x14 * "%refd%")) "item4"
                  PATCH_IF ((FILE_EXISTS_IN_GAME ~%item4%.itm~)) THEN BEGIN
                    INNER_PATCH_FILE ~%item4%.itm~ BEGIN
                      READ_SHORT 0x1c "type4"
                      READ_BYTE  0x18 "flags4"
                      PATCH_IF (("%flags4%" BAND 0b00000010) = 0b00000010) AND ((%type4% > 14) AND (%type4% < 31)) THEN BEGIN
                        SET "2handedequip" = 1
                      END
                    END
                  END
                END
                PATCH_IF ("%2handedequip%" = 1) BEGIN
                  PATCH_PRINT ~%SOURCE_FILE% error: OFFHAND with 2-HAND: %item%.itm! Moving to inventory~
                  WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                  SET "ref2" = 1
                  FOR (index3 = 21 ; ref2 != 0xffff ; index3 = index3 + 1) BEGIN
                    READ_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref2"
                   END
                  SET "index3" = "index3" - 1
                  WRITE_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref"
                  SET "offhand" = 0
                  SET "index" = 0 - 1
                END
              END
            END
            PATCH_IF ("%index%" = 3) BEGIN // glove slot
              SET "gloves" = 1
              PATCH_IF (("%type%" != 6) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00010100) = 0b00000100)) BEGIN // gloves
                PATCH_PRINT ~%SOURCE_FILE% error: Invalid GLOVES: %item%.itm! Moving to inventory~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                SET "ref2" = 1
                FOR (index3 = 21 ; ref2 != 0xffff ; index3 = index3 + 1) BEGIN
                  READ_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref2"
                END
                SET "index3" = "index3" - 1
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref"
                SET "gloves" = 0
                SET "index" = 0 - 1
              END
            END
            PATCH_IF ("%index%" = 4) BEGIN // left ring slot
              SET "lring" = 1
              PATCH_IF (("%type%" != 10) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00010100) = 0b00000100)) BEGIN // rings
                PATCH_PRINT ~%SOURCE_FILE% error: Invalid LRING: %item%.itm! Moving to inventory~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                SET "ref2" = 1
                FOR (index3 = 21 ; ref2 != 0xffff ; index3 = index3 + 1) BEGIN
                  READ_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref2"
                END
                SET "index3" = "index3" - 1
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref"
                SET "lring" = 0
                SET "index" = 0 - 1
              END
            END
            PATCH_IF ("%index%" = 5) BEGIN // right ring slot
              SET "rring" = 1
              PATCH_IF (("%type%" != 10) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00010100) = 0b00000100)) BEGIN // rings
                PATCH_PRINT ~%SOURCE_FILE% error: Invalid RRING: %item%.itm! Moving to inventory~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                SET "ref2" = 1
                FOR (index3 = 21 ; ref2 != 0xffff ; index3 = index3 + 1) BEGIN
                  READ_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref2"
                END
                SET "index3" = "index3" - 1
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref"
                SET "rring" = 0
                SET "index" = 0 - 1
              END
            END
            PATCH_IF ("%index%" = 6) BEGIN // amulet slot
              SET "amulet" = 1
              PATCH_IF (("%type%" != 1) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00010100) = 0b00000100)) BEGIN // amulet
                PATCH_PRINT ~%SOURCE_FILE% error: Invalid AMULET: %item%.itm! Moving to inventory~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                SET "ref2" = 1
                FOR (index3 = 21 ; ref2 != 0xffff ; index3 = index3 + 1) BEGIN
                  READ_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref2"
                END
                SET "index3" = "index3" - 1
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref"
                SET "amulet" = 0
                SET "index" = 0 - 1
              END
            END
            PATCH_IF ("%index%" = 7) BEGIN // belt slot
              SET "belt" = 1
              PATCH_IF (("%type%" != 3) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00010100) = 0b00000100)) BEGIN // belt
                PATCH_PRINT ~%SOURCE_FILE% error: Invalid BELT: %item%.itm! Moving to inventory~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                SET "ref2" = 1
                FOR (index3 = 21 ; ref2 != 0xffff ; index3 = index3 + 1) BEGIN
                  READ_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref2"
                END
                SET "index3" = "index3" - 1
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref"
                SET "belt" = 0
                SET "index" = 0 - 1
              END
            END
            PATCH_IF ("%index%" = 8) BEGIN // boot slot
              SET "boots" = 1
              PATCH_IF (("%type%" != 4) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00010100) = 0b00000100)) BEGIN // boot
                PATCH_PRINT ~%SOURCE_FILE% error: Invalid BOOTS: %item%.itm! Moving to inventory~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                SET "ref2" = 1
                FOR (index3 = 21 ; ref2 != 0xffff ; index3 = index3 + 1) BEGIN
                  READ_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref2"
                END
                SET "index3" = "index3" - 1
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref"
                SET "boots" = 0
                SET "index" = 0 - 1
              END
            END
            PATCH_IF ("%index%" = 9) BEGIN // first weapon slot
              SET "weapon1" = 1
              SET "legit_weapon" = 0
              INNER_PATCH_FILE ~%item%.itm~ BEGIN
                READ_BYTE  0x18 "flags"
                READ_LONG  0x64 "abil_off"
                READ_SHORT 0x68 "abil_num"
                FOR (index3 = 0 ; index3 < abil_num ; index3 = index3 + 1) BEGIN
                  READ_BYTE ("%abil_off%" + (0x38 * "%index3%")) "ability"
                  PATCH_IF (("%ability%" = 1) OR ("%ability%" = 2) OR ("%ability%" = 4)) AND ("%type%" > 14) AND ("%type%" < 31) BEGIN // melee, ranged, or launcher
                    SET "legit_weapon" = 1
                  END
                END
                PATCH_IF (("%legit_weapon%" = 1) AND (("%flags%" BAND 0b00000010) = 0b00000010)) BEGIN // 2h check
                    SET "2handedequip" = 1
                END
              END
              PATCH_IF (("%legit_weapon%" = 0) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00010100) = 0b00000100)) BEGIN
                PATCH_PRINT ~%SOURCE_FILE% error: Invalid WEAPON1: %item%.itm! Moving to inventory~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                SET "ref2" = 1
                FOR (index3 = 21 ; ref2 != 0xffff ; index3 = index3 + 1) BEGIN
                  READ_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref2"
                END
                SET "index3" = "index3" - 1
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref"
                SET "weapon1" = 0
                SET "index" = 0 - 1
              END
            END
            PATCH_IF ("%index%" = 10) BEGIN // second weapon slot
              SET "weapon2" = 1
              SET "legit_weapon" = 0
              INNER_PATCH_FILE ~%item%.itm~ BEGIN
                READ_BYTE  0x18 "flags"
                READ_LONG  0x64 "abil_off"
                READ_SHORT 0x68 "abil_num"
                FOR (index3 = 0 ; index3 < abil_num ; index3 = index3 + 1) BEGIN
                  READ_BYTE ("%abil_off%" + (0x38 * "%index3%")) "ability"
                  PATCH_IF (("%ability%" = 1) OR ("%ability%" = 2) OR ("%ability%" = 4)) AND ("%type%" > 14) AND ("%type%" < 31) BEGIN // melee, ranged, or launcher
                    SET "legit_weapon" = 1
                  END
                END
                PATCH_IF (("%legit_weapon%" = 1) AND (("%flags%" BAND 0b00000010) = 0b00000010)) BEGIN // 2h check
                    SET "2handedequip" = 1
                END
              END
              PATCH_IF (("%legit_weapon%" = 0) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00010100) = 0b00000100)) BEGIN
                PATCH_PRINT ~%SOURCE_FILE% error: Invalid WEAPON2: %item%.itm! Moving to inventory~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                SET "ref2" = 1
                FOR (index3 = 21 ; ref2 != 0xffff ; index3 = index3 + 1) BEGIN
                  READ_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref2"
                END
                SET "index3" = "index3" - 1
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref"
                SET "weapon2" = 0
                SET "index" = 0 - 1
              END
            END
            PATCH_IF ("%index%" = 11) BEGIN // third weapon slot
              SET "weapon3" = 1
              SET "legit_weapon" = 0
              INNER_PATCH_FILE ~%item%.itm~ BEGIN
                READ_BYTE  0x18 "flags"
                READ_LONG  0x64 "abil_off"
                READ_SHORT 0x68 "abil_num"
                FOR (index3 = 0 ; index3 < abil_num ; index3 = index3 + 1) BEGIN
                  READ_BYTE ("%abil_off%" + (0x38 * "%index3%")) "ability"
                  PATCH_IF (("%ability%" = 1) OR ("%ability%" = 2) OR ("%ability%" = 4)) AND ("%type%" > 14) AND ("%type%" < 31) BEGIN // melee, ranged, or launcher
                    SET "legit_weapon" = 1
                  END
                END
                PATCH_IF (("%legit_weapon%" = 1) AND (("%flags%" BAND 0b00000010) = 0b00000010)) BEGIN // 2h check
                    SET "2handedequip" = 1
                END
              END
              PATCH_IF (("%legit_weapon%" = 0) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00010100) = 0b00000100)) BEGIN
                PATCH_PRINT ~%SOURCE_FILE% error: Invalid WEAPON3: %item%.itm! Moving to inventory~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                SET "ref2" = 1
                FOR (index3 = 21 ; ref2 != 0xffff ; index3 = index3 + 1) BEGIN
                  READ_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref2"
                END
                SET "index3" = "index3" - 1
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref"
                SET "weapon3" = 0
                SET "index" = 0 - 1
              END
            END
            PATCH_IF ("%index%" = 12) BEGIN // fourth weapon slot
              SET "weapon4" = 1
              SET "legit_weapon" = 0
              INNER_PATCH_FILE ~%item%.itm~ BEGIN
                READ_BYTE  0x18 "flags"
                READ_LONG  0x64 "abil_off"
                READ_SHORT 0x68 "abil_num"
                FOR (index3 = 0 ; index3 < abil_num ; index3 = index3 + 1) BEGIN
                  READ_BYTE ("%abil_off%" + (0x38 * "%index3%")) "ability"
                  PATCH_IF (("%ability%" = 1) OR ("%ability%" = 2) OR ("%ability%" = 4)) AND ("%type%" > 14) AND ("%type%" < 31) BEGIN // melee, ranged, or launcher
                    SET "legit_weapon" = 1
                  END
                END
                PATCH_IF (("%legit_weapon%" = 1) AND (("%flags%" BAND 0b00000010) = 0b00000010)) BEGIN // 2h check
                    SET "2handedequip" = 1
                END
              END
              PATCH_IF (("%legit_weapon%" = 0) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00010100) = 0b00000100)) BEGIN
                PATCH_PRINT ~%SOURCE_FILE% error: Invalid WEAPON4: %item%.itm! Moving to inventory~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                SET "ref2" = 1
                FOR (index3 = 21 ; ref2 != 0xffff ; index3 = index3 + 1) BEGIN
                  READ_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref2"
                END
                SET "index3" = "index3" - 1
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref"
                SET "weapon4" = 0
                SET "index" = 0 - 1
              END
            END
            PATCH_IF ("%index%" = 13) BEGIN // first quiver slot
              SET "quiver1" = 1
              PATCH_IF (NOT (("%type%" = 5) OR ("%type%" = 31) OR ("%type%" = 14)) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00010100) = 0b00000100)) BEGIN
                PATCH_PRINT ~%SOURCE_FILE% error: Invalid QUIVER1: %item%.itm! Moving to inventory~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                SET "ref2" = 1
                FOR (index3 = 21 ; ref2 != 0xffff ; index3 = index3 + 1) BEGIN
                  READ_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref2"
                END
                SET "index3" = "index3" - 1
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref"
                SET "quiver1" = 0
                SET "index" = 0 - 1
              END
            END
            PATCH_IF ("%index%" = 14) BEGIN // second quiver slot
              SET "quiver2" = 1
              PATCH_IF (NOT (("%type%" = 5) OR ("%type%" = 31) OR ("%type%" = 14)) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00010100) = 0b00000100)) BEGIN
                PATCH_PRINT ~%SOURCE_FILE% error: Invalid QUIVER2: %item%.itm! Moving to inventory~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                SET "ref2" = 1
                FOR (index3 = 21 ; ref2 != 0xffff ; index3 = index3 + 1) BEGIN
                  READ_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref2"
                END
                SET "index3" = "index3" - 1
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref"
                SET "quiver2" = 0
                SET "index" = 0 - 1
              END
            END
            PATCH_IF ("%index%" = 15) BEGIN // third quiver slot
              SET "quiver3" = 1
              PATCH_IF (NOT (("%type%" = 5) OR ("%type%" = 31) OR ("%type%" = 14)) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00010100) = 0b00000100)) BEGIN
                PATCH_PRINT ~%SOURCE_FILE% error: Invalid QUIVER3: %item%.itm! Moving to inventory~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                SET "ref2" = 1
                FOR (index3 = 21 ; ref2 != 0xffff ; index3 = index3 + 1) BEGIN
                  READ_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref2"
                END
                SET "index3" = "index3" - 1
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref"
                SET "quiver3" = 0
                SET "index" = 0 - 1
              END
            END
            PATCH_IF ("%index%" = 16) BEGIN // fourth quiver slot
              SET "quiver4" = 1
              PATCH_IF (NOT (("%type%" = 5) OR ("%type%" = 31) OR ("%type%" = 14)) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00010100) = 0b00000100)) BEGIN
                PATCH_PRINT ~%SOURCE_FILE% error: Invalid QUIVER4: %item%.itm! Moving to inventory~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                SET "ref2" = 1
                FOR (index3 = 21 ; ref2 != 0xffff ; index3 = index3 + 1) BEGIN
                  READ_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref2"
                END
                SET "index3" = "index3" - 1
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref"
                SET "quiver4" = 0
                SET "index" = 0 - 1
              END
            END
            PATCH_IF ("%index%" = 17) BEGIN // cloak
              SET "cloak" = 1
              PATCH_IF (("%type%" != 32) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00010100) = 0b00000100)) BEGIN // cloak
                PATCH_PRINT ~%SOURCE_FILE% error: Invalid CLOAK: %item%.itm! Moving to inventory~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                SET "ref2" = 1
                FOR (index3 = 21 ; ref2 != 0xffff ; index3 = index3 + 1) BEGIN
                  READ_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref2"
                END
                SET "index3" = "index3" - 1
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref"
                SET "cloak" = 0
                SET "index" = 0 - 1
              END
            END
            PATCH_IF ((("%type%" =  2) AND ("%armor%" = 0)) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00010100) = 0b00000100)) AND ("%index%" > 17) BEGIN
              PATCH_PRINT ~%SOURCE_FILE% error: Equippable items in inventory: %item%.itm! Equipping ARMOR~
              WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
              WRITE_SHORT ("%slot_off%" + (0x02))             "ref"
              SET "armor" = 1
            END ELSE
            PATCH_IF (((("%type%" =  5) OR
                        ("%type%" = 14) OR
                        ("%type%" = 31)) AND ("%quiver1%" = 0) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00010100) = 0b00000100)) AND ("%index%" > 17)) BEGIN
              PATCH_PRINT ~%SOURCE_FILE% error: Equippable items in inventory: %item%.itm! Equipping QUIVER1~
              WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
              WRITE_SHORT ("%slot_off%" + (0x02 * 13))        "ref"
              SET "quiver1" = 1
            END ELSE
            PATCH_IF (((("%type%" =  5) OR
                        ("%type%" = 14) OR
                        ("%type%" = 31)) AND ("%quiver2%" = 0) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00010100) = 0b00000100)) AND ("%index%" > 17)) BEGIN
              PATCH_PRINT ~%SOURCE_FILE% error: Equippable items in inventory: %item%.itm! Equipping QUIVER2~
              WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
              WRITE_SHORT ("%slot_off%" + (0x02 * 14))        "ref"
              SET "quiver2" = 1
            END ELSE
            PATCH_IF (((("%type%" =  5) OR
                        ("%type%" = 14) OR
                        ("%type%" = 31)) AND ("%quiver3%" = 0) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00010100) = 0b00000100)) AND ("%index%" > 17)) BEGIN
              PATCH_PRINT ~%SOURCE_FILE% error: Equippable items in inventory: %item%.itm! Equipping QUIVER3~
              WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
              WRITE_SHORT ("%slot_off%" + (0x02 * 15))        "ref"
              SET "quiver3" = 1
            END ELSE
            PATCH_IF (((("%type%" =  5) OR
                        ("%type%" = 14) OR
                        ("%type%" = 31)) AND ("%quiver4%" = 0)) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00010100) = 0b00000100) AND ("%index%" > 17)) BEGIN
              PATCH_PRINT ~%SOURCE_FILE% error: Equippable items in inventory: %item%.itm! Equipping QUIVER4~
              WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
              WRITE_SHORT ("%slot_off%" + (0x02 * 16))        "ref"
              SET "quiver4" = 1
            END ELSE
            PATCH_IF ((("%type%" =  7) AND ("%helm%" = 0)) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00010100) = 0b00000100)) AND ("%index%" > 17) BEGIN
              PATCH_PRINT ~%SOURCE_FILE% error: Equippable items in inventory: %item%.itm! Equipping HELM~
              WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
              WRITE_SHORT ("%slot_off%")                      "ref"
              SET "helm" = 1
            END ELSE
            PATCH_IF (((("%type%" = 15) OR // bow
                        ("%type%" = 16) OR // dagger
                        ("%type%" = 17) OR // maces
                        ("%type%" = 18) OR // sling
                        ("%type%" = 19) OR // short sword
                        ("%type%" = 20) OR // swords
                        ("%type%" = 21) OR // hammer
                        ("%type%" = 22) OR // morning stars
                        ("%type%" = 23) OR // flail
                        ("%type%" = 24) OR // darts
                        ("%type%" = 25) OR // axe
                        ("%type%" = 26) OR // staff
                        ("%type%" = 27) OR // xbow
                        ("%type%" = 28) OR // hand to hand
                        ("%type%" = 29) OR // Spear
                        ("%type%" = 30) OR // halberd
                        ("%type%" = 44)) AND ("%weapon1%" = 0) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00010100) = 0b00000100) AND ("%index%" > 17)))  BEGIN
              PATCH_IF ((("%flags%" BAND 0b00000010) != 0b00000010) AND ("%offhand%" = 0)) BEGIN
                PATCH_PRINT ~%SOURCE_FILE% error: Equippable items in inventory: %item%.itm! Equipping WEAPON1~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                WRITE_SHORT ("%slot_off%" + (0x02 * 9))         "ref"
                SET "weapon1" = 1
              END
            END ELSE
            PATCH_IF (((("%type%" = 15) OR // bow
                        ("%type%" = 16) OR // dagger
                        ("%type%" = 17) OR // maces
                        ("%type%" = 18) OR // sling
                        ("%type%" = 19) OR // short sword
                        ("%type%" = 20) OR // swords
                        ("%type%" = 21) OR // hammer
                        ("%type%" = 22) OR // morning stars
                        ("%type%" = 23) OR // flail
                        ("%type%" = 24) OR // darts
                        ("%type%" = 25) OR // axe
                        ("%type%" = 26) OR // staff
                        ("%type%" = 27) OR // xbow
                        ("%type%" = 28) OR // hand to hand
                        ("%type%" = 29) OR // Spear
                        ("%type%" = 30) OR // halberd
                        ("%type%" = 44)) AND ("%weapon2%" = 0) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00010100) = 0b00000100) AND ("%index%" > 17)))  BEGIN
              PATCH_IF ((("%flags%" BAND 0b00000010) != 0b00000010) AND ("%offhand%" = 0)) BEGIN
                PATCH_PRINT ~%SOURCE_FILE% error: Equippable items in inventory: %item%.itm! Equipping WEAPON2~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                WRITE_SHORT ("%slot_off%" + (0x02 * 10))        "ref"
                SET "weapon2" = 1
              END
            END ELSE
            PATCH_IF (((("%type%" = 15) OR // bow
                        ("%type%" = 16) OR // dagger
                        ("%type%" = 17) OR // maces
                        ("%type%" = 18) OR // sling
                        ("%type%" = 19) OR // short sword
                        ("%type%" = 20) OR // swords
                        ("%type%" = 21) OR // hammer
                        ("%type%" = 22) OR // morning stars
                        ("%type%" = 23) OR // flail
                        ("%type%" = 24) OR // darts
                        ("%type%" = 25) OR // axe
                        ("%type%" = 26) OR // staff
                        ("%type%" = 27) OR // xbow
                        ("%type%" = 28) OR // hand to hand
                        ("%type%" = 29) OR // Spear
                        ("%type%" = 30) OR // halberd
                        ("%type%" = 44)) AND ("%weapon3%" = 0) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00010100) = 0b00000100) AND ("%index%" > 17)))  BEGIN
              PATCH_IF ((("%flags%" BAND 0b00000010) != 0b00000010) AND ("%offhand%" = 0)) BEGIN
                PATCH_PRINT ~%SOURCE_FILE% error: Equippable items in inventory: %item%.itm! Equipping WEAPON3~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                WRITE_SHORT ("%slot_off%" + (0x02 * 11))        "ref"
                SET "weapon3" = 1
              END
            END ELSE
            PATCH_IF (((("%type%" = 15) OR // bow
                        ("%type%" = 16) OR // dagger
                        ("%type%" = 17) OR // maces
                        ("%type%" = 18) OR // sling
                        ("%type%" = 19) OR // short sword
                        ("%type%" = 20) OR // swords
                        ("%type%" = 21) OR // hammer
                        ("%type%" = 22) OR // morning stars
                        ("%type%" = 23) OR // flail
                        ("%type%" = 24) OR // darts
                        ("%type%" = 25) OR // axe
                        ("%type%" = 26) OR // staff
                        ("%type%" = 27) OR // xbow
                        ("%type%" = 28) OR // hand to hand
                        ("%type%" = 29) OR // Spear
                        ("%type%" = 30) OR // halberd
                        ("%type%" = 44)) AND ("%weapon4%" = 0) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00010100) = 0b00000100) AND ("%index%" > 17)))  BEGIN
              PATCH_IF ((("%flags%" BAND 0b00000010) != 0b00000010) AND ("%offhand%" = 0)) BEGIN
                PATCH_PRINT ~%SOURCE_FILE% error: Equippable items in inventory: %item%.itm! Equipping WEAPON4~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                WRITE_SHORT ("%slot_off%" + (0x02 * 12))        "ref"
                SET "weapon4" = 1
              END
            END ELSE
            PATCH_IF ((("%type%" = 12) AND ("%offhand%" = 0) AND ("2handedequip" = 0)) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00010100) = 0b00000100)) AND ("%index%" > 17) BEGIN
              PATCH_PRINT ~%SOURCE_FILE% error: Equippable items in inventory: %item%.itm! Equipping SHIELD~
              WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
              WRITE_SHORT ("%slot_off%" + (0x02 * 2))         "ref"
              SET "offhand" = 1
            END
          END
        END
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Creature Stuff - MAJESTIC Creature Fixer~
  GROUP ~Creature Stuff~

COPY_EXISTING_REGEXP GLOB ~^.+\.cre$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x2d3) THEN BEGIN

    // Missing Script Remover
    FOR (index = 0 ; index < 5 ; index = index + 1) BEGIN
      READ_ASCII (0x248 + (0x08 * "%index%")) "script"
      PATCH_IF NOT (("%script%" STRING_EQUAL_CASE "NONE") OR ("%script%" STRING_EQUAL_CASE "")) BEGIN
        SET exists = 0
        INNER_PATCH_FILE ~%script%.bcs~ BEGIN
          SET exists = 1
        END
        PATCH_IF ("%exists%" = 0) BEGIN
          PATCH_IF ("%script%" STRING_EQUAL_CASE "_DPLAYER") BEGIN
            PATCH_PRINT "%SOURCE_FILE% error: Non-existent script (%script%.BCS) changed into DPLAYER.BCS..."
            WRITE_ASCII (0x248 + (0x08 * "%index%")) ~DPLAYER~ #8
          END ELSE
          PATCH_IF ("%script%" STRING_EQUAL_CASE "BPMAG12D") BEGIN
            PATCH_PRINT "%SOURCE_FILE% error: Non-existent script (%script%.BCS) changed into MAGE12D.BCS..."
            WRITE_ASCII (0x248 + (0x08 * "%index%")) ~MAGE12D~ #8
          END ELSE
          PATCH_IF ("%script%" STRING_EQUAL_CASE "BPMAG14D") BEGIN
            PATCH_PRINT "%SOURCE_FILE% error: Non-existent script (%script%.BCS) changed into MAGE14D.BCS..."
            WRITE_ASCII (0x248 + (0x08 * "%index%")) ~MAGE14D~ #8
          END ELSE
          PATCH_IF ("%script%" STRING_EQUAL_CASE "BPWDASGT") BEGIN
            PATCH_PRINT "%SOURCE_FILE% error: Non-existent script (%script%.BCS) changed into WDASIGHT.BCS..."
            WRITE_ASCII (0x248 + (0x08 * "%index%")) ~WDASIGHT~ #8
          END ELSE
          PATCH_IF ("%script%" STRING_EQUAL_CASE "BPWTSIGT") OR
                   ("%script%" STRING_EQUAL_CASE "WTSIGHT") OR
                   ("%script%" STRING_EQUAL_CASE "WSASIGHT") BEGIN
            PATCH_PRINT "%SOURCE_FILE% error: Non-existent script (%script%.BCS) changed into WTASIGHT.BCS..."
            WRITE_ASCII (0x248 + (0x08 * "%index%")) ~WTASIGHT~ #8
          END ELSE
          BEGIN
            PATCH_PRINT "%SOURCE_FILE% error: Non-existent script (%script%.BCS) nulled..."
            WRITE_ASCII (0x248 + (0x08 * "%index%")) ~~ #8
          END
        END
      END
    END

    // Missing Dialogue Remover
    READ_ASCII 0x2cc "dialog"

    PATCH_IF NOT (("%dialog%" STRING_EQUAL_CASE "NONE") OR ("%dialog%" STRING_EQUAL_CASE "")) BEGIN
      SET exists = 0
      SET dlgexists = 0
      INNER_PATCH_FILE ~%dialog%.dlg~ BEGIN
        SET exists = 1
      END
      INNER_PATCH_FILE ~%SOURCE_RES%.dlg~ BEGIN
        SET dlgexists = 1
      END
      PATCH_IF ("%exists%" = 0) AND ("%dlgexists%" = 1) BEGIN
        PATCH_PRINT "%SOURCE_FILE% error: Non-existent dialogue (%dialog%.DLG) changed into %SOURCE_RES%.DLG..."
        WRITE_ASCIIE 0x2cc ~%SOURCE_RES%~ #8
      END ELSE
      PATCH_IF ("%exists%" = 0) BEGIN
        PATCH_PRINT "%SOURCE_FILE% error: Non-existent dialogue (%dialog%.DLG) nulled..."
        WRITE_ASCII 0x2cc ~~ #8
      END
    END

    READ_LONG  0x2a0 "known_off" ELSE 0
    READ_LONG  0x2a4 "known_num" ELSE 0

    PATCH_IF (known_off > 0x2d3) THEN BEGIN
      FOR (index = 0 ; index < known_num ; index = index + 1) BEGIN
        READ_ASCII ("%known_off%" +        ("%index%" * 0x0c)) "resref"
        SET exists = 0
        INNER_PATCH_FILE ~%resref%.spl~ BEGIN
          READ_SHORT 0x1c "spl_type"
          READ_LONG  0x34 "spl_level"
          SET exists = 1
        END
        PATCH_IF ("%exists%" = 1) BEGIN

          // Spell Level Fixer
          READ_SHORT ("%known_off%" + 0x08 + ("%index%" * 0x0c)) "olevel"
          READ_SHORT ("%known_off%" + 0x0a + ("%index%" * 0x0c)) "type"
          SET level = %olevel% + 1
          PATCH_IF (("%level%" != "%spl_level%") AND ("%spl_level%" > 0) AND (("%spl_type%" = 1) OR ("%spl_type%" = 2))) BEGIN
            SET nlevel = %spl_level% - 1
            PATCH_PRINT "%SOURCE_FILE% error: Known spell (%resref%.SPL) has wrong level (%olevel%)! Should be %nlevel%..."
            WRITE_SHORT ("%known_off%" + 0x08 + ("%index%" * 0x0c)) %nlevel%
          END
          PATCH_IF ("%olevel%" > 0) AND ("%spl_type%" = 4) BEGIN
            PATCH_PRINT "%SOURCE_FILE% error: Known spell (%resref%.SPL) is INNATE with non-zero level (%olevel%)! Setting to 0 to avoid crash..."
            WRITE_SHORT ("%known_off%" + 0x08 + ("%index%" * 0x0c)) 0
          END

          // Spell Slot Fixer
          PATCH_IF (("%spl_type%" = 2) AND ("%type%" != 0)) BEGIN // priest
            PATCH_PRINT "%SOURCE_FILE% error: Known spell (%resref%.SPL) is a PRIEST spell (was %type%)..."
            WRITE_SHORT ("%known_off%" + 0x0a + ("%index%" * 0x0c)) 0
          END
          PATCH_IF (("%spl_type%" = 1) AND ("%type%" != 1)) BEGIN // mage
            PATCH_PRINT "%SOURCE_FILE% error: Known spell (%resref%.SPL) is a MAGE spell (was %type%)..."
            WRITE_SHORT ("%known_off%" + 0x0a + ("%index%" * 0x0c)) 1
          END
          PATCH_IF (("%spl_type%" = 4) AND ("%type%" != 2)) BEGIN // innate
            PATCH_PRINT "%SOURCE_FILE% error: Known spell (%resref%.SPL) is an INNATE spell (was %type%)..."
            WRITE_SHORT ("%known_off%" + 0x0a + ("%index%" * 0x0c)) 2
          END

          // Invalid Spell Level Fixer
          READ_SHORT ("%known_off%" + 0x08 + ("%index%" * 0x0c)) "olevel"
          PATCH_IF (("%olevel%" > 8) AND ("%spl_type%" = 1)) OR (("%olevel%" > 6) AND ("%spl_type%" = 2)) BEGIN
            PATCH_PRINT "%SOURCE_FILE% error: Spell level out of bounds (%resref%.SPL - level %olevel%)! Removing to avoid crash..."
            REMOVE_KNOWN_SPELL ~%resref%~
            SET "index" = 0 - 1
            READ_LONG  0x2a4 "known_num"
          END
        END ELSE

        // Missing Known Spell Remover
        BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Known spell does not exist (%resref%.SPL)! Removing..."
          REMOVE_KNOWN_SPELL ~%resref%~
          SET "index" = 0 - 1
          READ_LONG  0x2a4 "known_num"
        END
      END
      END

    // Missing Memorized Spell Remover
    READ_LONG  0x2b0 "mem_off" ELSE 0
    READ_LONG  0x2b4 "mem_num" ELSE 0

    PATCH_IF (mem_off > 0x2d3) THEN BEGIN
      FOR (index = 0 ; index < mem_num ; index = index + 1) BEGIN
        READ_ASCII ("%mem_off%" +        ("%index%" * 0x0c)) "resref"
        SET exists = 0
        INNER_PATCH_FILE ~%resref%.spl~ BEGIN
          SET exists = 1
        END
        PATCH_IF ("%exists%" = 0) BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Memorized spell does not exist (%resref%.SPL)! Removing..."
          REMOVE_MEMORIZED_SPELL ~%resref%~
          SET "index" = 0 - 1
          READ_LONG  0x2b4 "mem_num"
        END
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Creature Stuff - Duplicate Creature Effect Remover~
  GROUP ~Creature Stuff~

COPY_EXISTING_REGEXP GLOB ~^.+\.cre$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x2d3) THEN BEGIN
    READ_BYTE  0x33  "eff_ver"
    READ_LONG  0x2a0 "spl_off" ELSE 0
    READ_LONG  0x2a8 "meminfo_off" ELSE 0
    READ_LONG  0x2b0 "mem_off" ELSE 0
    READ_LONG  0x2b8 "slot_off" ELSE 0
    READ_LONG  0x2bc "itm_off" ELSE 0
    READ_LONG  0x2c4 "eff_off" ELSE 0
    READ_LONG  0x2c8 "eff_num" ELSE 0

    PATCH_IF (eff_off > 0x2d3) THEN BEGIN
      PATCH_IF ("%eff_ver%" = 0) BEGIN
        FOR (index = 0 ; index < eff_num ; index = index + 1) BEGIN
          READ_SHORT ("%eff_off%" +        ("%index%" * 0x30)) "opcode"
          READ_BYTE  ("%eff_off%" + 0x02 + ("%index%" * 0x30)) "target"
          READ_BYTE  ("%eff_off%" + 0x03 + ("%index%" * 0x30)) "power"
          READ_LONG  ("%eff_off%" + 0x04 + ("%index%" * 0x30)) "param1"
          READ_LONG  ("%eff_off%" + 0x08 + ("%index%" * 0x30)) "param2"
          READ_BYTE  ("%eff_off%" + 0x0c + ("%index%" * 0x30)) "timing"
          READ_BYTE  ("%eff_off%" + 0x0d + ("%index%" * 0x30)) "dispel"
          READ_LONG  ("%eff_off%" + 0x0e + ("%index%" * 0x30)) "duration"
          READ_BYTE  ("%eff_off%" + 0x12 + ("%index%" * 0x30)) "prob1"
          READ_BYTE  ("%eff_off%" + 0x13 + ("%index%" * 0x30)) "prob2"
          READ_ASCII ("%eff_off%" + 0x14 + ("%index%" * 0x30)) "resref"
          READ_LONG  ("%eff_off%" + 0x1c + ("%index%" * 0x30)) "diccnt"
          READ_LONG  ("%eff_off%" + 0x20 + ("%index%" * 0x30)) "dicsid"
          READ_LONG  ("%eff_off%" + 0x24 + ("%index%" * 0x30)) "savtyp"
          READ_LONG  ("%eff_off%" + 0x28 + ("%index%" * 0x30)) "savbon"
          FOR (index1 = 0 ; index1 < eff_num ; index1 = index1 + 1) BEGIN
            PATCH_IF ("%index1%" != "%index%") BEGIN
              READ_SHORT ("%eff_off%" +        ("%index1%" * 0x30)) "eff_opcode"
              READ_BYTE  ("%eff_off%" + 0x02 + ("%index1%" * 0x30)) "eff_target"
              READ_BYTE  ("%eff_off%" + 0x03 + ("%index1%" * 0x30)) "eff_power"
              READ_LONG  ("%eff_off%" + 0x04 + ("%index1%" * 0x30)) "eff_param1"
              READ_LONG  ("%eff_off%" + 0x08 + ("%index1%" * 0x30)) "eff_param2"
              READ_BYTE  ("%eff_off%" + 0x0c + ("%index1%" * 0x30)) "eff_timing"
              READ_BYTE  ("%eff_off%" + 0x0d + ("%index1%" * 0x30)) "eff_dispel"
              READ_LONG  ("%eff_off%" + 0x0e + ("%index1%" * 0x30)) "eff_duration"
              READ_BYTE  ("%eff_off%" + 0x12 + ("%index1%" * 0x30)) "eff_prob1"
              READ_BYTE  ("%eff_off%" + 0x13 + ("%index1%" * 0x30)) "eff_prob2"
              READ_ASCII ("%eff_off%" + 0x14 + ("%index1%" * 0x30)) "eff_resref"
              READ_LONG  ("%eff_off%" + 0x1c + ("%index1%" * 0x30)) "eff_diccnt"
              READ_LONG  ("%eff_off%" + 0x20 + ("%index1%" * 0x30)) "eff_dicsid"
              READ_LONG  ("%eff_off%" + 0x24 + ("%index1%" * 0x30)) "eff_savtyp"
              READ_LONG  ("%eff_off%" + 0x28 + ("%index1%" * 0x30)) "eff_savbon"
              PATCH_IF ("%opcode%" = "%eff_opcode%") AND
                       ("%target%" = "%eff_target%") AND
                       ("%power%" = "%eff_power%") AND
                       ("%param1%" = "%eff_param1%") AND
                       ("%param2%" = "%eff_param2%") AND
                       ("%timing%" = "%eff_timing%") AND
                       ("%dispel%" = "%eff_dispel%") AND
                       ("%duration%" = "%eff_duration%") AND
                       ("%prob1%" = "%eff_prob1%") AND
                       ("%prob2%" = "%eff_prob2%") AND
                       ("%resref%" STRING_EQUAL_CASE "%eff_resref%") AND
                       ("%diccnt%" = "%eff_diccnt%") AND
                       ("%dicsid%" = "%eff_dicsid%") AND
                       ("%savtyp%" = "%eff_savtyp%") AND
                       ("%savbon%" = "%eff_savbon%") BEGIN
                PATCH_PRINT "%SOURCE_FILE% error: Effect #%index1% (Opcode %opcode%) matches Effect #%index%! Removing..."
                DELETE_BYTES ("%eff_off%" + ("%index1%" * 0x30)) 0x30
                SET "index1" = 0 - 1
                SET "eff_num" = "eff_num" - 1
                WRITE_LONG 0x2c8 %eff_num%
                PATCH_IF ("%spl_off%" > "%eff_off%") BEGIN
                  SET "spl_off" = "spl_off" - 0x30
                  WRITE_LONG 0x2a0 %spl_off%
                END
                PATCH_IF ("%meminfo_off%" > "%eff_off%") BEGIN
                  SET "meminfo_off" = "meminfo_off" - 0x30
                  WRITE_LONG 0x2a8 %meminfo_off%
                END
                PATCH_IF ("%mem_off%" > "%eff_off%") BEGIN
                  SET "mem_off" = "mem_off" - 0x30
                  WRITE_LONG 0x2b0 %mem_off%
                END
                PATCH_IF ("%slot_off%" > "%eff_off%") BEGIN
                  SET "slot_off" = "slot_off" - 0x30
                  WRITE_LONG 0x2b8 %slot_off%
                END
                PATCH_IF ("%itm_off%" > "%eff_off%") BEGIN
                  SET "itm_off" = "itm_off" - 0x30
                  WRITE_LONG 0x2bc %itm_off%
                END
              END
            END
          END
        END
      END ELSE PATCH_IF ("%eff_ver%" = 1) BEGIN
        FOR (index = 0 ; index < eff_num ; index = index + 1) BEGIN
          READ_LONG  ("%eff_off%" + 0x08 + ("%index%" * 0x108)) "opcode"
          READ_LONG  ("%eff_off%" + 0x0c + ("%index%" * 0x108)) "target"
          READ_LONG  ("%eff_off%" + 0x10 + ("%index%" * 0x108)) "power"
          READ_LONG  ("%eff_off%" + 0x14 + ("%index%" * 0x108)) "param1"
          READ_LONG  ("%eff_off%" + 0x18 + ("%index%" * 0x108)) "param2"
          READ_SHORT ("%eff_off%" + 0x1c + ("%index%" * 0x108)) "timing"
          READ_LONG  ("%eff_off%" + 0x20 + ("%index%" * 0x108)) "duration"
          READ_SHORT ("%eff_off%" + 0x24 + ("%index%" * 0x108)) "prob1"
          READ_SHORT ("%eff_off%" + 0x26 + ("%index%" * 0x108)) "prob2"
          READ_ASCII ("%eff_off%" + 0x28 + ("%index%" * 0x108)) "resref"
          READ_LONG  ("%eff_off%" + 0x30 + ("%index%" * 0x108)) "diccnt"
          READ_LONG  ("%eff_off%" + 0x34 + ("%index%" * 0x108)) "dicsid"
          READ_LONG  ("%eff_off%" + 0x38 + ("%index%" * 0x108)) "savtyp"
          READ_LONG  ("%eff_off%" + 0x3c + ("%index%" * 0x108)) "savbon"
          READ_LONG  ("%eff_off%" + 0x54 + ("%index%" * 0x108)) "dispel"
          FOR (index1 = 0 ; index1 < eff_num ; index1 = index1 + 1) BEGIN
            PATCH_IF ("%index1%" != "%index%") BEGIN
              READ_LONG  ("%eff_off%" + 0x08 + ("%index1%" * 0x108)) "eff_opcode"
              READ_LONG  ("%eff_off%" + 0x0c + ("%index1%" * 0x108)) "eff_target"
              READ_LONG  ("%eff_off%" + 0x10 + ("%index1%" * 0x108)) "eff_power"
              READ_LONG  ("%eff_off%" + 0x14 + ("%index1%" * 0x108)) "eff_param1"
              READ_LONG  ("%eff_off%" + 0x18 + ("%index1%" * 0x108)) "eff_param2"
              READ_SHORT ("%eff_off%" + 0x1c + ("%index1%" * 0x108)) "eff_timing"
              READ_LONG  ("%eff_off%" + 0x20 + ("%index1%" * 0x108)) "eff_duration"
              READ_SHORT ("%eff_off%" + 0x24 + ("%index1%" * 0x108)) "eff_prob1"
              READ_SHORT ("%eff_off%" + 0x26 + ("%index1%" * 0x108)) "eff_prob2"
              READ_ASCII ("%eff_off%" + 0x28 + ("%index1%" * 0x108)) "eff_resref"
              READ_LONG  ("%eff_off%" + 0x30 + ("%index1%" * 0x108)) "eff_diccnt"
              READ_LONG  ("%eff_off%" + 0x34 + ("%index1%" * 0x108)) "eff_dicsid"
              READ_LONG  ("%eff_off%" + 0x38 + ("%index1%" * 0x108)) "eff_savtyp"
              READ_LONG  ("%eff_off%" + 0x3c + ("%index1%" * 0x108)) "eff_savbon"
              READ_LONG  ("%eff_off%" + 0x54 + ("%index1%" * 0x108)) "eff_dispel"
              PATCH_IF ("%opcode%" = "%eff_opcode%") AND
                       ("%target%" = "%eff_target%") AND
                       ("%power%" = "%eff_power%") AND
                       ("%param1%" = "%eff_param1%") AND
                       ("%param2%" = "%eff_param2%") AND
                       ("%timing%" = "%eff_timing%") AND
                       ("%dispel%" = "%eff_dispel%") AND
                       ("%duration%" = "%eff_duration%") AND
                       ("%prob1%" = "%eff_prob1%") AND
                       ("%prob2%" = "%eff_prob2%") AND
                       ("%resref%" STRING_EQUAL_CASE "%eff_resref%") AND
                       ("%diccnt%" = "%eff_diccnt%") AND
                       ("%dicsid%" = "%eff_dicsid%") AND
                       ("%savtyp%" = "%eff_savtyp%") AND
                       ("%savbon%" = "%eff_savbon%") BEGIN
                PATCH_PRINT "%SOURCE_FILE% error: Effect #%index1% (Opcode %opcode%) matches Effect #%index%! Removing..."
                DELETE_BYTES ("%eff_off%" + ("%index1%" * 0x108)) 0x108
                SET "index1" = 0 - 1
                SET "eff_num" = "eff_num" - 1
                WRITE_LONG 0x2c8 %eff_num%
                PATCH_IF ("%spl_off%" > "%eff_off%") BEGIN
                  SET "spl_off" = "spl_off" - 0x108
                  WRITE_LONG 0x2a0 %spl_off%
                END
                PATCH_IF ("%meminfo_off%" > "%eff_off%") BEGIN
                  SET "meminfo_off" = "meminfo_off" - 0x108
                  WRITE_LONG 0x2a8 %meminfo_off%
                END
                PATCH_IF ("%mem_off%" > "%eff_off%") BEGIN
                  SET "mem_off" = "mem_off" - 0x108
                  WRITE_LONG 0x2b0 %mem_off%
                END
                PATCH_IF ("%slot_off%" > "%eff_off%") BEGIN
                  SET "slot_off" = "slot_off" - 0x108
                  WRITE_LONG 0x2b8 %slot_off%
                END
                PATCH_IF ("%itm_off%" > "%eff_off%") BEGIN
                  SET "itm_off" = "itm_off" - 0x108
                  WRITE_LONG 0x2bc %itm_off%
                END
              END
            END
          END
        END
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Item Stuff - Item Resource Fixer (res_fixer for ALL ITEMS)~
  GROUP ~Item Stuff~

COPY_EXISTING_REGEXP GLOB ~^.+\.itm$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x71) BEGIN
    PATCH_INCLUDE ~lolfixer/lib/fj_spl_itm_reindex.tpp~
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Item Stuff - MAJESTIC Item Fixer~
  GROUP ~Item Stuff~

COPY_EXISTING_REGEXP GLOB ~^.+\.itm$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x71) BEGIN
    READ_BYTE  0x18 "flags"

    PATCH_IF (("%flags%" BAND 0b00010100) = 0b00000100) BEGIN  // droppable and uncursed

      // Used Up Item Fixer
      READ_ASCII 0x10 "used_itm"

      PATCH_IF NOT ((FILE_EXISTS_IN_GAME ~%used_itm%.itm~) OR ("%used_itm%" STRING_EQUAL_CASE "") OR ("%used_itm%" STRING_EQUAL_CASE "none")) BEGIN
        PATCH_PRINT "%SOURCE_FILE% error: Non-existent Used Up Item (%used_itm%.ITM)! Nulling..."
        WRITE_ASCII 0x10 ~NONE~ #8
      END

      // Type Fixer
      READ_SHORT 0x1c "type"

      PATCH_IF ("%type%" = 39) OR ("%type%" = 40) OR ("%type%" = 42) OR ("%type%" = 50) OR ("%type%" = 55) OR ("%type%" = 59) BEGIN
        WRITE_SHORT 0x1c 0
        PATCH_PRINT "%SOURCE_FILE% error: Invalid Item Type (%type%)! Setting to Misc type..."
      END
      PATCH_IF ("%type%" = 41) OR ("%type%" = 47) OR ("%type%" = 49) OR ("%type%" = 53) BEGIN
        WRITE_SHORT 0x1c 12
        PATCH_PRINT "%SOURCE_FILE% error: Invalid Item Type (%type%)! Setting to Shield type..."
      END
      PATCH_IF ("%type%" = 44) BEGIN
        WRITE_SHORT 0x1c 17
        PATCH_PRINT "%SOURCE_FILE% error: Invalid Item Type (%type%)! Setting to Mace type..."
      END
      PATCH_IF ("%type%" = 56) OR ("%type%" = 71) BEGIN
        WRITE_SHORT 0x1c 9
        PATCH_PRINT "%SOURCE_FILE% error: Invalid Item Type (%type%)! Setting to Potion type..."
      END
      PATCH_IF ("%type%" = 57) OR ("%type%" = 69) BEGIN
        WRITE_SHORT 0x1c 20
        PATCH_PRINT "%SOURCE_FILE% error: Invalid Item Type (%type%)! Setting to Large Sword type..."
      END
      PATCH_IF ("%type%" = 58) BEGIN
        WRITE_SHORT 0x1c 36
        PATCH_PRINT "%SOURCE_FILE% error: Invalid Item Type (%type%)! Setting to Container type..."
      END
      PATCH_IF ("%type%" = 60) OR ("%type%" = 61) OR ("%type%" = 62) OR ("%type%" = 63) OR ("%type%" = 64) OR ("%type%" = 65) OR ("%type%" = 66) OR ("%type%" = 67) BEGIN
        WRITE_SHORT 0x1c 2
        PATCH_PRINT "%SOURCE_FILE% error: Invalid Item Type (%type%)! Setting to Armor type..."
      END
      PATCH_IF ("%type%" = 70) BEGIN
        WRITE_SHORT 0x1c 32
        PATCH_PRINT "%SOURCE_FILE% error: Invalid Item Type (%type%)! Setting to Cloak type..."
      END
      PATCH_IF ("%type%" = 72) BEGIN
        WRITE_SHORT 0x1c 7
        PATCH_PRINT "%SOURCE_FILE% error: Invalid Item Type (%type%)! Setting to Headgear type..."
      END
      PATCH_IF ("%type%" = 73) BEGIN
        WRITE_SHORT 0x1c 6
        PATCH_PRINT "%SOURCE_FILE% error: Invalid Item Type (%type%)! Setting to Gauntlet type..."
      END

      // Placeholder Icon Assigner
      READ_SHORT 0x1c "type"
      READ_ASCII 0x3a "inv_icon"
      READ_ASCII 0x44 "gnd_icon"
      READ_ASCII 0x58 "desc_icon"
      SET "inv_exists" = 0
      SET "gnd_exists" = 0
      SET "desc_exists" = 0

      INNER_PATCH_FILE ~%inv_icon%.bam~ BEGIN
        SET "inv_exists" = 1
      END
      INNER_PATCH_FILE ~%gnd_icon%.bam~ BEGIN
        SET "gnd_exists" = 1
      END
      INNER_PATCH_FILE ~%desc_icon%.bam~ BEGIN
        SET "desc_exists" = 1
      END

      PATCH_IF ("%inv_exists%" = 0) BEGIN
        PATCH_IF ("%inv_icon%" STRING_EQUAL_CASE "none") OR ("%inv_icon%" STRING_EQUAL_CASE "") BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Unassigned Inventory Icon! Assigning placeholder icon..."
        END ELSE
        BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Non-existent Inventory Icon (%inv_icon%.BAM)! Assigning placeholder icon..."
        END
        WRITE_ASCII 0x3a ~IMISC6V~ #8
      END
      PATCH_IF ("%gnd_exists%" = 0) BEGIN
        PATCH_IF ("%gnd_icon%" STRING_EQUAL_CASE "GCLCKC01") BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Non-existent Ground Icon (%gnd_icon%.BAM)! Assigning GCLCK01.BAM..."
          WRITE_ASCII 0x44 ~GCLCK01~ #8
        END ELSE
        PATCH_IF ("%gnd_icon%" STRING_EQUAL_CASE "_GPOTN01") OR
                 ("%gnd_icon%" STRING_EQUAL_CASE "GPOTN11") OR
                 ("%gnd_icon%" STRING_EQUAL_CASE "GPOTN41") OR
                 ("%gnd_icon%" STRING_EQUAL_CASE "PTION2KG") OR
                 ("%gnd_icon%" STRING_EQUAL_CASE "PTION2LG") OR
                 ("%gnd_icon%" STRING_EQUAL_CASE "PTION2MG") BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Non-existent Ground Icon (%gnd_icon%.BAM)! Assigning GPOTN01.BAM..."
          WRITE_ASCII 0x44 ~GPOTN01~ #8
        END ELSE
        PATCH_IF ("%gnd_icon%" STRING_EQUAL_CASE "ICRATE01") BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Non-existent Ground Icon (%gnd_icon%.BAM)! Assigning GCRATE01.BAM..."
          WRITE_ASCII 0x44 ~GCRATE01~ #8
        END ELSE
        PATCH_IF ("%gnd_icon%" STRING_EQUAL_CASE "none") OR ("%gnd_icon%" STRING_EQUAL_CASE "") BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Unassigned Ground Icon! Assigning placeholder icon..."
          WRITE_ASCII 0x44 ~GCRATE01~ #8
        END ELSE
        BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Non-existent Ground Icon (%gnd_icon%.BAM)! Assigning placeholder icon..."
          WRITE_ASCII 0x44 ~GCRATE01~ #8
        END
      END
      PATCH_IF ("%desc_exists%" = 0) BEGIN
        PATCH_IF ("%desc_icon%" STRING_EQUAL_CASE "none") OR ("%desc_icon%" STRING_EQUAL_CASE "") BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Unassigned Description Icon! Assigning placeholder icon..."
        END ELSE
        BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Non-existent Description Icon (%desc_icon%.BAM)! Assigning placeholder icon..."
        END
        WRITE_ASCII 0x58 ~CMISC6V~ #8
      END

      // Ability Icon Assigner
      READ_ASCII 0x3a "inv_icon"
      READ_LONG  0x64 "abil_off" ELSE 0
      READ_SHORT 0x68 "abil_num" ELSE 0

      PATCH_IF (abil_off > 0x71) BEGIN
        FOR (index = 0; index < abil_num; index = index + 1) BEGIN
          READ_ASCII ("%abil_off%" + 0x04 + (0x38 * "%index%")) "abil_icon"
          PATCH_IF NOT (FILE_EXISTS_IN_GAME ~%abil_icon%.bam~) BEGIN
            PATCH_PRINT "%SOURCE_FILE% error: Ability #%index% has a non-existent icon (%abil_icon%.BAM)! Assigning Inventory Icon (%inv_icon%.BAM)..."
            WRITE_ASCIIE ("%abil_off%" + 0x04 + (0x38 * "%index%")) ~%inv_icon%~ #8
          END
        END
      END

      // Enchantment Fixer
      READ_LONG  0x60 "enchantment"

      PATCH_IF (("%enchantment%" > 0) AND (("%flags%" BAND 0b01000000) != 0b01000000)) BEGIN
        PATCH_PRINT "%SOURCE_FILE% error: Item is enchanted but not magical! Setting magical flag..."
        WRITE_BYTE 0x18 ("%flags%" BOR 0b01000000)
      END

      // Equipped Effect Fixer
      READ_LONG  0x6a "fx_off" ELSE 0
      READ_SHORT 0x6e "fx_idx" ELSE 0
      READ_SHORT 0x70 "fx_num" ELSE 0

      PATCH_IF (fx_off > 0x71) BEGIN
        FOR (index = fx_idx ; index < fx_num ; index = index + 1) BEGIN // check equipping effects
          READ_SHORT ("%fx_off%" +        ("%index%" * 0x30)) "opcode"
          READ_BYTE  ("%fx_off%" + 0x02 + ("%index%" * 0x30)) "target"
          READ_BYTE  ("%fx_off%" + 0x0c + ("%index%" * 0x30)) "timing"
          READ_BYTE  ("%fx_off%" + 0x0d + ("%index%" * 0x30)) "dispel"
          READ_BYTE  ("%fx_off%" + 0x12 + ("%index%" * 0x30)) "prob1"
          READ_BYTE  ("%fx_off%" + 0x13 + ("%index%" * 0x30)) "prob2"
          PATCH_IF (("%target%" != 1) AND ("%target%" != 3) AND ("%target%" != 5)) BEGIN
            PATCH_PRINT "%SOURCE_FILE% error: Effect #%index% (opcode %opcode%) has an incorrect target (%target%)! Targeting self..."
            WRITE_BYTE  ("%fx_off%" + 0x02 + ("%index%" * 0x30)) 1
          END
          PATCH_IF ("%timing%" != 2) BEGIN
            PATCH_PRINT "%SOURCE_FILE% error: Effect #%index% (opcode %opcode%) has an incorrect timing mode (%timing%)! Making effect active when equipped..."
            WRITE_BYTE  ("%fx_off%" + 0x0c + ("%index%" * 0x30)) 2
          END
          PATCH_IF (("%dispel%" != 0) AND ("%dispel%" != 2)) BEGIN
            PATCH_PRINT "%SOURCE_FILE% error: Effect #%index% (opcode %opcode%) can be dispelled (%dispel%)! Making undispellable..."
            WRITE_BYTE  ("%fx_off%" + 0x0d + ("%index%" * 0x30)) 2
          END
        END
      END

      // Ability Slot Fixer
      READ_LONG  0x64 "abil_off" ELSE 0
      READ_SHORT 0x68 "abil_num" ELSE 0

      PATCH_IF (abil_off > 0x71) BEGIN
        FOR (index = 0; index < abil_num; index = index + 1) BEGIN
          READ_BYTE  ("%abil_off%" + 0x00 + (0x38 * "%index%")) "abil_type"
          READ_BYTE  ("%abil_off%" + 0x02 + (0x38 * "%index%")) "slot"
          PATCH_IF ((("%abil_type%" = 1) OR ("%abil_type%" = 2) OR ("%abil_type%" = 4)) AND ("%slot%" != 1)) BEGIN
            PATCH_PRINT "%SOURCE_FILE% error: Ability #%index% assigned to WEAPON slot (was %slot%)..."
            WRITE_BYTE  ("%abil_off%" + 0x02 + (0x38 * "%index%")) 1
          END
          PATCH_IF (("%abil_type%" = 3) AND ("%slot%" != 3)) BEGIN
            PATCH_PRINT "%SOURCE_FILE% error: Ability #%index% assigned to EQUIPMENT slot (was %slot%)..."
            WRITE_BYTE  ("%abil_off%" + 0x02 + (0x38 * "%index%")) 3
          END
        END
      END

      // Animation and Ranged Ability Flag Fixer
      READ_LONG  0x64 "abil_off" ELSE 0
      READ_SHORT 0x68 "abil_num" ELSE 0

      PATCH_IF (abil_off > 0x71) BEGIN
        FOR (index = 0; index < abil_num; index = index + 1) BEGIN
          READ_SHORT ("%abil_off%" +        (0x38 * "%index%")) "abil_type"
          READ_SHORT ("%abil_off%" + 0x2c + (0x38 * "%index%")) "anim_overhand"
          READ_SHORT ("%abil_off%" + 0x2e + (0x38 * "%index%")) "anim_backhand"
          READ_SHORT ("%abil_off%" + 0x30 + (0x38 * "%index%")) "anim_thrust"
          READ_SHORT ("%abil_off%" + 0x32 + (0x38 * "%index%")) "is_arrow"
          READ_SHORT ("%abil_off%" + 0x34 + (0x38 * "%index%")) "is_bolt"
          READ_SHORT ("%abil_off%" + 0x36 + (0x38 * "%index%")) "is_bullet"
          PATCH_IF ((%anim_overhand% + %anim_backhand% + %anim_thrust%) != 0) AND
                   ((%anim_overhand% + %anim_backhand% + %anim_thrust%) != 100) BEGIN
            WRITE_SHORT ("%abil_off%" + 0x2c + (0x38 * "%index%")) 0
            WRITE_SHORT ("%abil_off%" + 0x30 + (0x38 * "%index%")) 0
            WRITE_SHORT ("%abil_off%" + 0x2e + (0x38 * "%index%")) 0
            PATCH_PRINT "%SOURCE_FILE% error: Improper Swing Probabilities! Setting to 0"
            PATCH_PRINT "  Overhand Swing: %anim_overhand% -> 0"
            PATCH_PRINT "  Backhand Swing: %anim_backhand% -> 0"
            PATCH_PRINT "  Thrust        : %anim_thrust% -> 0"
          END
          PATCH_IF ((%anim_overhand% + %anim_backhand% + %anim_thrust%) > 0) AND (("%abil_type%" = 1) OR ("%abil_type%" = 2) OR ("%abil_type%" = 4)) AND ((%type% < 15) OR (%type% > 30)) BEGIN
            WRITE_SHORT ("%abil_off%" + 0x2c + (0x38 * "%index%")) 0
            WRITE_SHORT ("%abil_off%" + 0x30 + (0x38 * "%index%")) 0
            WRITE_SHORT ("%abil_off%" + 0x2e + (0x38 * "%index%")) 0
            PATCH_PRINT "%SOURCE_FILE% error: Non weapon has animations!"
            PATCH_PRINT "  Overhand Swing: %anim_overhand% -> 0"
            PATCH_PRINT "  Backhand Swing: %anim_backhand% -> 0"
            PATCH_PRINT "  Thrust        : %anim_thrust% -> 0"
          END
          PATCH_IF ("%abil_type%" = 1) AND ((%anim_overhand% + %anim_backhand% + %anim_thrust%) != 100) BEGIN // Melee Ability
            PATCH_IF (("%type%" = 16)) AND // dagger
                     (("%anim_overhand%" != 0) OR
                      ("%anim_backhand%" != 20) OR
                      ("%anim_thrust%" != 80)) BEGIN
              SET "anim_overhand_new" = 0
              SET "anim_backhand_new" = 20
              SET "anim_thrust_new" = 80
              WRITE_SHORT ("%abil_off%" + 0x2c + (0x38 * "%index%")) 0
              WRITE_SHORT ("%abil_off%" + 0x30 + (0x38 * "%index%")) 20
              WRITE_SHORT ("%abil_off%" + 0x2e + (0x38 * "%index%")) 80
              PATCH_PRINT "%SOURCE_FILE% error: Melee Animations have wrong probabilities! Setting Dagger probabilities..."
              PATCH_PRINT "  Overhand Swing: %anim_overhand% -> %anim_overhand_new%"
              PATCH_PRINT "  Backhand Swing: %anim_backhand% -> %anim_backhand_new%"
              PATCH_PRINT "  Thrust        : %anim_thrust% -> %anim_thrust_new%"
            END
            PATCH_IF (("%type%" = 19)) AND // short sword
                     (("%anim_overhand%" != 10) OR
                      ("%anim_backhand%" != 25) OR
                      ("%anim_thrust%" != 65)) BEGIN
              SET "anim_overhand_new" = 10
              SET "anim_backhand_new" = 25
              SET "anim_thrust_new" = 65
              WRITE_SHORT ("%abil_off%" + 0x2c + (0x38 * "%index%")) 10
              WRITE_SHORT ("%abil_off%" + 0x30 + (0x38 * "%index%")) 25
              WRITE_SHORT ("%abil_off%" + 0x2e + (0x38 * "%index%")) 65
              PATCH_PRINT "%SOURCE_FILE% error: Melee Animations have wrong probabilities! Setting Short Sword probabilities..."
              PATCH_PRINT "  Overhand Swing: %anim_overhand% -> %anim_overhand_new%"
              PATCH_PRINT "  Backhand Swing: %anim_backhand% -> %anim_backhand_new%"
              PATCH_PRINT "  Thrust        : %anim_thrust% -> %anim_thrust_new%"
            END
            PATCH_IF (("%type%" = 17) OR // maces
                      ("%type%" = 18) OR // sling
                      ("%type%" = 20) OR // swords
                      ("%type%" = 21) OR // hammer
                      ("%type%" = 22) OR // morning stars
                      ("%type%" = 23) OR // flail
                      ("%type%" = 25) OR // axe
                      ("%type%" = 28)) AND // hand to hand
                     (("%flags%" BAND 0b00000010) != 0b00000010) AND // 1-handed
                     (("%anim_overhand%" != 50) OR
                      ("%anim_backhand%" != 50) OR
                      ("%anim_thrust%" != 0)) BEGIN
              SET "anim_overhand_new" = 50
              SET "anim_backhand_new" = 50
              SET "anim_thrust_new" = 0
              WRITE_SHORT ("%abil_off%" + 0x2c + (0x38 * "%index%")) 50
              WRITE_SHORT ("%abil_off%" + 0x30 + (0x38 * "%index%")) 50
              WRITE_SHORT ("%abil_off%" + 0x2e + (0x38 * "%index%")) 0
              PATCH_PRINT "%SOURCE_FILE% error: Melee Animations have wrong probabilities! Setting Generic 1-Hander probabilities..."
              PATCH_PRINT "  Overhand Swing: %anim_overhand% -> %anim_overhand_new%"
              PATCH_PRINT "  Backhand Swing: %anim_backhand% -> %anim_backhand_new%"
              PATCH_PRINT "  Thrust        : %anim_thrust% -> %anim_thrust_new%"
            END
            PATCH_IF (("%type%" = 17) OR // maces
                      ("%type%" = 18) OR // sling
                      ("%type%" = 20) OR // swords
                      ("%type%" = 21) OR // hammer
                      ("%type%" = 22) OR // morning stars
                      ("%type%" = 23) OR // flail
                      ("%type%" = 25) OR // axe
                      ("%type%" = 28)) AND // hand to hand
                     (("%flags%" BAND 0b00000010) = 0b00000010) AND // 2-handed
                     (("%anim_overhand%" != 60) OR
                      ("%anim_backhand%" != 40) OR
                      ("%anim_thrust%" != 0)) BEGIN
              SET "anim_overhand_new" = 60
              SET "anim_backhand_new" = 40
              SET "anim_thrust_new" = 0
              WRITE_SHORT ("%abil_off%" + 0x2c + (0x38 * "%index%")) 60
              WRITE_SHORT ("%abil_off%" + 0x30 + (0x38 * "%index%")) 40
              WRITE_SHORT ("%abil_off%" + 0x2e + (0x38 * "%index%")) 0
              PATCH_PRINT "%SOURCE_FILE% error: Melee Animations have wrong probabilities! Setting Generic 2-Hander probabilities..."
              PATCH_PRINT "  Overhand Swing: %anim_overhand% -> %anim_overhand_new%"
              PATCH_PRINT "  Backhand Swing: %anim_backhand% -> %anim_backhand_new%"
              PATCH_PRINT "  Thrust        : %anim_thrust% -> %anim_thrust_new%"
            END
            PATCH_IF (("%type%" = 30)) AND // halberd
                     (("%anim_overhand%" != 0) OR
                      ("%anim_backhand%" != 35) OR
                      ("%anim_thrust%" != 65)) BEGIN
              SET "anim_overhand_new" = 0
              SET "anim_backhand_new" = 25
              SET "anim_thrust_new" = 65
              WRITE_SHORT ("%abil_off%" + 0x2c + (0x38 * "%index%")) 0
              WRITE_SHORT ("%abil_off%" + 0x30 + (0x38 * "%index%")) 35
              WRITE_SHORT ("%abil_off%" + 0x2e + (0x38 * "%index%")) 65
              PATCH_PRINT "%SOURCE_FILE% error: Melee Animations have wrong probabilities! Setting Halberd probabilities..."
              PATCH_PRINT "  Overhand Swing: %anim_overhand% -> %anim_overhand_new%"
              PATCH_PRINT "  Backhand Swing: %anim_backhand% -> %anim_backhand_new%"
              PATCH_PRINT "  Thrust        : %anim_thrust% -> %anim_thrust_new%"
            END
            PATCH_IF (("%type%" = 29)) AND // spear
                     (("%anim_overhand%" != 0) OR
                      ("%anim_backhand%" != 0) OR
                      ("%anim_thrust%" != 100)) BEGIN
              SET "anim_overhand_new" = 0
              SET "anim_backhand_new" = 0
              SET "anim_thrust_new" = 100
              WRITE_SHORT ("%abil_off%" + 0x2c + (0x38 * "%index%")) 0
              WRITE_SHORT ("%abil_off%" + 0x30 + (0x38 * "%index%")) 0
              WRITE_SHORT ("%abil_off%" + 0x2e + (0x38 * "%index%")) 100
              PATCH_PRINT "%SOURCE_FILE% error: Melee Animations have wrong probabilities! Setting Spear probabilities..."
              PATCH_PRINT "  Overhand Swing: %anim_overhand% -> %anim_overhand_new%"
              PATCH_PRINT "  Backhand Swing: %anim_backhand% -> %anim_backhand_new%"
              PATCH_PRINT "  Thrust        : %anim_thrust% -> %anim_thrust_new%"
            END
            PATCH_IF (("%type%" = 26)) AND // staff
                     (("%anim_overhand%" != 20) OR
                      ("%anim_backhand%" != 70) OR
                      ("%anim_thrust%" != 10)) BEGIN
              SET "anim_overhand_new" = 20
              SET "anim_backhand_new" = 70
              SET "anim_thrust_new" = 10
              WRITE_SHORT ("%abil_off%" + 0x2c + (0x38 * "%index%")) 20
              WRITE_SHORT ("%abil_off%" + 0x30 + (0x38 * "%index%")) 70
              WRITE_SHORT ("%abil_off%" + 0x2e + (0x38 * "%index%")) 10
              PATCH_PRINT "%SOURCE_FILE% error: Melee Animations have wrong probabilities! Setting Stave probabilities..."
              PATCH_PRINT "  Overhand Swing: %anim_overhand% -> %anim_overhand_new%"
              PATCH_PRINT "  Backhand Swing: %anim_backhand% -> %anim_backhand_new%"
              PATCH_PRINT "  Thrust        : %anim_thrust% -> %anim_thrust_new%"
            END
          END
          PATCH_IF ("%abil_type%" = 2) BEGIN // Ranged Ability (No ammunition or ammunition itself)
            PATCH_IF (("%type%" = 15) OR // bow
                      ("%type%" = 18) OR // sling
                      ("%type%" = 27)) AND // xbow
                     (("%anim_overhand%" != 0) OR
                      ("%anim_backhand%" != 0) OR
                      ("%anim_thrust%" != 0)) BEGIN
              SET "anim_overhand_new" = 0
              SET "anim_backhand_new" = 0
              SET "anim_thrust_new" = 0
              WRITE_SHORT ("%abil_off%" + 0x2c + (0x38 * "%index%")) 0
              WRITE_SHORT ("%abil_off%" + 0x30 + (0x38 * "%index%")) 0
              WRITE_SHORT ("%abil_off%" + 0x2e + (0x38 * "%index%")) 0
              PATCH_PRINT "%SOURCE_FILE% error: Ranged Animations have wrong probabilities! Nulling probabilities..."
              PATCH_PRINT "  Overhand Swing: %anim_overhand% -> %anim_overhand_new%"
              PATCH_PRINT "  Backhand Swing: %anim_backhand% -> %anim_backhand_new%"
              PATCH_PRINT "  Thrust        : %anim_thrust% -> %anim_thrust_new%"
              PATCH_IF (("%type%" = 15) AND (("%is_arrow%" = 0) OR ("%is_bullet%" = 1) OR ("%is_bolt%" = 1))) BEGIN
                WRITE_SHORT ("%abil_off%" + 0x32 + (0x38 * "%index%")) 1
                WRITE_SHORT ("%abil_off%" + 0x34 + (0x38 * "%index%")) 0
                WRITE_SHORT ("%abil_off%" + 0x36 + (0x38 * "%index%")) 0
                PATCH_PRINT "%SOURCE_FILE% error: Item is supposed to fire ARROWS!"
              END ELSE
              PATCH_IF (("%type%" = 18) AND (("%is_arrow%" = 1) OR ("%is_bullet%" = 0) OR ("%is_bolt%" = 1))) BEGIN
                WRITE_SHORT ("%abil_off%" + 0x32 + (0x38 * "%index%")) 0
                WRITE_SHORT ("%abil_off%" + 0x34 + (0x38 * "%index%")) 0
                WRITE_SHORT ("%abil_off%" + 0x36 + (0x38 * "%index%")) 1
                PATCH_PRINT "%SOURCE_FILE% error: Item is supposed to fire BULLETS!"
              END ELSE
              PATCH_IF (("%type%" = 27) AND (("%is_arrow%" = 1) OR ("%is_bullet%" = 1) OR ("%is_bolt%" = 0))) BEGIN
                WRITE_SHORT ("%abil_off%" + 0x32 + (0x38 * "%index%")) 0
                WRITE_SHORT ("%abil_off%" + 0x34 + (0x38 * "%index%")) 1
                WRITE_SHORT ("%abil_off%" + 0x36 + (0x38 * "%index%")) 0
                PATCH_PRINT "%SOURCE_FILE% error: Item is supposed to fire BOLTS!"
              END
            END
            PATCH_IF (("%type%" = 16) OR // dagger
                      ("%type%" = 17) OR // maces
                      ("%type%" = 19) OR // short sword
                      ("%type%" = 20) OR // swords
                      ("%type%" = 21) OR // hammer
                      ("%type%" = 22) OR // morning stars
                      ("%type%" = 23) OR // flail
                      ("%type%" = 24) OR // darts
                      ("%type%" = 25) OR // axe
                      ("%type%" = 26) OR // staff
                      ("%type%" = 28) OR // hand to hand
                      ("%type%" = 29) OR // Spear
                      ("%type%" = 30)) AND // halberd
                     ((%anim_overhand% + %anim_backhand% + %anim_thrust%) != 100) BEGIN
              SET "anim_overhand_new" = 100
              SET "anim_backhand_new" = 0
              SET "anim_thrust_new" = 0
              WRITE_SHORT ("%abil_off%" + 0x2c + (0x38 * "%index%")) 100
              WRITE_SHORT ("%abil_off%" + 0x30 + (0x38 * "%index%")) 0
              WRITE_SHORT ("%abil_off%" + 0x2e + (0x38 * "%index%")) 0
              PATCH_PRINT "%SOURCE_FILE% error: Ranged Animations have wrong probabilities! Setting Generic Ranged probabilities..."
              PATCH_PRINT "  Overhand Swing: %anim_overhand% -> %anim_overhand_new%"
              PATCH_PRINT "  Backhand Swing: %anim_backhand% -> %anim_backhand_new%"
              PATCH_PRINT "  Thrust        : %anim_thrust% -> %anim_thrust_new%"
              PATCH_IF (("%type%" != 18) AND (("%is_arrow%" = 1) OR ("%is_bullet%" = 1) OR ("%is_bolt%" = 1))) BEGIN
                WRITE_SHORT ("%abil_off%" + 0x32 + (0x38 * "%index%")) 0
                WRITE_SHORT ("%abil_off%" + 0x34 + (0x38 * "%index%")) 0
                WRITE_SHORT ("%abil_off%" + 0x36 + (0x38 * "%index%")) 0
                PATCH_PRINT "%SOURCE_FILE% error: Item is not a BOW/SLING/XBOW!"
              END
            END
          END
          PATCH_IF ("%abil_type%" = 4) BEGIN // Launcher Ability
            PATCH_IF (("%type%" = 15) OR // bow
                      ("%type%" = 18) OR // sling
                      ("%type%" = 27)) AND // xbow
                     (("%anim_overhand%" != 0) OR
                      ("%anim_backhand%" != 0) OR
                      ("%anim_thrust%" != 0)) BEGIN
              SET "anim_overhand_new" = 0
              SET "anim_backhand_new" = 0
              SET "anim_thrust_new" = 0
              WRITE_SHORT ("%abil_off%" + 0x2c + (0x38 * "%index%")) 0
              WRITE_SHORT ("%abil_off%" + 0x30 + (0x38 * "%index%")) 0
              WRITE_SHORT ("%abil_off%" + 0x2e + (0x38 * "%index%")) 0
              PATCH_PRINT "%SOURCE_FILE% error: Launcher Animations have wrong probabilities! Nulling probabilities..."
              PATCH_PRINT "  Overhand Swing: %anim_overhand% -> %anim_overhand_new%"
              PATCH_PRINT "  Backhand Swing: %anim_backhand% -> %anim_backhand_new%"
              PATCH_PRINT "  Thrust        : %anim_thrust% -> %anim_thrust_new%"
              PATCH_IF ("%type%" = 15) AND (("%is_arrow%" = 0) OR ("%is_bullet%" = 1) OR ("%is_bolt%" = 1)) BEGIN
                WRITE_SHORT ("%abil_off%" + 0x32 + (0x38 * "%index%")) 1
                WRITE_SHORT ("%abil_off%" + 0x34 + (0x38 * "%index%")) 0
                WRITE_SHORT ("%abil_off%" + 0x36 + (0x38 * "%index%")) 0
                PATCH_PRINT "%SOURCE_FILE% error: Item is supposed to fire ARROWS!"
              END ELSE
              PATCH_IF (("%type%" = 18) AND (("%is_arrow%" = 1) OR ("%is_bullet%" = 0) OR ("%is_bolt%" = 1))) BEGIN
                WRITE_SHORT ("%abil_off%" + 0x32 + (0x38 * "%index%")) 0
                WRITE_SHORT ("%abil_off%" + 0x34 + (0x38 * "%index%")) 0
                WRITE_SHORT ("%abil_off%" + 0x36 + (0x38 * "%index%")) 1
                PATCH_PRINT "%SOURCE_FILE% error: Item is supposed to fire BULLETS!"
              END ELSE
              PATCH_IF ("%type%" = 27) AND (("%is_arrow%" = 1) OR ("%is_bullet%" = 1) OR ("%is_bolt%" = 0)) BEGIN
                WRITE_SHORT ("%abil_off%" + 0x32 + (0x38 * "%index%")) 0
                WRITE_SHORT ("%abil_off%" + 0x34 + (0x38 * "%index%")) 1
                WRITE_SHORT ("%abil_off%" + 0x36 + (0x38 * "%index%")) 0
                PATCH_PRINT "%SOURCE_FILE% error: Item is supposed to fire BOLTS!"
              END
            END ELSE
            PATCH_IF (("%type%" = 16) OR // dagger
                      ("%type%" = 17) OR // maces
                      ("%type%" = 19) OR // short sword
                      ("%type%" = 20) OR // swords
                      ("%type%" = 21) OR // hammer
                      ("%type%" = 22) OR // morning stars
                      ("%type%" = 23) OR // flail
                      ("%type%" = 24) OR // darts
                      ("%type%" = 25) OR // axe
                      ("%type%" = 26) OR // staff
                      ("%type%" = 28) OR // hand to hand
                      ("%type%" = 29) OR // Spear
                      ("%type%" = 30)) AND // halberd
                     ((%anim_overhand% + %anim_backhand% + %anim_thrust%) != 100) BEGIN
              SET "anim_overhand_new" = 100
              SET "anim_backhand_new" = 0
              SET "anim_thrust_new" = 0
              WRITE_SHORT ("%abil_off%" + 0x2c + (0x38 * "%index%")) 100
              WRITE_SHORT ("%abil_off%" + 0x30 + (0x38 * "%index%")) 0
              WRITE_SHORT ("%abil_off%" + 0x2e + (0x38 * "%index%")) 0
              PATCH_PRINT "%SOURCE_FILE% error: Launcher Animations have wrong probabilities! Setting Generic Ranged probabilities..."
              PATCH_PRINT "  Overhand Swing: %anim_overhand% -> %anim_overhand_new%"
              PATCH_PRINT "  Backhand Swing: %anim_backhand% -> %anim_backhand_new%"
              PATCH_PRINT "  Thrust        : %anim_thrust% -> %anim_thrust_new%"
              PATCH_IF (("%type%" != 18) AND (("%is_arrow%" = 1) OR ("%is_bullet%" = 1) OR ("%is_bolt%" = 1))) BEGIN
                WRITE_SHORT ("%abil_off%" + 0x32 + (0x38 * "%index%")) 0
                WRITE_SHORT ("%abil_off%" + 0x34 + (0x38 * "%index%")) 0
                WRITE_SHORT ("%abil_off%" + 0x36 + (0x38 * "%index%")) 0
                PATCH_PRINT "%SOURCE_FILE% error: Item is not a BOW/SLING/XBOW!"
              END
            END
          END
        END
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Item Stuff - Portrait Icon Assigner~
  GROUP ~Item Stuff~

COPY_EXISTING_REGEXP GLOB ~^.+\.itm$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x71) BEGIN
    READ_BYTE  0x18 "flags"

    PATCH_IF (("%flags%" BAND 0b00010100) = 0b00000100) BEGIN  // droppable and uncursed

      // Equipped Effect Fixer
      READ_LONG  0x6a "fx_off" ELSE 0
      READ_SHORT 0x6e "fx_idx" ELSE 0
      READ_SHORT 0x70 "fx_num" ELSE 0

      PATCH_IF (fx_off > 0x71) BEGIN
        FOR (index = fx_idx ; index < fx_num ; index = index + 1) BEGIN // check equipping effects
          READ_SHORT ("%fx_off%" +        ("%index%" * 0x30)) "opcode"
          READ_LONG  ("%fx_off%" + 0x04 + ("%index%" * 0x30)) "param1"
          READ_LONG  ("%fx_off%" + 0x08 + ("%index%" * 0x30)) "param2"

          PATCH_IF ("%opcode%" = 22) AND (((("%param2%" = 0) OR ("%param2%" = 1)) AND ("%param1%" < 0)) OR (("%param2%" = 2) AND ("%param1%" < 100))) BEGIN
            SET "found" = 0
            FOR (index1 = fx_idx ; index1 < fx_num ; index1 = index1 + 1) BEGIN // check equipping effects
              PATCH_IF ("%index1%" != "%index%") BEGIN
                READ_SHORT ("%fx_off%" +        ("%index1%" * 0x30)) "eff_opcode"
                READ_LONG  ("%fx_off%" + 0x08 + ("%index1%" * 0x30)) "eff_param2"
                PATCH_IF ("%eff_opcode%" = 142) AND ("%eff_param2%" = 33) BEGIN
                  SET "found" = 1
                END
              END
            END
            PATCH_IF ("%found%" = 0) BEGIN
              PATCH_PRINT "%SOURCE_FILE% error: Adding Bad Luck Portrait..."
              LPF ADD_ITEM_EQEFFECT
                INT_VAR
                  opcode     = 142
                  target     = 1
                  timing     = 2
                  parameter2 = 33
              END
              READ_SHORT 0x70 "fx_num"
            END
          END

          PATCH_IF ("%opcode%" = 22) AND (((("%param2%" = 0) OR ("%param2%" = 1)) AND ("%param1%" > 0)) OR (("%param2%" = 2) AND ("%param1%" > 100))) BEGIN
            SET "found" = 0
            FOR (index1 = fx_idx ; index1 < fx_num ; index1 = index1 + 1) BEGIN // check equipping effects
              PATCH_IF ("%index1%" != "%index%") BEGIN
                READ_SHORT ("%fx_off%" +        ("%index1%" * 0x30)) "eff_opcode"
                READ_LONG  ("%fx_off%" + 0x08 + ("%index1%" * 0x30)) "eff_param2"
                PATCH_IF ("%eff_opcode%" = 142) AND ("%eff_param2%" = 32) BEGIN
                  SET "found" = 1
                END
              END
            END
            PATCH_IF ("%found%" = 0) BEGIN
              PATCH_PRINT "%SOURCE_FILE% error: Adding Good Luck Portrait..."
              LPF ADD_ITEM_EQEFFECT
                INT_VAR
                  opcode     = 142
                  target     = 1
                  timing     = 2
                  parameter2 = 32
              END
              READ_SHORT 0x70 "fx_num"
            END
          END

          PATCH_IF ("%opcode%" = 27) AND (((("%param2%" = 0) OR ("%param2%" = 1)) AND ("%param1%" > 0)) OR (("%param2%" = 2) AND ("%param1%" > 100))) BEGIN
            SET "found" = 0
            FOR (index1 = fx_idx ; index1 < fx_num ; index1 = index1 + 1) BEGIN // check equipping effects
              PATCH_IF ("%index1%" != "%index%") BEGIN
                READ_SHORT ("%fx_off%" +        ("%index1%" * 0x30)) "eff_opcode"
                READ_LONG  ("%fx_off%" + 0x08 + ("%index1%" * 0x30)) "eff_param2"
                PATCH_IF ("%eff_opcode%" = 142) AND ("%eff_param2%" = 24) BEGIN
                  SET "found" = 1
                END
              END
            END
            PATCH_IF ("%found%" = 0) BEGIN
              PATCH_PRINT "%SOURCE_FILE% error: Adding Protection from Acid Portrait..."
              LPF ADD_ITEM_EQEFFECT
                INT_VAR
                  opcode     = 142
                  target     = 1
                  timing     = 2
                  parameter2 = 24
              END
              READ_SHORT 0x70 "fx_num"
            END
          END

          PATCH_IF ("%opcode%" = 28) AND (((("%param2%" = 0) OR ("%param2%" = 1)) AND ("%param1%" > 0)) OR (("%param2%" = 2) AND ("%param1%" > 100))) BEGIN
            SET "found" = 0
            FOR (index1 = fx_idx ; index1 < fx_num ; index1 = index1 + 1) BEGIN // check equipping effects
              PATCH_IF ("%index1%" != "%index%") BEGIN
                READ_SHORT ("%fx_off%" +        ("%index1%" * 0x30)) "eff_opcode"
                READ_LONG  ("%fx_off%" + 0x08 + ("%index1%" * 0x30)) "eff_param2"
                PATCH_IF ("%eff_opcode%" = 142) AND (("%eff_param2%" = 25) OR ("%eff_param2%" = 26)) BEGIN
                  SET "found" = 1
                END
              END
            END
            PATCH_IF ("%found%" = 0) BEGIN
              PATCH_PRINT "%SOURCE_FILE% error: Adding Protection from Cold Portrait..."
              LPF ADD_ITEM_EQEFFECT
                INT_VAR
                  opcode     = 142
                  target     = 1
                  timing     = 2
                  parameter2 = 25
              END
              READ_SHORT 0x70 "fx_num"
            END
          END

          PATCH_IF ("%opcode%" = 29) AND (((("%param2%" = 0) OR ("%param2%" = 1)) AND ("%param1%" > 0)) OR (("%param2%" = 2) AND ("%param1%" > 100))) BEGIN
            SET "found" = 0
            FOR (index1 = fx_idx ; index1 < fx_num ; index1 = index1 + 1) BEGIN // check equipping effects
              PATCH_IF ("%index1%" != "%index%") BEGIN
                READ_SHORT ("%fx_off%" +        ("%index1%" * 0x30)) "eff_opcode"
                READ_LONG  ("%fx_off%" + 0x08 + ("%index1%" * 0x30)) "eff_param2"
                PATCH_IF ("%eff_opcode%" = 142) AND ("%eff_param2%" = 27) BEGIN
                  SET "found" = 1
                END
              END
            END
            PATCH_IF ("%found%" = 0) BEGIN
              PATCH_PRINT "%SOURCE_FILE% error: Adding Protection from Electricity Portrait..."
              LPF ADD_ITEM_EQEFFECT
                INT_VAR
                  opcode     = 142
                  target     = 1
                  timing     = 2
                  parameter2 = 27
              END
              READ_SHORT 0x70 "fx_num"
            END
          END

          PATCH_IF ("%opcode%" = 30) AND (((("%param2%" = 0) OR ("%param2%" = 1)) AND ("%param1%" > 0)) OR (("%param2%" = 2) AND ("%param1%" > 100))) BEGIN
            SET "found" = 0
            FOR (index1 = fx_idx ; index1 < fx_num ; index1 = index1 + 1) BEGIN // check equipping effects
              PATCH_IF ("%index1%" != "%index%") BEGIN
                READ_SHORT ("%fx_off%" +        ("%index1%" * 0x30)) "eff_opcode"
                READ_LONG  ("%fx_off%" + 0x08 + ("%index1%" * 0x30)) "eff_param2"
                PATCH_IF ("%eff_opcode%" = 142) AND (("%eff_param2%" = 16) OR ("%eff_param2%" = 26)) BEGIN
                  SET "found" = 1
                END
              END
            END
            PATCH_IF ("%found%" = 0) BEGIN
              PATCH_PRINT "%SOURCE_FILE% error: Adding Protection from Fire Portrait..."
              LPF ADD_ITEM_EQEFFECT
                INT_VAR
                  opcode     = 142
                  target     = 1
                  timing     = 2
                  parameter2 = 16
              END
              READ_SHORT 0x70 "fx_num"
            END
          END

          PATCH_IF (("%opcode%" = 31) OR ("%opcode%" = 166)) AND (((("%param2%" = 0) OR ("%param2%" = 1)) AND ("%param1%" > 0)) OR (("%param2%" = 2) AND ("%param1%" > 100))) BEGIN
            SET "found" = 0
            FOR (index1 = fx_idx ; index1 < fx_num ; index1 = index1 + 1) BEGIN // check equipping effects
              PATCH_IF ("%index1%" != "%index%") BEGIN
                READ_SHORT ("%fx_off%" +        ("%index1%" * 0x30)) "eff_opcode"
                READ_LONG  ("%fx_off%" + 0x08 + ("%index1%" * 0x30)) "eff_param2"
                PATCH_IF ("%eff_opcode%" = 142) AND (("%eff_param2%" = 28) OR ("%eff_param2%" = 63)) BEGIN
                  SET "found" = 1
                END
              END
            END
            PATCH_IF ("%found%" = 0) BEGIN
              PATCH_PRINT "%SOURCE_FILE% error: Adding Protection from Magic Portrait..."
              LPF ADD_ITEM_EQEFFECT
                INT_VAR
                  opcode     = 142
                  target     = 1
                  timing     = 2
                  parameter2 = 28
              END
              READ_SHORT 0x70 "fx_num"
            END
          END

          PATCH_IF ("%opcode%" = 69) BEGIN
            SET "found" = 0
            FOR (index1 = fx_idx ; index1 < fx_num ; index1 = index1 + 1) BEGIN // check equipping effects
              PATCH_IF ("%index1%" != "%index%") BEGIN
                READ_SHORT ("%fx_off%" +        ("%index1%" * 0x30)) "eff_opcode"
                READ_LONG  ("%fx_off%" + 0x08 + ("%index1%" * 0x30)) "eff_param2"
                PATCH_IF ("%eff_opcode%" = 142) AND ("%eff_param2%" = 31) BEGIN
                  SET "found" = 1
                END
              END
            END
            PATCH_IF ("%found%" = 0) BEGIN
              PATCH_PRINT "%SOURCE_FILE% error: Adding Non-detection Portrait..."
              LPF ADD_ITEM_EQEFFECT
                INT_VAR
                  opcode     = 142
                  target     = 1
                  timing     = 2
                  parameter2 = 31
              END
              READ_SHORT 0x70 "fx_num"
            END
          END

          PATCH_IF ("%opcode%" = 98) BEGIN
            SET "found" = 0
            FOR (index1 = fx_idx ; index1 < fx_num ; index1 = index1 + 1) BEGIN // check equipping effects
              PATCH_IF ("%index1%" != "%index%") BEGIN
                READ_SHORT ("%fx_off%" +        ("%index1%" * 0x30)) "eff_opcode"
                READ_LONG  ("%fx_off%" + 0x08 + ("%index1%" * 0x30)) "eff_param2"
                PATCH_IF ("%eff_opcode%" = 142) AND (("%eff_param2%" = 42) OR ("%eff_param2%" = 56) OR ("%eff_param2%" = 87)) BEGIN
                  SET "found" = 1
                END
              END
            END
            PATCH_IF ("%found%" = 0) BEGIN
              PATCH_PRINT "%SOURCE_FILE% error: Adding Regeneration Portrait..."
              LPF ADD_ITEM_EQEFFECT
                INT_VAR
                  opcode     = 142
                  target     = 1
                  timing     = 2
                  parameter2 = 56
              END
              READ_SHORT 0x70 "fx_num"
            END
          END

          PATCH_IF ("%opcode%" = 101) AND ("%param2%" = 5) BEGIN
            SET "found" = 0
            FOR (index1 = fx_idx ; index1 < fx_num ; index1 = index1 + 1) BEGIN // check equipping effects
              PATCH_IF ("%index1%" != "%index%") BEGIN
                READ_SHORT ("%fx_off%" +        ("%index1%" * 0x30)) "eff_opcode"
                READ_LONG  ("%fx_off%" + 0x08 + ("%index1%" * 0x30)) "eff_param2"
                PATCH_IF ("%eff_opcode%" = 142) AND ("%eff_param2%" = 52) BEGIN
                  SET "found" = 1
                END
              END
            END
            PATCH_IF ("%found%" = 0) BEGIN
              PATCH_PRINT "%SOURCE_FILE% error: Adding Mind Shield Portrait..."
              LPF ADD_ITEM_EQEFFECT
                INT_VAR
                  opcode     = 142
                  target     = 1
                  timing     = 2
                  parameter2 = 52
              END
              READ_SHORT 0x70 "fx_num"
            END
          END

          PATCH_IF ("%opcode%" = 163) BEGIN
            SET "found" = 0
            FOR (index1 = fx_idx ; index1 < fx_num ; index1 = index1 + 1) BEGIN // check equipping effects
              PATCH_IF ("%index1%" != "%index%") BEGIN
                READ_SHORT ("%fx_off%" +        ("%index1%" * 0x30)) "eff_opcode"
                READ_LONG  ("%fx_off%" + 0x08 + ("%index1%" * 0x30)) "eff_param2"
                PATCH_IF ("%eff_opcode%" = 142) AND ("%eff_param2%" = 19) BEGIN
                  SET "found" = 1
                END
              END
            END
            PATCH_IF ("%found%" = 0) BEGIN
              PATCH_PRINT "%SOURCE_FILE% error: Adding Free Action Portrait..."
              LPF ADD_ITEM_EQEFFECT
                INT_VAR
                  opcode     = 142
                  target     = 1
                  timing     = 2
                  parameter2 = 19
              END
              READ_SHORT 0x70 "fx_num"
            END
          END

          PATCH_IF ("%opcode%" = 173) AND (((("%param2%" = 0) OR ("%param2%" = 1)) AND ("%param1%" > 0)) OR (("%param2%" = 2) AND ("%param1%" > 100))) BEGIN
            SET "found" = 0
            FOR (index1 = fx_idx ; index1 < fx_num ; index1 = index1 + 1) BEGIN // check equipping effects
              PATCH_IF ("%index1%" != "%index%") BEGIN
                READ_SHORT ("%fx_off%" +        ("%index1%" * 0x30)) "eff_opcode"
                READ_LONG  ("%fx_off%" + 0x08 + ("%index1%" * 0x30)) "eff_param2"
                PATCH_IF ("%eff_opcode%" = 142) AND ("%eff_param2%" = 30) BEGIN
                  SET "found" = 1
                END
              END
            END
            PATCH_IF ("%found%" = 0) BEGIN
              PATCH_PRINT "%SOURCE_FILE% error: Adding Protection from Poison Portrait..."
              LPF ADD_ITEM_EQEFFECT
                INT_VAR
                  opcode     = 142
                  target     = 1
                  timing     = 2
                  parameter2 = 30
              END
              READ_SHORT 0x70 "fx_num"
            END
          END

          PATCH_IF ("%opcode%" = 176) AND (((("%param2%" = 0) OR ("%param2%" = 1)) AND ("%param1%" > 0)) OR (("%param2%" = 2) AND ("%param1%" > 100))) BEGIN
            SET "found" = 0
            FOR (index1 = fx_idx ; index1 < fx_num ; index1 = index1 + 1) BEGIN // check equipping effects
              PATCH_IF ("%index1%" != "%index%") BEGIN
                READ_SHORT ("%fx_off%" +        ("%index1%" * 0x30)) "eff_opcode"
                READ_LONG  ("%fx_off%" + 0x08 + ("%index1%" * 0x30)) "eff_param2"
                PATCH_IF ("%eff_opcode%" = 142) AND ("%eff_param2%" = 38) BEGIN
                  SET "found" = 1
                END
              END
            END
            PATCH_IF ("%found%" = 0) BEGIN
              PATCH_PRINT "%SOURCE_FILE% error: Adding Haste Portrait..."
              LPF ADD_ITEM_EQEFFECT
                INT_VAR
                  opcode     = 142
                  target     = 1
                  timing     = 2
                  parameter2 = 38
              END
              READ_SHORT 0x70 "fx_num"
            END
          END

        END
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Item Stuff - MAJESTIC Item Checker~
  GROUP ~Item Stuff~

COPY_EXISTING_REGEXP GLOB ~^.+\.itm$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x71) BEGIN
    READ_BYTE  0x18 "flags"

    PATCH_IF (("%flags%" BAND 0b00010100) = 0b00000100) BEGIN  // droppable and uncursed
      READ_LONG  0x6a "fx_off" ELSE 0
      READ_SHORT 0x6e "fx_idx" ELSE 0
      READ_SHORT 0x70 "fx_num" ELSE 0

      PATCH_IF (fx_off > 0x71) BEGIN
        FOR (index = fx_idx ; index < fx_num ; index = index + 1) BEGIN // check equipping effects
          READ_SHORT ("%fx_off%" +        ("%index%" * 0x30)) "opcode"
          READ_BYTE  ("%fx_off%" + 0x02 + ("%index%" * 0x30)) "target"
          READ_BYTE  ("%fx_off%" + 0x0c + ("%index%" * 0x30)) "timing"
          READ_BYTE  ("%fx_off%" + 0x12 + ("%index%" * 0x30)) "prob1"
          READ_BYTE  ("%fx_off%" + 0x13 + ("%index%" * 0x30)) "prob2"
          PATCH_IF ((%prob1% + %prob2%) != 100) AND ("%timing%" = 2) AND ("%target%" = 1) BEGIN
            PATCH_PRINT "%SOURCE_FILE% error: Effect #%index% (opcode %opcode%) has strange probabilities (%prob1% and %prob2%)"
        //  WRITE_BYTE  ("%fx_off%" + 0x12 + ("%index%" * 0x30)) 100
        //  WRITE_BYTE  ("%fx_off%" + 0x13 + ("%index%" * 0x30)) 0
          END
        END
      END

      // Effect Missing Resource Remover
      READ_LONG  0x64 "abil_off" ELSE 0
      READ_SHORT 0x68 "abil_num" ELSE 0
      READ_LONG  0x6a "fx_off" ELSE 0
      READ_SHORT 0x6e "fx_idx" ELSE 0
      READ_SHORT 0x70 "fx_num" ELSE 0

      PATCH_IF ((fx_off > 0x71) AND (abil_off > 0x71)) BEGIN
        FOR (index = 0; index < abil_num; index = index + 1) BEGIN
          READ_SHORT  ("%abil_off%" + 0x1e + ("%index%" * 0x38)) "abil_fx_num"
          READ_SHORT  ("%abil_off%" + 0x20 + ("%index%" * 0x38)) "abil_fx_idx"
          FOR (index2 = 0 ; index2 < abil_fx_num ; index2 = index2 + 1) BEGIN
            READ_SHORT ("%fx_off%" +        (0x30 * ("%abil_fx_idx%" + "%index2%"))) "opcode"
            READ_BYTE  ("%fx_off%" + 0x02 + (0x30 * ("%abil_fx_idx%" + "%index2%"))) "target"
            READ_LONG  ("%fx_off%" + 0x04 + (0x30 * ("%abil_fx_idx%" + "%index2%"))) "param1"
            READ_LONG  ("%fx_off%" + 0x08 + (0x30 * ("%abil_fx_idx%" + "%index2%"))) "param2"
            READ_BYTE  ("%fx_off%" + 0x0c + (0x30 * ("%abil_fx_idx%" + "%index2%"))) "timing"
            READ_ASCII ("%fx_off%" + 0x14 + (0x30 * ("%abil_fx_idx%" + "%index2%"))) "resref"
            SET "exists" = 0
            PATCH_IF ("%opcode%" = 67) OR
                     ("%opcode%" = 135) OR
                     ("%opcode%" = 151) OR
                     ("%opcode%" = 168) BEGIN
              INNER_PATCH_FILE ~%resref%.cre~ BEGIN
                SET "exists" = 1
              END
              PATCH_IF ("%exists%" = 0) BEGIN
                PATCH_PRINT "%SOURCE_FILE% error: Ability #%index% Effect #%index2% Opcode (%opcode%) - Non-existent Resource (%resref%.CRE)"
              END
            END
            PATCH_IF ("%opcode%" = 107) BEGIN
              INNER_PATCH_FILE ~%resref%.bmp~ BEGIN
                SET "exists" = 1
              END
              PATCH_IF ("%exists%" = 0) BEGIN
                PATCH_PRINT "%SOURCE_FILE% error: Ability #%index% Effect #%index2% Opcode (%opcode%) - Non-existent Resource (%resref%.BMP)"
              END
            END
            PATCH_IF ("%opcode%" = 111) OR
                     ("%opcode%" = 112) OR
                     ("%opcode%" = 122) OR
                     ("%opcode%" = 143) BEGIN
              INNER_PATCH_FILE ~%resref%.itm~ BEGIN
                SET "exists" = 1
              END
              PATCH_IF ("%exists%" = 0) BEGIN
                PATCH_PRINT "%SOURCE_FILE% error: Ability #%index% Effect #%index2% Opcode (%opcode%) - Non-existent Resource (%resref%.ITM)"
              END
            END
            PATCH_IF ("%opcode%" = 146) OR
                     ("%opcode%" = 147) OR
                     ("%opcode%" = 148) OR
                     ("%opcode%" = 171) OR
                     ("%opcode%" = 172) OR
                     ("%opcode%" = 207) OR
                     ("%opcode%" = 232) OR
                     ("%opcode%" = 266) BEGIN
              INNER_PATCH_FILE ~%resref%.spl~ BEGIN
                SET "exists" = 1
              END
              PATCH_IF ("%exists%" = 0) BEGIN
                PATCH_PRINT "%SOURCE_FILE% error: Ability #%index% Effect #%index2% Opcode (%opcode%) - Non-existent Resource (%resref%.SPL)"
              END
            END
            PATCH_IF ("%opcode%" = 152) BEGIN
              INNER_PATCH_FILE ~%resref%.mve~ BEGIN
                SET "exists" = 1
              END
              PATCH_IF ("%exists%" = 0) BEGIN
                PATCH_PRINT "%SOURCE_FILE% error: Ability #%index% Effect #%index2% Opcode (%opcode%) - Non-existent Resource (%resref%.MVE)"
              END
            END
            PATCH_IF ("%opcode%" = 174) BEGIN
              INNER_PATCH_FILE ~%resref%.wav~ BEGIN
                SET "exists" = 1
              END
              PATCH_IF ("%exists%" = 0) BEGIN
                PATCH_PRINT "%SOURCE_FILE% error: Ability #%index% Effect #%index2% Opcode (%opcode%) - Non-existent Resource (%resref%.WAV)"
              END
            END
            PATCH_IF ("%opcode%" = 177) OR
                     ("%opcode%" = 248) OR
                     ("%opcode%" = 249) BEGIN
              INNER_PATCH_FILE ~%resref%.eff~ BEGIN
                SET "exists" = 1
              END
              PATCH_IF ("%exists%" = 0) BEGIN
                PATCH_PRINT "%SOURCE_FILE% error: Ability #%index% Effect #%index2% Opcode (%opcode%) - Non-existent Resource (%resref%.EFF)"
              END
            END
            PATCH_IF ("%opcode%" = 186) BEGIN
              INNER_PATCH_FILE ~%resref%.are~ BEGIN
                SET "exists" = 1
              END
              PATCH_IF ("%exists%" = 0) BEGIN
                PATCH_PRINT "%SOURCE_FILE% error: Ability #%index% Effect #%index2% Opcode (%opcode%) - Non-existent Resource (%resref%.ARE)"
              END
            END
          END
        END
        FOR (index = 0; index < fx_num; index = index + 1) BEGIN
          READ_SHORT ("%fx_off%" +        (0x30 * "%index%")) "opcode"
          READ_BYTE  ("%fx_off%" + 0x02 + (0x30 * "%index%")) "target"
          READ_LONG  ("%fx_off%" + 0x04 + (0x30 * "%index%")) "param1"
          READ_LONG  ("%fx_off%" + 0x08 + (0x30 * "%index%")) "param2"
          READ_BYTE  ("%fx_off%" + 0x0c + (0x30 * "%index%")) "timing"
          READ_ASCII ("%fx_off%" + 0x14 + (0x30 * "%index%")) "resref"
          SET "exists" = 0
          PATCH_IF ("%opcode%" = 173) AND ("%param1%" < 100) BEGIN
            PATCH_PRINT "%SOURCE_FILE% error: Equipped Effect #%index% Opcode (%opcode%) - Poison Resist set to %param1%"
          END
          PATCH_IF (("%opcode%" = 27) OR
                    ("%opcode%" = 28) OR
                    ("%opcode%" = 29) OR
                    ("%opcode%" = 30) OR
                    ("%opcode%" = 31) OR
                    ("%opcode%" = 33) OR
                    ("%opcode%" = 34) OR
                    ("%opcode%" = 35) OR
                    ("%opcode%" = 36) OR
                    ("%opcode%" = 37)) AND ("%param2%" = 1) BEGIN
            PATCH_PRINT "%SOURCE_FILE% error: Equipped Effect #%index% Opcode (%opcode%) - Value sets to %param1%"
          END
          PATCH_IF ("%opcode%" = 67) OR
                   ("%opcode%" = 135) OR
                   ("%opcode%" = 151) OR
                   ("%opcode%" = 168) BEGIN
            INNER_PATCH_FILE ~%resref%.cre~ BEGIN
              SET "exists" = 1
            END
            PATCH_IF ("%exists%" = 0) BEGIN
              PATCH_PRINT "%SOURCE_FILE% error: Equipped Effect #%index% Opcode (%opcode%) - Non-existent Resource (%resref%.CRE)"
            END
          END
          PATCH_IF ("%opcode%" = 107) BEGIN
            INNER_PATCH_FILE ~%resref%.bmp~ BEGIN
              SET "exists" = 1
            END
            PATCH_IF ("%exists%" = 0) BEGIN
              PATCH_PRINT "%SOURCE_FILE% error: Equipped Effect #%index% Opcode (%opcode%) - Non-existent Resource (%resref%.BMP)"
            END
          END
          PATCH_IF ("%opcode%" = 111) OR
                   ("%opcode%" = 112) OR
                   ("%opcode%" = 122) OR
                   ("%opcode%" = 143) BEGIN
            INNER_PATCH_FILE ~%resref%.itm~ BEGIN
              SET "exists" = 1
            END
            PATCH_IF ("%exists%" = 0) BEGIN
              PATCH_PRINT "%SOURCE_FILE% error: Equipped Effect #%index% Opcode (%opcode%) - Non-existent Resource (%resref%.ITM)"
            END
          END
          PATCH_IF ("%opcode%" = 146) OR
                   ("%opcode%" = 147) OR
                   ("%opcode%" = 148) OR
                   ("%opcode%" = 171) OR
                   ("%opcode%" = 172) OR
                   ("%opcode%" = 207) OR
                   ("%opcode%" = 232) OR
                   ("%opcode%" = 266) BEGIN
            INNER_PATCH_FILE ~%resref%.spl~ BEGIN
              SET "exists" = 1
            END
            PATCH_IF ("%exists%" = 0) BEGIN
              PATCH_PRINT "%SOURCE_FILE% error: Equipped Effect #%index% Opcode (%opcode%) - Non-existent Resource (%resref%.SPL)"
            END
          END
          PATCH_IF ("%opcode%" = 152) BEGIN
            INNER_PATCH_FILE ~%resref%.mve~ BEGIN
              SET "exists" = 1
            END
            PATCH_IF ("%exists%" = 0) BEGIN
              PATCH_PRINT "%SOURCE_FILE% error: Equipped Effect #%index% Opcode (%opcode%) - Non-existent Resource (%resref%.MVE)"
            END
          END
          PATCH_IF ("%opcode%" = 174) BEGIN
            INNER_PATCH_FILE ~%resref%.wav~ BEGIN
              SET "exists" = 1
            END
            PATCH_IF ("%exists%" = 0) BEGIN
              PATCH_PRINT "%SOURCE_FILE% error: Equipped Effect #%index% Opcode (%opcode%) - Non-existent Resource (%resref%.WAV)"
            END
          END
          PATCH_IF ("%opcode%" = 177) OR
                   ("%opcode%" = 248) OR
                   ("%opcode%" = 249) BEGIN
            INNER_PATCH_FILE ~%resref%.eff~ BEGIN
              SET "exists" = 1
            END
            PATCH_IF ("%exists%" = 0) BEGIN
              PATCH_PRINT "%SOURCE_FILE% error: Equipped Effect #%index% Opcode (%opcode%) - Non-existent Resource (%resref%.EFF)"
            END
          END
          PATCH_IF ("%opcode%" = 186) BEGIN
            INNER_PATCH_FILE ~%resref%.are~ BEGIN
              SET "exists" = 1
            END
            PATCH_IF ("%exists%" = 0) BEGIN
              PATCH_PRINT "%SOURCE_FILE% error: AEquipped Effect #%index% Opcode (%opcode%) - Non-existent Resource (%resref%.ARE)"
            END
          END
        END
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Spell Stuff - Spell Resource Fixer (res_fixer for ALL THE SPELLS)~
  GROUP ~Spell Stuff~

COPY_EXISTING_REGEXP GLOB ~^.+\.spl$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x71) BEGIN
    PATCH_INCLUDE ~lolfixer/lib/fj_spl_itm_reindex.tpp~
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Spell Stuff - MAJESTIC Spell Fixer~
  GROUP ~Spell Stuff~

COPY_EXISTING_REGEXP GLOB ~^.+\.spl$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x71) BEGIN

    // Innate Fixer
    READ_SHORT 0x1c "spell_type"
    READ_LONG  0x34 "spell_level"

    PATCH_IF (%spell_type% = 4) BEGIN
      PATCH_IF (~%SOURCE_RES%~ STRING_EQUAL_CASE ~SPCL412~) OR // SET_SNARE_TRAP
               (~%SOURCE_RES%~ STRING_EQUAL_CASE ~SPCL414~) OR // SET_SPECIAL_SNARE_TRAP
               (~%SOURCE_RES%~ STRING_EQUAL_CASE ~SPIN592~) OR // HELM_RITUAL_SCROLL - TOD
               (~%SOURCE_RES%~ STRING_EQUAL_CASE ~SPIN593~) OR // ODREN_RITUAL_SCROLL
               (~%SOURCE_RES%~ STRING_EQUAL_CASE ~SPIN642~) OR // POISONOUS_CLOUD - eSeries
               (~%SOURCE_RES%~ STRING_EQUAL_CASE ~SPIN666~) OR // ZOMBIE_LEVEL_DRAIN
               (~%SOURCE_RES%~ STRING_EQUAL_CASE ~SPCL910~) OR // ROGUE_SET_SPIKE_TRAP
               (~%SOURCE_RES%~ STRING_EQUAL_CASE ~SPCL911~) OR // ROGUE_SET_EXPLODING_TRAP
               (~%SOURCE_RES%~ STRING_EQUAL_CASE ~SPCL912~) OR // ROGUE_SET_TIME_TRAP
               (~%SOURCE_RES%~ STRING_EQUAL_CASE ~SPIN940~) OR // MEPHIT_STINKING_CLOUD - eSeries
               (~%SOURCE_RES%~ STRING_EQUAL_CASE ~SPIN979~) BEGIN // GOLEM_GASCLOUD - eSeries
        PATCH_IF ((~%SOURCE_RES%~ STRING_EQUAL_CASE ~SPCL412~) AND (%spell_level% != 4)) OR
                 ((~%SOURCE_RES%~ STRING_EQUAL_CASE ~SPCL414~) AND (%spell_level% != 4)) BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Innate Spell is referenced by CastSpellInnate()! Correcting level to 4..."
          WRITE_LONG 0x34 ~4~
        END ELSE
        PATCH_IF ((~%SOURCE_RES%~ STRING_EQUAL_CASE ~SPIN592~) AND (%spell_level% != 5)) OR
                 ((~%SOURCE_RES%~ STRING_EQUAL_CASE ~SPIN593~) AND (%spell_level% != 5)) BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Innate Spell is referenced by CastSpellInnate()! Correcting level to 5..."
          WRITE_LONG 0x34 ~5~
        END ELSE
        PATCH_IF ((~%SOURCE_RES%~ STRING_EQUAL_CASE ~SPIN642~) AND (%spell_level% != 6)) OR
                 ((~%SOURCE_RES%~ STRING_EQUAL_CASE ~SPIN666~) AND (%spell_level% != 6)) BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Innate Spell is referenced by CastSpellInnate()! Correcting level to 6..."
          WRITE_LONG 0x34 ~6~
        END ELSE
        PATCH_IF ((~%SOURCE_RES%~ STRING_EQUAL_CASE ~SPCL910~) AND (%spell_level% != 9)) OR
                 ((~%SOURCE_RES%~ STRING_EQUAL_CASE ~SPCL911~) AND (%spell_level% != 9)) OR
                 ((~%SOURCE_RES%~ STRING_EQUAL_CASE ~SPCL912~) AND (%spell_level% != 9)) OR
                 ((~%SOURCE_RES%~ STRING_EQUAL_CASE ~SPIN940~) AND (%spell_level% != 9)) OR
                 ((~%SOURCE_RES%~ STRING_EQUAL_CASE ~SPIN979~) AND (%spell_level% != 9)) BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Innate Spell is referenced by CastSpellInnate()! Correcting level to 9..."
          WRITE_LONG 0x34 ~9~
        END
      END ELSE
      PATCH_IF (%spell_level% != 1) BEGIN
        PATCH_PRINT "%SOURCE_FILE% error: Innate Spell is not Level 1! Setting level to 1..."
        WRITE_LONG 0x34 ~1~
      END
    END

    READ_LONG  0x64 "abil_off" ELSE 0
    READ_SHORT 0x68 "abil_num" ELSE 0

    PATCH_IF (abil_off > 0x71) BEGIN
      FOR (index = 0; index < abil_num; index = index + 1) BEGIN
        READ_BYTE  ("%abil_off%" + 0x02 + (0x28 * "%index%")) "slot"
        READ_BYTE  ("%abil_off%" + 0x0c + (0x28 * "%index%")) "target"

        // Ability Target Fixer
        PATCH_IF (("%target%"  = 2) OR ("%target%" = 6)) BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Ability #%index% target may crash! (was %target%) Setting to self..."
          WRITE_BYTE  ("%abil_off%" + 0x0c + (0x28 * "%index%")) 1
        END

        // Spell Slot Fixer
        PATCH_IF (("%spell_type%"  = 4) AND ("%slot%" != 4)) BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Ability #%index% assigned to INNATE slot (was %slot%)..."
          WRITE_BYTE  ("%abil_off%" + 0x02 + (0x28 * "%index%")) 4
        END
        PATCH_IF (("%spell_type%" != 4) AND ("%slot%" != 2)) BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Ability #%index% assigned to SPELL slot (was %slot%)..."
          WRITE_BYTE  ("%abil_off%" + 0x02 + (0x28 * "%index%")) 2
        END
      END
    END

    // Effect Target Fixer
    READ_LONG  0x6a "fx_off"
    READ_SHORT 0x6e "fx_idx"
    READ_SHORT 0x70 "fx_num"

    PATCH_IF (fx_off > 0x71) BEGIN
      FOR (index = fx_idx ; index < fx_num ; index = index + 1) BEGIN // check equipping effects
        READ_SHORT ("%fx_off%" +        ("%index%" * 0x30)) "opcode"
        READ_BYTE  ("%fx_off%" + 0x02 + ("%index%" * 0x30)) "target"
        PATCH_IF ("%target%" = 2) BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Casting Effect #%index% (opcode %opcode%) targets preset target! Targetting self..."
          WRITE_BYTE  ("%fx_off%" + 0x02 + ("%index%" * 0x30)) 1
        END
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES