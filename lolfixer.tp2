BACKUP ~lolfixer/backup~
AUTHOR ~Lollorian~
VERSION ~0.1A~

/* BEGIN ~Area Stuff - Offset Checker (fixes incorrect offsets)~
  GROUP ~Area Stuff~

COPY_EXISTING_REGEXP GLOB ~^.+\.are$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x11b) THEN BEGIN
    READ_LONG  0x54 "actor_off"
    READ_SHORT 0x58 "actor_num"
    READ_SHORT 0x5a "info_num"
    READ_LONG  0x5c "info_off"
    READ_LONG  0x60 "spawn_off"
    READ_LONG  0x64 "spawn_num"
    READ_LONG  0x68 "ent_off"
    READ_LONG  0x6c "ent_num"
    READ_LONG  0x70 "cont_off"
    READ_SHORT 0x74 "cont_num"
    READ_SHORT 0x76 "item_num"
    READ_LONG  0x78 "item_off"
    READ_LONG  0x7c "vert_off"
    READ_SHORT 0x80 "vert_num"
    READ_SHORT 0x82 "amb_num"
    READ_LONG  0x84 "amb_off"
    READ_LONG  0x88 "var_off"
    READ_LONG  0x8c "var_num"
    READ_ASCII 0x94 "script"
    READ_LONG  0x9c "bmp_size"
    READ_LONG  0xa0 "bmp_off"
    READ_LONG  0xa4 "door_num"
    READ_LONG  0xa8 "door_off"
    READ_LONG  0xac "anim_num"
    READ_LONG  0xb0 "anim_off"
    READ_LONG  0xb4 "tiled_num"
    READ_LONG  0xb8 "tiled_off"
    READ_LONG  0xbc "song_off"
    READ_LONG  0xc0 "rest_off"
    READ_LONG  0xc4 "note_off"
    READ_LONG  0xc8 "note_num"
    SET "running_offset" = 0x11c

    // check actors
    PATCH_IF ("%running_offset%" != "%actor_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Actor offset is incorrect! Correcting..."
      WRITE_LONG  0x54 "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + ("%actor_num%" * 0x110))
    // check info points
    PATCH_IF ("%running_offset%" != "%info_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Info Point offset is incorrect! Correcting..."
      WRITE_LONG  0x5c "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + ("%info_num%" * 0xc4))
    // check spawn points
    PATCH_IF ("%running_offset%" != "%spawn_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Spawn Point offset is incorrect! Correcting..."
      WRITE_LONG  0x60 "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + ("%spawn_num%" * 0xc8))
    // check entrance points
    PATCH_IF ("%running_offset%" != "%ent_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Entrances offset is incorrect! Correcting..."
      WRITE_LONG  0x68 "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + ("%ent_num%" * 0x68))
    // check containers
    PATCH_IF ("%running_offset%" != "%cont_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Containers offset is incorrect! Correcting..."
      WRITE_LONG  0x70 "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + ("%cont_num%" * 0xc0))
    // check items
    PATCH_IF ("%running_offset%" != "%item_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Items offset is incorrect! Correcting..."
      WRITE_LONG  0x78 "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + ("%item_num%" * 0x14))
    // check ambients
    PATCH_IF ("%running_offset%" != "%amb_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Ambients offset is incorrect! Correcting..."
      WRITE_LONG  0x84 "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + ("%amb_num%" * 0xd4))
    // check variables
    PATCH_IF ("%running_offset%" != "%var_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Variables offset is incorrect! Correcting..."
      WRITE_LONG  0x88 "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + ("%var_num%" * 0x54))
    // check doors
    PATCH_IF ("%running_offset%" != "%door_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Door offset is incorrect! Correcting..."
      WRITE_LONG  0xa8 "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + ("%door_num%" * 0xc8))
    // check tiled objects
    PATCH_IF ("%running_offset%" != "%tiled_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Tiled Objects offset is incorrect! Correcting..."
      WRITE_LONG  0xb8 "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + ("%tiled_num%" * 0x6c))
    // check vertices
    PATCH_IF ("%running_offset%" != "%vert_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Vertices offset is incorrect! Correcting..."
      WRITE_LONG  0x7c "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + ("%vert_num%" * 0x04))
    // check animations
    PATCH_IF ("%running_offset%" != "%anim_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Animations offset is incorrect! Correcting..."
      WRITE_LONG  0xb0 "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + ("%anim_num%" * 0x4c))
    // check bitmap
    PATCH_IF ("%running_offset%" != "%bmp_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Bitmap offset is incorrect! Correcting..."
      WRITE_LONG  0xa0 "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + "%bmp_size%")
    // check songs block
    PATCH_IF ("%running_offset%" != "%song_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Songs offset is incorrect! Correcting..."
      WRITE_LONG  0xbc "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + 0x90)
    // check rest spawn block
    PATCH_IF ("%running_offset%" != "%rest_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Rest Spawn offset is incorrect! Correcting..."
      WRITE_LONG  0xc0 "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + 0xe4)
    // check map notes
    PATCH_IF ("%running_offset%" != "%note_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Map Notes offset is incorrect! Correcting..."
      WRITE_LONG  0xc4 "running_offset"
    END
  END
BUT_ONLY_IF_IT_CHANGES */

BEGIN ~Area Stuff - Script Assigner (assigns missing/unassigned scripts to areas)~
  GROUP ~Area Stuff~

ACTION_IF !(FILE_EXISTS ~override/xr2400.are~) THEN BEGIN
  COPY_EXISTING ~ar0087.are~ ~override/xr2400.are~
END
ACTION_IF !(FILE_EXISTS ~override/xr2600.are~) THEN BEGIN
  COPY_EXISTING ~ar0087.are~ ~override/xr2600.are~
END

COPY_EXISTING_REGEXP GLOB ~^.+\.are$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x11b) THEN BEGIN
    READ_ASCII 0x94 "script"

    SET "exists" = 0
    SET "scexists" = 0
    SET "unassigned" = 0
    SET "missing" = 0
    INNER_PATCH_FILE ~%SOURCE_RES%.bcs~ BEGIN
      SET "exists" = 1
    END
    INNER_PATCH_FILE ~%script%.bcs~ BEGIN
      SET "scexists" = 1
    END
    PATCH_IF (("%scexists%" = 0) AND ("%exists%" = 0)) BEGIN
      SET "missing" = 1
    END
    PATCH_IF (("%scexists%" = 0) AND ("%exists%" = 1)) BEGIN
      SET "unassigned" = 1
    END
    PATCH_IF ("%unassigned%" = 1) BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Area Script (%SOURCE_RES%.bcs) assigned"
      INNER_ACTION BEGIN
        APPEND_OUTER ~lolfixer\area.txt~ ~%SOURCE_FILE%%TAB%%TAB%%SOURCE_RES%.bcs exists but area has non-existent %script%.bcs assigned%TAB%%TAB%%SOURCE_RES%.bcs assigned~
      END
      WRITE_ASCIIE 0x94 ~%SOURCE_RES%~ #8
    END ELSE
    PATCH_IF ("%missing%" = 1) BEGIN
      PATCH_IF NOT (("%script%" STRING_EQUAL_CASE "NONE") OR ("%script%" STRING_EQUAL_CASE "")) BEGIN
        PATCH_PRINT "%SOURCE_FILE% error: Missing area Script (%script%.bcs) created"
        INNER_ACTION BEGIN
          APPEND_OUTER ~lolfixer\area.txt~ ~%SOURCE_FILE%%TAB%%TAB%Area has non-existent %script%.bcs assigned%TAB%%TAB%%script%.bcs created~
          <<<<<<<< %script%.BAF
>>>>>>>>
          COMPILE ~%script%.BAF~
        END
      END ELSE
      BEGIN
        PATCH_PRINT "%SOURCE_FILE% error: Missing area Script (%SOURCE_RES%.bcs) created and assigned"
        INNER_ACTION BEGIN
          APPEND_OUTER ~lolfixer\area.txt~ ~%SOURCE_FILE%%TAB%%TAB%Area has no script assigned%TAB%%TAB%%SOURCE_RES%.bcs created and assigned~
          <<<<<<<< %SOURCE_RES%.BAF
>>>>>>>>
          COMPILE ~%SOURCE_RES%.BAF~
        END
        WRITE_ASCIIE 0x94 ~%SOURCE_RES%~ #8
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Area Stuff - Missing Ambient Remover (removes ambients that don't have their WAV present)~
  GROUP ~Area Stuff~

ACTION_IF !(FILE_EXISTS ~override/xr2400.are~) THEN BEGIN
  COPY_EXISTING ~ar0087.are~ ~override/xr2400.are~
END
ACTION_IF !(FILE_EXISTS ~override/xr2600.are~) THEN BEGIN
  COPY_EXISTING ~ar0087.are~ ~override/xr2600.are~
END

COPY_EXISTING_REGEXP GLOB ~^.+\.are$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x11b) THEN BEGIN
    READ_SHORT 0x82 "amb_num"
    READ_LONG  0x84 "amb_off"
    PATCH_IF (amb_off > 0x11b) THEN BEGIN
      FOR (index = 0 ; index < amb_num ; index = index + 1) BEGIN
        FOR (index2 = 0 ; index2 < 10 ; index2 = index2 + 1) BEGIN
          READ_ASCII ("%amb_off%" + 0x30 + ("%index2%" * 0x08) + (0xd4 * "%index%")) "resref"
          PATCH_IF NOT (("%resref%" STRING_EQUAL_CASE "") OR ("%resref%" STRING_EQUAL_CASE "none")) BEGIN
            SET "exists" = 0
            INNER_PATCH_FILE ~%resref%.wav~ BEGIN
              SET "exists" = 1
            END
            PATCH_IF ("%exists%" = 0) BEGIN
              PATCH_PRINT "%SOURCE_FILE% error: Ambient #%index% does not exist (%resref%.wav)! Nulling..."
              INNER_ACTION BEGIN
                APPEND_OUTER ~lolfixer\area.txt~ ~%SOURCE_FILE%%TAB%%TAB%Ambient #%index% does not exist (%resref%.wav)%TAB%%TAB%NULLed (can prevent stuttering)~
              END
              WRITE_ASCIIE ("%amb_off%" + 0x30 + ("%index2%" * 0x08) + (0xd4 * "%index%")) ~NONE~ #8
            END
          END
        END
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Area Stuff - Missing Actor Remover (removes actors that don't have their CRE present)~
  GROUP ~Area Stuff~

ACTION_IF !(FILE_EXISTS ~override/xr2400.are~) THEN BEGIN
  COPY_EXISTING ~ar0087.are~ ~override/xr2400.are~
END
ACTION_IF !(FILE_EXISTS ~override/xr2600.are~) THEN BEGIN
  COPY_EXISTING ~ar0087.are~ ~override/xr2600.are~
END

COPY_EXISTING_REGEXP GLOB ~^.+\.are$~ ~override~
  PATCH_IF ((SOURCE_SIZE > 0x11b)) THEN BEGIN
    READ_LONG  0x54 "actor_off"
    READ_SHORT 0x58 "actor_num"
    PATCH_IF (actor_off > 0x11b) THEN BEGIN
      FOR (index = 0 ; index < actor_num ; index = index + 1) BEGIN
        READ_BYTE  ("%actor_off%" + 0x28 + (0x110 * "%index%")) "flags"  // flags first byte
        READ_ASCII ("%actor_off%" + 0x80 + (0x110 * "%index%")) "resref" // cre file
        PATCH_IF ("%resref%" STRING_COMPARE_REGEXP "^[Rr][Dd].+$") BEGIN // ignore creatures starting with RD
          SET "exists" = 0
          SET "attached" = 0
          INNER_PATCH_FILE ~%resref%.cre~ BEGIN
            SET "exists" = 1
          END
          PATCH_IF (("%flags%" BAND 0b10000000) = 0b00000000) BEGIN
            SET "attached" = 1
          END
          PATCH_IF (("%exists%" = 0) AND ("%attached%" = 0)) BEGIN
            PATCH_PRINT "%SOURCE_FILE% error: Actor #%index% does not exist (%resref%.cre)! Removing actor..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\area.txt~ ~%SOURCE_FILE%%TAB%%TAB%Actor #%index% does not exist (%resref%.cre)%TAB%%TAB%Actor removed (can prevent crashes)~
            END
            LPF fj_are_structure
              INT_VAR fj_delete_mode    = "%index%"
              STR_VAR fj_structure_type = actor
            END
            SET "index" = "index" - 1
            SET "actor_num" = "actor_num" - 1
          END
        END
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Area Stuff - Missing Spawn Remover (nulls spawn entries that don't have their CRE present)~
  GROUP ~Area Stuff~

ACTION_IF !(FILE_EXISTS ~override/xr2400.are~) THEN BEGIN
  COPY_EXISTING ~ar0087.are~ ~override/xr2400.are~
END
ACTION_IF !(FILE_EXISTS ~override/xr2600.are~) THEN BEGIN
  COPY_EXISTING ~ar0087.are~ ~override/xr2600.are~
END

COPY_EXISTING_REGEXP GLOB ~^.+\.are$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x11b) THEN BEGIN
    READ_LONG  0x60 "spawn_off"
    READ_LONG  0x64 "spawn_num"
    PATCH_IF (spawn_off > 0x11b) THEN BEGIN
      FOR (index = 0 ; index < spawn_num ; index = index + 1) BEGIN
        FOR (index2 = 0 ; index2 < 10 ; index2 = index2 + 1) BEGIN
          READ_ASCII ("%spawn_off%" + 0x24 + ("%index2%" * 0x08) + ("%index%" * 0xc8)) "resref"
          PATCH_IF (("%resref%" STRING_COMPARE_CASE "") AND                  // ignore empty entries
                    ("%resref%" STRING_COMPARE_CASE "none") AND              // ignore 'none'
                    ("%resref%" STRING_COMPARE_REGEXP "^[Rr][Dd].+$")) BEGIN // ignore creatures starting with RD
            SET "exists" = 0
            INNER_PATCH_FILE ~%resref%.cre~ BEGIN
              SET "exists" = 1
            END
            PATCH_IF ("%exists%" = 0) BEGIN
              PATCH_PRINT "%SOURCE_FILE% error: Spawn Point #%index% creature file does not exist (%resref%.cre)! Nulling..."
              INNER_ACTION BEGIN
                APPEND_OUTER ~lolfixer\area.txt~ ~%SOURCE_FILE%%TAB%%TAB%Spawn Point #%index% creature file does not exist (%resref%.cre)%TAB%%TAB%NULLed~
              END
              WRITE_ASCII ("%spawn_off%" + 0x24 + ("%index2%" * 0x08) + ("%index%" * 0xc8)) ~NONE~ #8
            END
          END
        END
        SET "none_count" = 0
        FOR (index2 = 0 ; index2 < 10 ; index2 = index2 + 1) BEGIN
          READ_ASCII ("%spawn_off%" + 0x24 + ("%index2%" * 0x08) + ("%index%" * 0xc8)) "resref"
          PATCH_IF (("%resref%" STRING_EQUAL_CASE "") OR ("%resref%" STRING_EQUAL_CASE "none")) BEGIN
            SET "none_count" = "none_count" + 1
          END
        END
        PATCH_IF ("%none_count%" = 10) BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Spawn Point #%index% has no creatures to spawn! Removing spawn entry..."
          INNER_ACTION BEGIN
            APPEND_OUTER ~lolfixer\area.txt~ ~%SOURCE_FILE%%TAB%%TAB%Spawn Point #%index% has no creatures to spawn%TAB%%TAB%Spawn Point removed~
          END
          LPF fj_are_structure
            INT_VAR fj_delete_mode    = "%index%"
            STR_VAR fj_structure_type = spawn
          END
          SET "index" = "index" - 1
          SET "spawn_num" = "spawn_num" - 1
        END
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Area Stuff - Missing Rest Spawn Remover (nulls rest spawn entries that don't have their CRE present)~
  GROUP ~Area Stuff~

ACTION_IF !(FILE_EXISTS ~override/xr2400.are~) THEN BEGIN
  COPY_EXISTING ~ar0087.are~ ~override/xr2400.are~
END
ACTION_IF !(FILE_EXISTS ~override/xr2600.are~) THEN BEGIN
  COPY_EXISTING ~ar0087.are~ ~override/xr2600.are~
END

COPY_EXISTING_REGEXP GLOB ~^.+\.are$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x11b) THEN BEGIN
    READ_LONG  0xc0 "rest_off" ELSE 0
    PATCH_IF (rest_off > 0x11b) THEN BEGIN
      FOR (index = 0 ; index < 10 ; index = index + 1) BEGIN
        READ_ASCII ("%rest_off%" + 0x48 + ("%index%" * 0x08)) "resref"
        PATCH_IF (("%resref%" STRING_COMPARE_CASE "") AND                  // ignore empty entries
                  ("%resref%" STRING_COMPARE_CASE "none") AND              // ignore 'none'
                  ("%resref%" STRING_COMPARE_REGEXP "^[Rr][Dd].+$")) BEGIN // ignore creatures starting with RD
          SET "exists" = 0
          INNER_PATCH_FILE ~%resref%.cre~ BEGIN
            SET "exists" = 1
          END
          PATCH_IF ("%exists%" = 0) BEGIN
            PATCH_PRINT "%SOURCE_FILE% error: Rest Spawn creature file does not exist (%resref%.cre)! Nulling..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\area.txt~ ~%SOURCE_FILE%%TAB%%TAB%Rest Spawn creature file does not exist (%resref%.cre)%TAB%%TAB%NULLed (can prevent crashes on resting)~
            END
            WRITE_ASCII ("%rest_off%" + 0x48 + ("%index%" * 0x08)) "NONE" #8
          END
        END
      END
      SET "none_count" = 0
      FOR (index = 0 ; index < 10 ; index = index + 1) BEGIN
        READ_ASCII ("%rest_off%" + 0x48 + ("%index%" * 0x08)) "resref"
        PATCH_IF (("%resref%" STRING_EQUAL_CASE "") OR ("%resref%" STRING_EQUAL_CASE "none")) BEGIN
          SET "none_count" = "none_count" + 1
        END
      END
      READ_SHORT ("%rest_off%" + 0x98) "spawncount"
      PATCH_IF (("%none_count%" = 10) AND ("%spawncount%" != 0)) BEGIN
        PATCH_PRINT "%SOURCE_FILE% error: No creatures in Rest Spawn Entry but area still set to spawn something! Setting number of spawnable creatures to 0..."
        INNER_ACTION BEGIN
          APPEND_OUTER ~lolfixer\area.txt~ ~%SOURCE_FILE%%TAB%%TAB%No creatures in Rest Spawn Entry but area still set to spawn something%TAB%%TAB%Spawns zeroed (can prevent crashes on resting)~
        END
        WRITE_SHORT ("%rest_off%" + 0x98) 0
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES
/*
BEGIN ~Area Stuff - Vertex Indexer (fixes mismatching vertex indices in Infopaths, Containers and Doors)~
  GROUP ~Area Stuff~

ACTION_IF !(FILE_EXISTS ~override/xr2400.are~) THEN BEGIN
  COPY_EXISTING ~ar0087.are~ ~override/xr2400.are~
END
ACTION_IF !(FILE_EXISTS ~override/xr2600.are~) THEN BEGIN
  COPY_EXISTING ~ar0087.are~ ~override/xr2600.are~
END

COPY_EXISTING_REGEXP GLOB ~^.+\.are$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x11b) THEN BEGIN
    READ_SHORT 0x5a "info_num"
    READ_LONG  0x5c "info_off"
    READ_LONG  0x70 "cont_off"
    READ_SHORT 0x74 "cont_num"
    READ_LONG  0xa4 "door_num"
    READ_LONG  0xa8 "door_off"
    SET "vert_running_index" = 0
    PATCH_IF (info_off > 0x11b) THEN BEGIN
      FOR (index = 0 ; index < info_num ; index = index + 1) BEGIN
        // vertex count
        READ_SHORT ("%info_off%" + 0x2a + ("%index%" * 0xc4)) "vert_run_num"
        READ_LONG  ("%info_off%" + 0x2c + ("%index%" * 0xc4)) "vert_run_idx"
        PATCH_IF ("%vert_run_idx%" != "%vert_running_index%") BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Info Point #%index% has vertex index error (should be %vert_running_index%)"
          WRITE_LONG  ("%info_off%" + 0x2c + ("%index%" * 0xc4)) "vert_running_index"
        END
        SET "vert_running_index" = ("%vert_running_index%" + "%vert_run_num%")
      END
    END
    PATCH_IF (cont_off > 0x11b) THEN BEGIN
      FOR (index = 0 ; index < cont_num ; index = index + 1) BEGIN // check indices
        // vertex count
        READ_LONG  ("%cont_off%" + 0x50 + ("%index%" * 0xc0)) "vert_run_idx"
        READ_SHORT ("%cont_off%" + 0x54 + ("%index%" * 0xc0)) "vert_run_num"
        PATCH_IF ("%vert_run_idx%" != "%vert_running_index%") BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Container #%index% has vertex index error (should be %vert_running_index%)"
          WRITE_LONG  ("%cont_off%" + 0x50 + ("%index%" * 0xc0)) "vert_running_index"
        END
        SET "vert_running_index" = ("%vert_running_index%" + "%vert_run_num%")
      END
    END
    PATCH_IF (door_off > 0x11b) THEN BEGIN
      FOR (index = 0 ; index < door_num ; index = index + 1) BEGIN
        // vertex count
        FOR (index2 = 0 ; index2 < 4 ; index2 = index2 + 1) BEGIN
          PATCH_IF ("%index2%" = 0) BEGIN
            SET "idx_off" = 0x2c
            SET "num_off" = 0x30
          END ELSE
          PATCH_IF ("%index2%" = 1) BEGIN
            SET "idx_off" = 0x34
            SET "num_off" = 0x32
          END ELSE
          PATCH_IF ("%index2%" = 2) BEGIN
            SET "idx_off" = 0x48
            SET "num_off" = 0x4c
          END ELSE BEGIN
            SET "idx_off" = 0x50
            SET "num_off" = 0x4e
          END
          READ_LONG  ("%door_off%" + "%idx_off%" + ("%index%" * 0xc8)) "vert_run_idx"
          READ_SHORT ("%door_off%" + "%num_off%" + ("%index%" * 0xc8)) "vert_run_num"
          PATCH_IF ("%vert_run_idx%" != "%vert_running_index%") BEGIN
            PATCH_PRINT "%SOURCE_FILE% error: Door #%index% has vertex index error (should be %vert_running_index%)"
            WRITE_LONG  ("%door_off%" + "%idx_off%" + ("%index%" * 0xc8)) "vert_running_index"
          END
          SET "vert_running_index" = ("%vert_running_index%" + "%vert_run_num%")
        END
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Area Stuff - Trap Unflagger (remove trap flag if trap is undetectable, undisarmable and has no script)~
  GROUP ~Area Stuff~

ACTION_IF !(FILE_EXISTS ~override/xr2400.are~) THEN BEGIN
  COPY_EXISTING ~ar0087.are~ ~override/xr2400.are~
END
ACTION_IF !(FILE_EXISTS ~override/xr2600.are~) THEN BEGIN
  COPY_EXISTING ~ar0087.are~ ~override/xr2600.are~
END

COPY_EXISTING_REGEXP GLOB ~^.+\.are$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x11b) THEN BEGIN
    READ_LONG  0x70 "cont_off" ELSE 0
    READ_SHORT 0x74 "cont_num" ELSE 0

    // BGFixpack: Super Happy modder Pack - if trap is undetectable, undisarmable, and has no script, remove trapped flag
    FOR (index = 0 ; index < cont_num ; index = index + 1) BEGIN
      READ_SHORT ("%cont_off%" + 0x2c + ("%index%" * 0xc0)) "trap_detect"
      READ_SHORT ("%cont_off%" + 0x2e + ("%index%" * 0xc0)) "trap_remove"
      READ_SHORT ("%cont_off%" + 0x30 + ("%index%" * 0xc0)) "trapped"
      READ_ASCII ("%cont_off%" + 0x48 + ("%index%" * 0xc0)) "script"
      PATCH_IF ((("%script%" STRING_EQUAL_CASE "") OR ("%script%" STRING_EQUAL_CASE "None")) AND
                 ("%trapped%" = 1) AND ("%trap_detect%" > 99) AND ("%trap_remove%" > 99)) BEGIN
        PATCH_PRINT "%SOURCE_FILE% error: Spurious Trap flag removed"
        WRITE_SHORT ("%cont_off%" + 0x2c + ("%index%" * 0xc0)) 0
        WRITE_SHORT ("%cont_off%" + 0x2e + ("%index%" * 0xc0)) 0
        WRITE_SHORT ("%cont_off%" + 0x30 + ("%index%" * 0xc0)) 0
        WRITE_ASCII ("%cont_off%" + 0x48 + ("%index%" * 0xc0)) ~~ #8
      END ELSE
      PATCH_IF (("%trap_detect%" > 99) AND ("%trapped%" = 1)) BEGIN
        PATCH_PRINT "%SOURCE_FILE% error: Spurious Trap flag removed"
        WRITE_SHORT ("%cont_off%" + 0x2C + ("%index%" * 0xc0)) 0
        WRITE_SHORT ("%cont_off%" + 0x30 + ("%index%" * 0xc0)) 0
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Area Stuff - Door Unpicker (makes doors that need keys but were pickable - unpickable)~
  GROUP ~Area Stuff~

ACTION_IF !(FILE_EXISTS ~override/xr2400.are~) THEN BEGIN
  COPY_EXISTING ~ar0087.are~ ~override/xr2400.are~
END
ACTION_IF !(FILE_EXISTS ~override/xr2600.are~) THEN BEGIN
  COPY_EXISTING ~ar0087.are~ ~override/xr2600.are~
END

COPY_EXISTING_REGEXP GLOB ~^.+\.are$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x11b) THEN BEGIN
    READ_LONG  0xa4 "door_num" ELSE 0
    READ_LONG  0xa8 "door_off" ELSE 0

    // G3 Debugging Suite - make keyed doors unpickable
    FOR (index = 0 ; index < door_num ; index = index + 1) BEGIN
      READ_ASCII ("%door_off%" + 0x78 + ("%index%" * 0xc8)) "resref"
      PATCH_IF NOT (("%resref%" STRING_EQUAL_CASE "") OR ("%resref%" STRING_EQUAL_CASE "none")) BEGIN // legit key entry
        READ_LONG ("%door_off%" + 0x8c + ("%index%" * 0xc8)) "lockdiff"
        PATCH_IF (("%lockdiff%" < 100) AND (FILE_EXISTS_IN_GAME ~%resref%.itm~)) BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Door #%index% has key (%resref%.itm) but could be picked! Made unpickable"
          WRITE_LONG ("%door_off%" + 0x8c + ("%index%" * 0xc8)) 100
        END
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Area Stuff - Door Lock Debugger (finds doors that need keys but were unlocked)~
  GROUP ~Area Stuff~

ACTION_IF !(FILE_EXISTS ~override/xr2400.are~) THEN BEGIN
  COPY_EXISTING ~ar0087.are~ ~override/xr2400.are~
END
ACTION_IF !(FILE_EXISTS ~override/xr2600.are~) THEN BEGIN
  COPY_EXISTING ~ar0087.are~ ~override/xr2600.are~
END

COPY_EXISTING_REGEXP GLOB ~^.+\.are$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x11b) THEN BEGIN
    READ_LONG  0xa4 "door_num" ELSE 0
    READ_LONG  0xa8 "door_off" ELSE 0
    SPRINT area ~%SOURCE_FILE%~
    FOR (index = 0 ; index < door_num ; index = index + 1) BEGIN
      READ_ASCII ("%door_off%" +        ("%index%" * 0xc8)) "door_name" (32) NULL
      READ_ASCII ("%door_off%" + 0x78 + ("%index%" * 0xc8)) "resref"
      PATCH_IF NOT (("%resref%" STRING_EQUAL_CASE "") OR ("%resref%" STRING_EQUAL_CASE "none")) BEGIN // legit key entry
        READ_BYTE ("%door_off%" + 0x28 + ("%index%" * 0xc8)) "flags"
        PATCH_IF ((("%flags%" BAND 0b00000010) != 0b00000010) AND (FILE_EXISTS_IN_GAME ~%resref%.itm~)) BEGIN
          PATCH_PRINT "%area% error: Door #%index% (%door_name%) has key (%resref%.itm) but was not locked! Checking..."
//        WRITE_BYTE ("%door_off%" + 0x28 + ("%index%" * 0xc8)) ("%flags%" BOR 0b00000010)
          INNER_ACTION BEGIN
            APPEND_OUTER ~lolfixer/check.txt~ ~%area% %door_name% %resref%~
          END
        END
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING_REGEXP GLOB ~^.+\.bcs$~ ~override~
  INNER_PATCH_FILE ~lolfixer/check.txt~ BEGIN
    COUNT_2DA_ROWS 1 num_lines
  END
  SPRINT file ~%SOURCE_FILE%~
  SET ld=99999
  DECOMPILE_AND_PATCH BEGIN
    FOR (i = 0 ; i < num_lines ; i = i + 1) BEGIN
      INNER_PATCH_FILE ~lolfixer/check.txt~ BEGIN
        READ_2DA_ENTRY i 1 1 "door_name"
      END
      COUNT_REGEXP_INSTANCES CASE_SENSITIVE ~Lock("%door_name%")~ ld
      INNER_ACTION BEGIN
        ACTION_IF (%ld%>0) AND !(%ld%=99999) THEN BEGIN
          PRINT ~SCRIPT: %file% uses Lock("%door_name%")~
          APPEND_OUTER ~lolfixer/check1.txt~  ~SCRIPT: %file% uses Lock("%door_name%")~
        END
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING_REGEXP GLOB ~^.+\.dlg$~ ~override~
  INNER_PATCH_FILE ~lolfixer/check.txt~ BEGIN
    COUNT_2DA_ROWS 1 num_lines
  END
  SPRINT file ~%SOURCE_FILE%~
  SET ld=99999
  DECOMPILE_AND_PATCH BEGIN
    FOR (i = 0 ; i < num_lines ; i = i + 1) BEGIN
      INNER_PATCH_FILE ~lolfixer/check.txt~ BEGIN
        READ_2DA_ENTRY i 1 1 "door_name"
      END
      COUNT_REGEXP_INSTANCES CASE_SENSITIVE ~Lock("%door_name%")~ ld
      INNER_ACTION BEGIN
        ACTION_IF (%ld%>0) AND !(%ld%=99999) THEN BEGIN
          PRINT ~SCRIPT: %file% uses Lock("%door_name%")~
          APPEND_OUTER ~lolfixer/check1.txt~  ~DIALOGUE: %file% uses Lock("%door_name%")~
        END
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES
*/
BEGIN ~Creature Stuff - Creature Resource Fixer (res_fixer for ALL CREATURES)~
  GROUP ~Creature Stuff~

//ResFixer - Basic fixing
COPY_EXISTING_REGEXP GLOB ~^.+\.cre$~ ~override~
  LPF FJ_CRE_VALIDITY
    INT_VAR do_message = 1
  END
BUT_ONLY_IF_IT_CHANGES
/*
BEGIN ~Creature Stuff - Offset Checker (fixes incorrect offsets)~
  GROUP ~Creature Stuff~

COPY_EXISTING_REGEXP GLOB ~^.+\.cre$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x2d3) THEN BEGIN
    READ_BYTE  0x33  "fx_type"
    READ_LONG  0x2a0 "known_off"
    READ_LONG  0x2a4 "known_num"
    READ_LONG  0x2a8 "meminfo_off"
    READ_LONG  0x2ac "meminfo_num"
    READ_LONG  0x2b0 "mem_off"
    READ_LONG  0x2b4 "mem_num"
    READ_LONG  0x2b8 "slot_off"
    READ_LONG  0x2bc "item_off"
    READ_LONG  0x2c0 "item_num"
    READ_LONG  0x2c4 "fx_off"
    READ_LONG  0x2c8 "fx_num"
    SET "running_offset" = 0x2d4
    SET "running_spl_idx" = 0

    // check known spells
    PATCH_IF ("%known_off%" != "%running_offset%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Known Spells offset is incorrect! Correcting..."
      WRITE_LONG  0x2a0 "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + ("%known_num%" * 0x0c))
    // check spell memorization info
    PATCH_IF ("%meminfo_off%" != "%running_offset%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Memorization Info offset is incorrect! Correcting..."
      WRITE_LONG  0x2a8 "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + ("%meminfo_num%" * 0x10))
    // check memorized spells
    PATCH_IF ("%mem_off%" != "%running_offset%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Memorized Spells offset is incorrect! Correcting..."
      WRITE_LONG  0x2b0 "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + ("%mem_num%" * 0x0c))
    // check effects
    PATCH_IF ("%fx_off%" != "%running_offset%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Effects offset is incorrect! Correcting..."
      WRITE_LONG  0x2c4 "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + ("%fx_num%" * (0x30 + ("%fx_type%" * 0xd8))))
    // check items
    PATCH_IF ("%item_off%" != "%running_offset%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Item offset is incorrect! Correcting..."
      WRITE_LONG  0x2bc "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + ("%item_num%" * 0x14))
    // check slot offset
    PATCH_IF ("%slot_off%" != "%running_offset%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Item Slot offset is incorrect! Correcting..."
      WRITE_LONG  0x2b8 "running_offset"
    END
  END
BUT_ONLY_IF_IT_CHANGES
*/
BEGIN ~Creature Stuff - Inventory Unborker (removes spurious references to the item table)~
  GROUP ~Creature Stuff~

COPY_EXISTING_REGEXP GLOB ~^.+\.cre$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x2d3) THEN BEGIN
    READ_LONG  0x2b8 "slot_off" ELSE 0
    READ_SHORT 0x2c0 "itm_num" ELSE 0
    PATCH_IF ("slot_off" > 0x2d3) THEN BEGIN
      FOR (index = 0 ; index < 36 ; index = index + 1) BEGIN
        READ_SHORT ("%slot_off%" + (0x02 * "%index%")) "ref" ELSE 0xffff
        PATCH_IF ("%ref%" != 0xffff) BEGIN
          PATCH_IF ((%ref% + 1) > %itm_num%) BEGIN
            PATCH_PRINT "%SOURCE_FILE% error: Inventory Item Slot #%index% refers to an item outside the Item Table!"
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Inventory Item Slot #%index% refers to an item outside the Item Table~
            END
            FOR (index1 = 0; index1 < itm_num; index1 = index1 + 1) BEGIN
                SET "found" = 0
                SET "match" = 0
                SET "replaced" = 0
                FOR (index2 = 0; index2 < 36; index2 = index2 + 1) BEGIN
                    READ_SHORT ("%slot_off%" + (0x02 * "%index2%")) "ref1" ELSE 0xffff
                    PATCH_IF (%ref1% != 0xffff) AND (%ref1% = %index1%) BEGIN
                        SET "found" = 1
                    END
                END
                PATCH_IF (%found% = 0) BEGIN
                    READ_ASCII ("%item_off%" + (0x14 * "%index1%")) "itmname"
                    INNER_PATCH_FILE ~%itmname%.itm~ BEGIN
                        READ_SHORT 0x1c "type"
                    END
                    PATCH_IF ((%index% = 0) AND ("%type%" = 7)) OR
                             ((%index% = 1) AND ("%type%" = 2)) OR
                             ((%index% = 2) AND ("%type%" = 12)) OR
                             ((%index% = 3) AND ("%type%" = 6)) OR
                             ((%index% = 4) AND ("%type%" = 10)) OR
                             ((%index% = 5) AND ("%type%" = 10)) OR
                             ((%index% = 6) AND ("%type%" = 1)) OR
                             ((%index% = 7) AND ("%type%" = 3)) OR
                             ((%index% = 8) AND ("%type%" = 4)) OR
                             ((%index% = 9) AND (("%type%" = 15) OR (("%type%" = 16) OR ("%type%" = 17) OR ("%type%" = 18) OR ("%type%" = 19) OR ("%type%" = 20) OR ("%type%" = 21) OR "%type%" = 22) OR ("%type%" = 23) OR ("%type%" = 24) OR ("%type%" = 25) OR ("%type%" = 26) OR ("%type%" = 27) OR ("%type%" = 28) OR ("%type%" = 29) OR ("%type%" = 30) OR ("%type%" = 44))) OR
                             ((%index% = 10) AND (("%type%" = 15) OR (("%type%" = 16) OR ("%type%" = 17) OR ("%type%" = 18) OR ("%type%" = 19) OR ("%type%" = 20) OR ("%type%" = 21) OR "%type%" = 22) OR ("%type%" = 23) OR ("%type%" = 24) OR ("%type%" = 25) OR ("%type%" = 26) OR ("%type%" = 27) OR ("%type%" = 28) OR ("%type%" = 29) OR ("%type%" = 30) OR ("%type%" = 44))) OR
                             ((%index% = 11) AND (("%type%" = 15) OR (("%type%" = 16) OR ("%type%" = 17) OR ("%type%" = 18) OR ("%type%" = 19) OR ("%type%" = 20) OR ("%type%" = 21) OR "%type%" = 22) OR ("%type%" = 23) OR ("%type%" = 24) OR ("%type%" = 25) OR ("%type%" = 26) OR ("%type%" = 27) OR ("%type%" = 28) OR ("%type%" = 29) OR ("%type%" = 30) OR ("%type%" = 44))) OR
                             ((%index% = 12) AND (("%type%" = 15) OR (("%type%" = 16) OR ("%type%" = 17) OR ("%type%" = 18) OR ("%type%" = 19) OR ("%type%" = 20) OR ("%type%" = 21) OR "%type%" = 22) OR ("%type%" = 23) OR ("%type%" = 24) OR ("%type%" = 25) OR ("%type%" = 26) OR ("%type%" = 27) OR ("%type%" = 28) OR ("%type%" = 29) OR ("%type%" = 30) OR ("%type%" = 44))) OR
                             ((%index% = 13) AND (("%type%" = 5) OR ("%type%" = 31) OR ("%type%" = 14))) OR
                             ((%index% = 14) AND (("%type%" = 5) OR ("%type%" = 31) OR ("%type%" = 14))) OR
                             ((%index% = 15) AND (("%type%" = 5) OR ("%type%" = 31) OR ("%type%" = 14))) OR
                             ((%index% = 16) AND (("%type%" = 5) OR ("%type%" = 31) OR ("%type%" = 14))) OR
                             ((%index% = 17) AND ("%type%" = 32)) BEGIN
                        SET "match" = 1
                    END
                    PATCH_IF (%match% = 1) BEGIN
                        PATCH_PRINT "  Possible change => #%index1% (%itmname%.ITM) - TYPE MATCHED! Changing index..."
                        INNER_ACTION BEGIN
                          APPEND_OUTER ~lolfixer\creature.txt~ ~  Possible change => #%index1% (%itmname%.ITM) - TYPE MATCHED! Changing index...~
                        END
                        WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) "index1"
                        SET "replaced" = 1
                    END ELSE
                    PATCH_IF (%match% = 0) AND (%replaced% = 0) BEGIN
                        PATCH_PRINT "  Possible change => #%index1% (%itmname%.ITM) - Changing index..."
                        INNER_ACTION BEGIN
                          APPEND_OUTER ~lolfixer\creature.txt~ ~  Possible change => #%index1% (%itmname%.ITM) - Changing index...~
                        END
                        WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) "index1"
                        SET "replaced" = 1
                    END ELSE
                    BEGIN
                        PATCH_PRINT "  Possible change => #%index1% (%itmname%.ITM)"
                        INNER_ACTION BEGIN
                          APPEND_OUTER ~lolfixer\creature.txt~ ~  Possible change => #%index1% (%itmname%.ITM)~
                        END
                    END
                END ELSE
                BEGIN
                    PATCH_PRINT "  No specific replaceable item found in item table! Setting to -1..."
                    INNER_ACTION BEGIN
                      APPEND_OUTER ~lolfixer\creature.txt~ ~  No specific replaceable item found in item table! Setting to -1...~
                    END
                    WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                END
            END
          END
        END
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Creature Stuff - Inventory Cleaner (removes items that don't exist and converts them into already present items where applicable)~
  GROUP ~Creature Stuff~

COPY_EXISTING_REGEXP GLOB ~^.+\.cre$~ ~override~
  PATCH_IF ((SOURCE_SIZE > 0x2d3)) THEN BEGIN
    READ_LONG  0x2bc "itm_off" ELSE 0
    READ_LONG  0x2c0 "itm_num" ELSE 0
    PATCH_IF ("itm_off" > 0x2d3) THEN BEGIN
      FOR (index = 0 ; index < itm_num ; index = index + 1) BEGIN
        READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item"
        PATCH_IF (NOT (FILE_EXISTS_IN_GAME ~%item%.itm~) AND ("%item%" STRING_COMPARE_REGEXP "^[Rr][Nn][Dd].+$")) BEGIN
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_AROW01") AND (FILE_EXISTS_IN_GAME ~AROW01.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "AROW01" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_AROW02") AND (FILE_EXISTS_IN_GAME ~AROW02.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "AROW02" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_AROW07") AND (FILE_EXISTS_IN_GAME ~AROW07.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "AROW07" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_BOW01") AND (FILE_EXISTS_IN_GAME ~BOW01.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "BOW01" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_BOW03") AND (FILE_EXISTS_IN_GAME ~BOW03.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "BOW03" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_BOW08") AND (FILE_EXISTS_IN_GAME ~BOW08.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "BOW08" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_BLUN02") AND (FILE_EXISTS_IN_GAME ~BLUN02.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "BLUN02" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_BULL02") AND (FILE_EXISTS_IN_GAME ~BULL02.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "BULL02" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_CHAN04") AND (FILE_EXISTS_IN_GAME ~CHAN04.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "CHAN04" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_CHAN05") AND (FILE_EXISTS_IN_GAME ~CHAN05.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "CHAN05" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_DAGG01") AND (FILE_EXISTS_IN_GAME ~DAGG01.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "DAGG01" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_DAGG03") AND (FILE_EXISTS_IN_GAME ~DAGG03.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "DAGG03" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_DAGG05") AND (FILE_EXISTS_IN_GAME ~DAGG05.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "DAGG05" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_DART01") AND (FILE_EXISTS_IN_GAME ~DART01.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "DART01" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_DART02") AND (FILE_EXISTS_IN_GAME ~DART02.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "DART02" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_HELM01") AND (FILE_EXISTS_IN_GAME ~HELM01.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "HELM01" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_HELM09") AND (FILE_EXISTS_IN_GAME ~HELM09.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "HELM09" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_HELM11") AND (FILE_EXISTS_IN_GAME ~HELM11.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "HELM11" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_JELLGR1") AND (FILE_EXISTS_IN_GAME ~JELLGR1.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "JELLGR1" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_LEAT01") AND (FILE_EXISTS_IN_GAME ~LEAT01.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "LEAT01" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_LEAT02") AND (FILE_EXISTS_IN_GAME ~LEAT02.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "LEAT02" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_LEAT04") AND (FILE_EXISTS_IN_GAME ~LEAT04.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "LEAT04" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_MAGE01") AND (FILE_EXISTS_IN_GAME ~MAGE02.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "MAGE02" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_MAGE02") AND (FILE_EXISTS_IN_GAME ~MAGE02.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "MAGE02" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_MAGE05") AND (FILE_EXISTS_IN_GAME ~MAGE05.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "MAGE05" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_AGEBRAC") AND (FILE_EXISTS_IN_GAME ~MAGEBRAC.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "MAGEBRAC" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_MISC33") AND (FILE_EXISTS_IN_GAME ~MISC33.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "MISC33" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_PLAT01") AND (FILE_EXISTS_IN_GAME ~PLAT01.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "PLAT01" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_PLAT04") AND (FILE_EXISTS_IN_GAME ~PLAT04.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "PLAT04" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_POTN08") AND (FILE_EXISTS_IN_GAME ~POTN08.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "POTN08" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_POTN20") AND (FILE_EXISTS_IN_GAME ~POTN20.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "POTN20" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_POTN21") AND (FILE_EXISTS_IN_GAME ~POTN21.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "POTN21" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_POTN36") AND (FILE_EXISTS_IN_GAME ~POTN36.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "POTN36" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_POTN37") AND (FILE_EXISTS_IN_GAME ~POTN37.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "POTN37" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_POTN45") AND (FILE_EXISTS_IN_GAME ~POTN45.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "POTN45" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_RING95") AND (FILE_EXISTS_IN_GAME ~RING95.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "RING95" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_SCRL96") AND (FILE_EXISTS_IN_GAME ~SCRL96.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "SCRL96" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_SHLD01") AND (FILE_EXISTS_IN_GAME ~SHLD01.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "SHLD01" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_SHLD08") AND (FILE_EXISTS_IN_GAME ~SHLD08.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "SHLD08" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_SLNG02") AND (FILE_EXISTS_IN_GAME ~SLNG02.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "SLNG02" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_SPER01") AND (FILE_EXISTS_IN_GAME ~SPER01.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "SPER01" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_SPER02") AND (FILE_EXISTS_IN_GAME ~SPER02.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "SPER02" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_STAF01") AND (FILE_EXISTS_IN_GAME ~STAF01.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "STAF01" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_STAF02") AND (FILE_EXISTS_IN_GAME ~STAF02.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "STAF02" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_STAF07") AND (FILE_EXISTS_IN_GAME ~STAF07.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "STAF07" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_SW1H01") AND (FILE_EXISTS_IN_GAME ~SW1H01.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "SW1H01" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_SW1H04") AND (FILE_EXISTS_IN_GAME ~SW1H04.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "SW1H04" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_SW1H07") AND (FILE_EXISTS_IN_GAME ~SW1H07.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "SW1H07" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_SW1H08") AND (FILE_EXISTS_IN_GAME ~SW1H08.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "SW1H08" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_SW1H24") AND (FILE_EXISTS_IN_GAME ~SW1H24.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "SW1H24" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF (("%item%" STRING_EQUAL_CASE "_SW2H01") AND (FILE_EXISTS_IN_GAME ~SW2H01.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "SW2H01" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF ((~%item%~ STRING_EQUAL_CASE ~ANKSHELL~) AND (FILE_EXISTS_IN_GAME ~MISC1A.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "MISC1A" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF ((~%item%~ STRING_EQUAL_CASE ~HRZRSHED~) AND (FILE_EXISTS_IN_GAME ~SD_HRZR.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "SD_HRZR" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF ((~%item%~ STRING_EQUAL_CASE ~IOUNX6~) AND (FILE_EXISTS_IN_GAME ~IOUNX8.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "IOUNX8" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF ((~%item%~ STRING_EQUAL_CASE ~MIN1HP~) AND (FILE_EXISTS_IN_GAME ~MINHP1.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "MINHP1" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF ((~%item%~ STRING_EQUAL_CASE ~RNGDEMN~) AND (FILE_EXISTS_IN_GAME ~RINGDEMN.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "RINGDEMN" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          PATCH_IF ((~%item%~ STRING_EQUAL_CASE ~SLING04~) AND (FILE_EXISTS_IN_GAME ~SLNG04.itm~)) BEGIN
            WRITE_ASCII ("%itm_off%" + (0x14 * "%index%")) "SLNG04" #8
            READ_ASCII ("%itm_off%" + (0x14 * "%index%")) "item1"
            PATCH_PRINT "%SOURCE_FILE% error: Replacing %item%.itm with %item1%.itm..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Replaced with %item1%.itm~
            END
          END ELSE
          BEGIN
            PATCH_PRINT "%SOURCE_FILE% error: Inventory Item #%index% (%item%.itm) does not exist! Removing item..."
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\creature.txt~ ~%SOURCE_FILE%%TAB%%TAB%Non-existent item (%item%.itm) in inventory%TAB%%TAB%Removed item - no suitable replacement found~
            END
            REMOVE_CRE_ITEM ~%item%~
            SET "index" = "index" - 1
            SET "itm_num" = "itm_num" - 1
          END
        END
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Creature Stuff - Inventory Overhauler (moves invalid but equippable items to inventory and equips anything in the inventory to a free slot)~
  GROUP ~Creature Stuff~

//G3 Debugging Suite - Equip invalid items
COPY_EXISTING_REGEXP GLOB ~^.+\.cre$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x2d3) BEGIN
    READ_LONG  0x2b8 "slot_off"
    READ_LONG  0x2bc "itm_off"

    // tracking variables
    SET "2hweapon" = 0
    SET "offhand" = 0
    SET "bow" = 0
    SET "arrows" = 0
    SET "xbow" = 0
    SET "bolts" = 0
    SET "sling" = 0
    SET "bullets" = 0
    SET "helm" = 0
    SET "armor" = 0
    SET "gloves" = 0
    SET "lring" = 0
    SET "rring" = 0
    SET "boots" = 0
    SET "belt" = 0
    SET "amulet" = 0
    SET "weapon1" = 0
    SET "weapon2" = 0
    SET "weapon3" = 0
    SET "weapon4" = 0
    SET "quiver1" = 0
    SET "quiver2" = 0
    SET "quiver3" = 0
    SET "quiver4" = 0
    SET "cloak" = 0
    SET "2handedequip" = 0
    PATCH_IF (("slot_off" > 0x2d3) AND ("itm_off" > 0x2d3)) BEGIN
      FOR (index = 0 ; index < 36 ; index = index + 1) BEGIN
        READ_SHORT ("%slot_off%" + (0x02 * "%index%")) "ref"
        PATCH_IF ("%ref%" != 0xffff) BEGIN
          READ_ASCII ("%itm_off%" + (0x14 * "%ref%")) "item"
          SET "ignore" = 0
          PATCH_IF ((~%item%~ STRING_EQUAL_CASE ~MISC86~) OR                                                           //Bandit Scalp
                   ((~%item%~ STRING_EQUAL_CASE ~MISC54~) AND (~%SOURCE_RES%~ STRING_EQUAL_CASE ~JALANT~)) OR          //Child's Body
                   ((~%item%~ STRING_EQUAL_CASE ~RING07~) AND (~%SOURCE_RES%~ STRING_EQUAL_CASE ~RAMAZI~)) OR          //Ramazith's Prot Ring
                   ((~%item%~ STRING_EQUAL_CASE ~MISC2H~) AND (~%SOURCE_RES%~ STRING_EQUAL_CASE ~SHANDAL2~)) OR        //Shandalar's Wardstone
                   ((~%item%~ STRING_EQUAL_CASE ~MISC6Z~) AND (~%SOURCE_RES%~ STRING_EQUAL_CASE ~GEMCH02~)) OR         //Imnesvale Chicken's Beljuril
                   ((~%item%~ STRING_EQUAL_CASE ~MISCB7~) AND (~%SOURCE_RES%~ STRING_EQUAL_CASE ~HELLGEN~)) OR         //Genie's Tears of Bhaal
                   ((~%item%~ STRING_EQUAL_CASE ~RING39~) AND (~%SOURCE_RES%~ STRING_EQUAL_CASE ~HLKANG~)) OR          //Kangaxx's Gaxx Ring
                   ((~%item%~ STRING_EQUAL_CASE ~MISC8K~) AND (~%SOURCE_RES%~ STRING_EQUAL_CASE ~TRRAK01~)) OR         //Ihtafeer's Head
                   ((~%item%~ STRING_EQUAL_CASE ~MISCA7~) AND (~%SOURCE_RES%~ STRING_EQUAL_CASE ~UDPRINCE~)) OR        //Kuo-Tuan Prince's Blood
                   ((~%item%~ STRING_EQUAL_CASE ~MISC8H~) AND (~%SOURCE_RES%~ STRING_EQUAL_CASE ~UDSILVER~)) OR        //Adalon's Blood
                   ((~%item%~ STRING_EQUAL_CASE ~MISCCC~) AND (~%SOURCE_RES%~ STRING_EQUAL_CASE ~UDSILVER~))           //Adalon's Note
                   ) THEN BEGIN
            SET "ignore" = 1
          END
          PATCH_IF ((FILE_EXISTS_IN_GAME ~%item%.itm~)) THEN BEGIN
            INNER_PATCH_FILE ~%item%.itm~ BEGIN
              READ_SHORT 0x1c "type"
              READ_BYTE 0x18 "flags"
            END
            PATCH_IF ("%index%" = 0) BEGIN // helm slot
              SET "helm" = 1
              PATCH_IF (("%type%" != 7) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00000100) = 0b00000100)) BEGIN // helm
                PATCH_PRINT ~%SOURCE_FILE%: Invalid HELM: %item%.itm! Moving to inventory~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                SET "ref2" = 1
                FOR (index3 = 21 ; ref2 != 0xffff ; index3 = index3 + 1) BEGIN
                  READ_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref2"
                END
                SET "index3" = "index3" - 1
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref"
                SET "helm" = 0
              END
            END
            PATCH_IF ("%index%" = 1) BEGIN // armor slot
              SET "armor" = 1
              PATCH_IF (("%type%" != 2) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00000100) = 0b00000100)) BEGIN // armor
                PATCH_PRINT ~%SOURCE_FILE%: Invalid ARMOR: %item%.itm! Moving to inventory~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                SET "ref2" = 1
                FOR (index3 = 21 ; ref2 != 0xffff ; index3 = index3 + 1) BEGIN
                  READ_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref2"
                END
                SET "index3" = "index3" - 1
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref"
                SET "armor" = 0
              END
            END
            PATCH_IF ("%index%" = 2) BEGIN // shield slot
              SET "offhand" = 1
              PATCH_IF ((("%flags%" BAND 0b00000010) = 0b00000010) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00000100) = 0b00000100)) BEGIN // 2h check
                PATCH_PRINT ~%SOURCE_FILE%: 2-HANDED OFFHAND: %item%.itm! Moving to inventory~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                SET "ref2" = 1
                FOR (index3 = 21 ; ref2 != 0xffff ; index3 = index3 + 1) BEGIN
                  READ_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref2"
                END
                SET "index3" = "index3" - 1
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref"
                SET "offhand" = 0
              END ELSE
              PATCH_IF (("%type%" != 12) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00000100) = 0b00000100)) BEGIN // if not shield, check for valid melee abilities
                SET "legit_offhand" = 0
                INNER_PATCH_FILE ~%item%.itm~ BEGIN
                  READ_LONG  0x64 "abil_off"
                  READ_SHORT 0x68 "abil_num"
                  FOR (index3 = 0 ; index3 < abil_num ; index3 = index3 + 1) BEGIN
                    READ_BYTE ("%abil_off%" + (0x38 * "%index3%")) "ability"
                    PATCH_IF ("%ability%" = 1) BEGIN // only melee allowed in offhand
                      SET "legit_offhand" = 1
                    END
                  END
                END
                PATCH_IF ("%legit_offhand%" = 0) BEGIN
                  PATCH_PRINT ~%SOURCE_FILE%: Invalid OFFHAND: %item%.itm! Moving to inventory~
                  WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                  SET "ref2" = 1
                  FOR (index3 = 21 ; ref2 != 0xffff ; index3 = index3 + 1) BEGIN
                    READ_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref2"
                   END
                  SET "index3" = "index3" - 1
                  WRITE_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref"
                  SET "offhand" = 0
                END
              END
            END
            PATCH_IF ("%index%" = 3) BEGIN // glove slot
              SET "gloves" = 1
              PATCH_IF (("%type%" != 6) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00000100) = 0b00000100)) BEGIN // gloves
                PATCH_PRINT ~%SOURCE_FILE%: Invalid GLOVES: %item%.itm! Moving to inventory~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                SET "ref2" = 1
                FOR (index3 = 21 ; ref2 != 0xffff ; index3 = index3 + 1) BEGIN
                  READ_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref2"
                END
                SET "index3" = "index3" - 1
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref"
                SET "gloves" = 0
              END
            END
            PATCH_IF ("%index%" = 4) BEGIN
              SET "lring" = 1
              PATCH_IF (("%type%" != 10) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00000100) = 0b00000100)) BEGIN // rings
                PATCH_PRINT ~%SOURCE_FILE%: Invalid LRING: %item%.itm! Moving to inventory~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                SET "ref2" = 1
                FOR (index3 = 21 ; ref2 != 0xffff ; index3 = index3 + 1) BEGIN
                  READ_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref2"
                END
                SET "index3" = "index3" - 1
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref"
                SET "lring" = 0
              END
            END
            PATCH_IF ("%index%" = 5) BEGIN
              SET "rring" = 1
              PATCH_IF (("%type%" != 10) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00000100) = 0b00000100)) BEGIN // rings
                PATCH_PRINT ~%SOURCE_FILE%: Invalid RRING: %item%.itm! Moving to inventory~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                SET "ref2" = 1
                FOR (index3 = 21 ; ref2 != 0xffff ; index3 = index3 + 1) BEGIN
                  READ_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref2"
                END
                SET "index3" = "index3" - 1
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref"
                SET "rring" = 0
              END
            END
            PATCH_IF ("%index%" = 6) BEGIN // amulet slot
              SET "amulet" = 1
              PATCH_IF (("%type%" != 1) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00000100) = 0b00000100)) BEGIN // amulet
                PATCH_PRINT ~%SOURCE_FILE%: Invalid AMULET: %item%.itm! Moving to inventory~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                SET "ref2" = 1
                FOR (index3 = 21 ; ref2 != 0xffff ; index3 = index3 + 1) BEGIN
                  READ_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref2"
                END
                SET "index3" = "index3" - 1
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref"
                SET "amulet" = 0
              END
            END
            PATCH_IF ("%index%" = 7) BEGIN // belt slot
              SET "belt" = 1
              PATCH_IF (("%type%" != 3) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00000100) = 0b00000100)) BEGIN // belt
                PATCH_PRINT ~%SOURCE_FILE%: Invalid BELT: %item%.itm! Moving to inventory~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                SET "ref2" = 1
                FOR (index3 = 21 ; ref2 != 0xffff ; index3 = index3 + 1) BEGIN
                  READ_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref2"
                END
                SET "index3" = "index3" - 1
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref"
                SET "belt" = 0
              END
            END
            PATCH_IF ("%index%" = 8) BEGIN // boot slot
              SET "boots" = 1
              PATCH_IF (("%type%" != 4) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00000100) = 0b00000100)) BEGIN // boot
                PATCH_PRINT ~%SOURCE_FILE%: Invalid BOOTS: %item%.itm! Moving to inventory~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                SET "ref2" = 1
                FOR (index3 = 21 ; ref2 != 0xffff ; index3 = index3 + 1) BEGIN
                  READ_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref2"
                END
                SET "index3" = "index3" - 1
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref"
                SET "boots" = 0
              END
            END
            PATCH_IF ("%index%" = 9) BEGIN // first weapon slot
              SET "weapon1" = 1
              SET "legit_weapon" = 0
              INNER_PATCH_FILE ~%item%.itm~ BEGIN
                READ_BYTE  0x18 "flags"
                READ_LONG  0x64 "abil_off"
                READ_SHORT 0x68 "abil_num"
                FOR (index3 = 0 ; index3 < abil_num ; index3 = index3 + 1) BEGIN
                  READ_BYTE ("%abil_off%" + (0x38 * "%index3%")) "ability"
                  PATCH_IF (("%ability%" = 1) OR ("%ability%" = 2) OR ("%ability%" = 4)) BEGIN // melee, ranged, or launcher
                    SET "legit_weapon" = 1
                  END
                END
                PATCH_IF (("%legit_weapon%" = 1) AND (("%flags%" BAND 0b00000010) = 0b00000010)) BEGIN // 2h check
                    SET "2handedequip" = 1
                END
              END
              PATCH_IF (("%legit_weapon%" = 0) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00000100) = 0b00000100)) BEGIN
                PATCH_PRINT ~%SOURCE_FILE%: Invalid WEAPON1: %item%.itm! Moving to inventory~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                SET "ref2" = 1
                FOR (index3 = 21 ; ref2 != 0xffff ; index3 = index3 + 1) BEGIN
                  READ_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref2"
                END
                SET "index3" = "index3" - 1
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref"
                SET "weapon1" = 0
              END
            END
            PATCH_IF ("%index%" = 10) BEGIN // first weapon slot
              SET "weapon2" = 1
              SET "legit_weapon" = 0
              INNER_PATCH_FILE ~%item%.itm~ BEGIN
                READ_BYTE  0x18 "flags"
                READ_LONG  0x64 "abil_off"
                READ_SHORT 0x68 "abil_num"
                FOR (index3 = 0 ; index3 < abil_num ; index3 = index3 + 1) BEGIN
                  READ_BYTE ("%abil_off%" + (0x38 * "%index3%")) "ability"
                  PATCH_IF (("%ability%" = 1) OR ("%ability%" = 2) OR ("%ability%" = 4)) BEGIN // melee, ranged, or launcher
                    SET "legit_weapon" = 1
                  END
                END
                PATCH_IF (("%legit_weapon%" = 1) AND (("%flags%" BAND 0b00000010) = 0b00000010)) BEGIN // 2h check
                    SET "2handedequip" = 1
                END
              END
              PATCH_IF (("%legit_weapon%" = 0) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00000100) = 0b00000100)) BEGIN
                PATCH_PRINT ~%SOURCE_FILE%: Invalid WEAPON2: %item%.itm! Moving to inventory~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                SET "ref2" = 1
                FOR (index3 = 21 ; ref2 != 0xffff ; index3 = index3 + 1) BEGIN
                  READ_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref2"
                END
                SET "index3" = "index3" - 1
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref"
                SET "weapon2" = 0
              END
            END
            PATCH_IF ("%index%" = 11) BEGIN // first weapon slot
              SET "weapon3" = 1
              SET "legit_weapon" = 0
              INNER_PATCH_FILE ~%item%.itm~ BEGIN
                READ_BYTE  0x18 "flags"
                READ_LONG  0x64 "abil_off"
                READ_SHORT 0x68 "abil_num"
                FOR (index3 = 0 ; index3 < abil_num ; index3 = index3 + 1) BEGIN
                  READ_BYTE ("%abil_off%" + (0x38 * "%index3%")) "ability"
                  PATCH_IF (("%ability%" = 1) OR ("%ability%" = 2) OR ("%ability%" = 4)) BEGIN // melee, ranged, or launcher
                    SET "legit_weapon" = 1
                  END
                END
                PATCH_IF (("%legit_weapon%" = 1) AND (("%flags%" BAND 0b00000010) = 0b00000010)) BEGIN // 2h check
                    SET "2handedequip" = 1
                END
              END
              PATCH_IF (("%legit_weapon%" = 0) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00000100) = 0b00000100)) BEGIN
                PATCH_PRINT ~%SOURCE_FILE%: Invalid WEAPON3: %item%.itm! Moving to inventory~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                SET "ref2" = 1
                FOR (index3 = 21 ; ref2 != 0xffff ; index3 = index3 + 1) BEGIN
                  READ_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref2"
                END
                SET "index3" = "index3" - 1
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref"
                SET "weapon3" = 0
              END
            END
            PATCH_IF ("%index%" = 12) BEGIN // first weapon slot
              SET "weapon4" = 1
              SET "legit_weapon" = 0
              INNER_PATCH_FILE ~%item%.itm~ BEGIN
                READ_BYTE  0x18 "flags"
                READ_LONG  0x64 "abil_off"
                READ_SHORT 0x68 "abil_num"
                FOR (index3 = 0 ; index3 < abil_num ; index3 = index3 + 1) BEGIN
                  READ_BYTE ("%abil_off%" + (0x38 * "%index3%")) "ability"
                  PATCH_IF (("%ability%" = 1) OR ("%ability%" = 2) OR ("%ability%" = 4)) BEGIN // melee, ranged, or launcher
                    SET "legit_weapon" = 1
                  END
                END
                PATCH_IF (("%legit_weapon%" = 1) AND (("%flags%" BAND 0b00000010) = 0b00000010)) BEGIN // 2h check
                    SET "2handedequip" = 1
                END
              END
              PATCH_IF (("%legit_weapon%" = 0) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00000100) = 0b00000100)) BEGIN
                PATCH_PRINT ~%SOURCE_FILE%: Invalid WEAPON4: %item%.itm! Moving to inventory~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                SET "ref2" = 1
                FOR (index3 = 21 ; ref2 != 0xffff ; index3 = index3 + 1) BEGIN
                  READ_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref2"
                END
                SET "index3" = "index3" - 1
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref"
                SET "weapon4" = 0
              END
            END
            PATCH_IF ("%index%" = 13) BEGIN // first quiver slot
              SET "quiver1" = 1
              PATCH_IF (NOT (("%type%" = 5) OR ("%type%" = 31) OR ("%type%" = 14)) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00000100) = 0b00000100)) BEGIN
                PATCH_PRINT ~%SOURCE_FILE%: Invalid QUIVER1: %item%.itm! Moving to inventory~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                SET "ref2" = 1
                FOR (index3 = 21 ; ref2 != 0xffff ; index3 = index3 + 1) BEGIN
                  READ_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref2"
                END
                SET "index3" = "index3" - 1
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref"
                SET "quiver1" = 0
              END
            END
            PATCH_IF ("%index%" = 14) BEGIN // first quiver slot
              SET "quiver2" = 1
              PATCH_IF (NOT (("%type%" = 5) OR ("%type%" = 31) OR ("%type%" = 14)) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00000100) = 0b00000100)) BEGIN
                PATCH_PRINT ~%SOURCE_FILE%: Invalid QUIVER2: %item%.itm! Moving to inventory~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                SET "ref2" = 1
                FOR (index3 = 21 ; ref2 != 0xffff ; index3 = index3 + 1) BEGIN
                  READ_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref2"
                END
                SET "index3" = "index3" - 1
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref"
                SET "quiver2" = 0
              END
            END
            PATCH_IF ("%index%" = 15) BEGIN // first quiver slot
              SET "quiver3" = 1
              PATCH_IF (NOT (("%type%" = 5) OR ("%type%" = 31) OR ("%type%" = 14)) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00000100) = 0b00000100)) BEGIN
                PATCH_PRINT ~%SOURCE_FILE%: Invalid QUIVER3: %item%.itm! Moving to inventory~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                SET "ref2" = 1
                FOR (index3 = 21 ; ref2 != 0xffff ; index3 = index3 + 1) BEGIN
                  READ_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref2"
                END
                SET "index3" = "index3" - 1
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref"
                SET "quiver3" = 0
              END
            END
            PATCH_IF ("%index%" = 16) BEGIN // first quiver slot
              SET "quiver4" = 1
              PATCH_IF (NOT (("%type%" = 5) OR ("%type%" = 31) OR ("%type%" = 14)) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00000100) = 0b00000100)) BEGIN
                PATCH_PRINT ~%SOURCE_FILE%: Invalid QUIVER4: %item%.itm! Moving to inventory~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                SET "ref2" = 1
                FOR (index3 = 21 ; ref2 != 0xffff ; index3 = index3 + 1) BEGIN
                  READ_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref2"
                END
                SET "index3" = "index3" - 1
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref"
                SET "quiver4" = 0
              END
            END
            PATCH_IF ("%index%" = 17) BEGIN // cloak
              SET "cloak" = 1
              PATCH_IF (("%type%" != 32) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00000100) = 0b00000100)) BEGIN // cloak
                PATCH_PRINT ~%SOURCE_FILE%: Invalid CLOAK: %item%.itm! Moving to inventory~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                SET "ref2" = 1
                FOR (index3 = 21 ; ref2 != 0xffff ; index3 = index3 + 1) BEGIN
                  READ_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref2"
                END
                SET "index3" = "index3" - 1
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index3%")) "ref"
                SET "cloak" = 0
              END
            END
            PATCH_IF ((("%type%" =  1) AND ("%amulet%" = 0)) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00000100) = 0b00000100)) AND ("%index%" > 17) BEGIN
              PATCH_PRINT ~%SOURCE_FILE%: Equippable items in inventory: %item%.itm! Equipping AMULET~
              WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
              WRITE_SHORT ("%slot_off%" + (0x02 * 6))         "ref"
              SET "amulet" = 1
            END ELSE
            PATCH_IF ((("%type%" =  2) AND ("%armor%" = 0)) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00000100) = 0b00000100)) AND ("%index%" > 17) BEGIN
              PATCH_PRINT ~%SOURCE_FILE%: Equippable items in inventory: %item%.itm! Equipping ARMOR~
              WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
              WRITE_SHORT ("%slot_off%" + (0x02))             "ref"
              SET "armor" = 1
            END ELSE
            PATCH_IF ((("%type%" =  3) AND ("%belt%" = 0)) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00000100) = 0b00000100)) AND ("%index%" > 17) BEGIN
              PATCH_PRINT ~%SOURCE_FILE%: Equippable items in inventory: %item%.itm! Equipping BELT~
              WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
              WRITE_SHORT ("%slot_off%" + (0x02 * 7))         "ref"
              SET "belt" = 1
            END ELSE
            PATCH_IF ((("%type%" =  4) AND ("%boots%" = 0)) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00000100) = 0b00000100)) AND ("%index%" > 17) BEGIN
              PATCH_PRINT ~%SOURCE_FILE%: Equippable items in inventory: %item%.itm! Equipping BOOTS~
              WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
              WRITE_SHORT ("%slot_off%" + (0x02 * 8))         "ref"
              SET "boots" = 1
            END ELSE
            PATCH_IF (((("%type%" =  5) OR
                        ("%type%" = 14) OR
                        ("%type%" = 31)) AND ("%quiver1%" = 0) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00000100) = 0b00000100)) AND ("%index%" > 17)) BEGIN
              PATCH_PRINT ~%SOURCE_FILE%: Equippable items in inventory: %item%.itm! Equipping QUIVER1~
              WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
              WRITE_SHORT ("%slot_off%" + (0x02 * 13))        "ref"
              SET "quiver1" = 1
            END ELSE
            PATCH_IF (((("%type%" =  5) OR
                        ("%type%" = 14) OR
                        ("%type%" = 31)) AND ("%quiver2%" = 0) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00000100) = 0b00000100)) AND ("%index%" > 17)) BEGIN
              PATCH_PRINT ~%SOURCE_FILE%: Equippable items in inventory: %item%.itm! Equipping QUIVER2~
              WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
              WRITE_SHORT ("%slot_off%" + (0x02 * 14))        "ref"
              SET "quiver2" = 1
            END ELSE
            PATCH_IF (((("%type%" =  5) OR
                        ("%type%" = 14) OR
                        ("%type%" = 31)) AND ("%quiver3%" = 0) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00000100) = 0b00000100)) AND ("%index%" > 17)) BEGIN
              PATCH_PRINT ~%SOURCE_FILE%: Equippable items in inventory: %item%.itm! Equipping QUIVER3~
              WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
              WRITE_SHORT ("%slot_off%" + (0x02 * 15))        "ref"
              SET "quiver3" = 1
            END ELSE
            PATCH_IF (((("%type%" =  5) OR
                        ("%type%" = 14) OR
                        ("%type%" = 31)) AND ("%quiver4%" = 0)) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00000100) = 0b00000100) AND ("%index%" > 17)) BEGIN
              PATCH_PRINT ~%SOURCE_FILE%: Equippable items in inventory: %item%.itm! Equipping QUIVER4~
              WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
              WRITE_SHORT ("%slot_off%" + (0x02 * 16))        "ref"
              SET "quiver4" = 1
            END ELSE
            PATCH_IF ((("%type%" =  6) AND ("%gloves%" = 0)) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00000100) = 0b00000100)) AND ("%index%" > 17) BEGIN
              PATCH_PRINT ~%SOURCE_FILE%: Equippable items in inventory: %item%.itm! Equipping GLOVES~
              WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
              WRITE_SHORT ("%slot_off%" + (0x02 * 3))         "ref"
              SET "gloves" = 1
            END ELSE
            PATCH_IF ((("%type%" =  7) AND ("%helm%" = 0)) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00000100) = 0b00000100)) AND ("%index%" > 17) BEGIN
              PATCH_PRINT ~%SOURCE_FILE%: Equippable items in inventory: %item%.itm! Equipping HELM~
              WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
              WRITE_SHORT ("%slot_off%")                      "ref"
              SET "helm" = 1
            END ELSE
            PATCH_IF ((("%type%" = 10) AND ("%lring%" = 0)) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00000100) = 0b00000100)) AND ("%index%" > 17) BEGIN
              PATCH_PRINT ~%SOURCE_FILE%: Equippable items in inventory: %item%.itm! Equipping LRING~
              WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
              WRITE_SHORT ("%slot_off%" + (0x02 * 4))         "ref"
              SET "lring" = 1
            END ELSE
            PATCH_IF ((("%type%" = 10) AND ("%rring%" = 0)) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00000100) = 0b00000100)) AND ("%index%" > 17) BEGIN
              PATCH_PRINT ~%SOURCE_FILE%: Equippable items in inventory: %item%.itm! Equipping RRING~
              WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
              WRITE_SHORT ("%slot_off%" + (0x02 * 5))         "ref"
              SET "rring" = 1
            END ELSE
            PATCH_IF (((("%type%" = 15) OR // bow
                        ("%type%" = 16) OR // dagger
                        ("%type%" = 17) OR // maces
                        ("%type%" = 18) OR // sling
                        ("%type%" = 19) OR // short sword
                        ("%type%" = 20) OR // swords
                        ("%type%" = 21) OR // hammer
                        ("%type%" = 22) OR // morning stars
                        ("%type%" = 23) OR // flail
                        ("%type%" = 24) OR // darts
                        ("%type%" = 25) OR // axe
                        ("%type%" = 26) OR // staff
                        ("%type%" = 27) OR // xbow
                        ("%type%" = 28) OR // hand to hand
                        ("%type%" = 29) OR // Spear
                        ("%type%" = 30) OR // halberd
                        ("%type%" = 44)) AND ("%weapon1%" = 0) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00000100) = 0b00000100) AND ("%index%" > 17)))  BEGIN
              PATCH_IF ((("%flags%" BAND 0b00000010) != 0b00000010) AND ("%offhand%" = 0)) BEGIN
                PATCH_PRINT ~%SOURCE_FILE%: Equippable items in inventory: %item%.itm! Equipping WEAPON1~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                WRITE_SHORT ("%slot_off%" + (0x02 * 9))         "ref"
                SET "weapon1" = 1
              END
            END ELSE
            PATCH_IF (((("%type%" = 15) OR // bow
                        ("%type%" = 16) OR // dagger
                        ("%type%" = 17) OR // maces
                        ("%type%" = 18) OR // sling
                        ("%type%" = 19) OR // short sword
                        ("%type%" = 20) OR // swords
                        ("%type%" = 21) OR // hammer
                        ("%type%" = 22) OR // morning stars
                        ("%type%" = 23) OR // flail
                        ("%type%" = 24) OR // darts
                        ("%type%" = 25) OR // axe
                        ("%type%" = 26) OR // staff
                        ("%type%" = 27) OR // xbow
                        ("%type%" = 28) OR // hand to hand
                        ("%type%" = 29) OR // Spear
                        ("%type%" = 30) OR // halberd
                        ("%type%" = 44)) AND ("%weapon2%" = 0) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00000100) = 0b00000100) AND ("%index%" > 17)))  BEGIN
              PATCH_IF ((("%flags%" BAND 0b00000010) != 0b00000010) AND ("%offhand%" = 0)) BEGIN
                PATCH_PRINT ~%SOURCE_FILE%: Equippable items in inventory: %item%.itm! Equipping WEAPON2~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                WRITE_SHORT ("%slot_off%" + (0x02 * 10))        "ref"
                SET "weapon2" = 1
              END
            END ELSE
            PATCH_IF (((("%type%" = 15) OR // bow
                        ("%type%" = 16) OR // dagger
                        ("%type%" = 17) OR // maces
                        ("%type%" = 18) OR // sling
                        ("%type%" = 19) OR // short sword
                        ("%type%" = 20) OR // swords
                        ("%type%" = 21) OR // hammer
                        ("%type%" = 22) OR // morning stars
                        ("%type%" = 23) OR // flail
                        ("%type%" = 24) OR // darts
                        ("%type%" = 25) OR // axe
                        ("%type%" = 26) OR // staff
                        ("%type%" = 27) OR // xbow
                        ("%type%" = 28) OR // hand to hand
                        ("%type%" = 29) OR // Spear
                        ("%type%" = 30) OR // halberd
                        ("%type%" = 44)) AND ("%weapon3%" = 0) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00000100) = 0b00000100) AND ("%index%" > 17)))  BEGIN
              PATCH_IF ((("%flags%" BAND 0b00000010) != 0b00000010) AND ("%offhand%" = 0)) BEGIN
                PATCH_PRINT ~%SOURCE_FILE%: Equippable items in inventory: %item%.itm! Equipping WEAPON3~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                WRITE_SHORT ("%slot_off%" + (0x02 * 11))        "ref"
                SET "weapon3" = 1
              END
            END ELSE
            PATCH_IF (((("%type%" = 15) OR // bow
                        ("%type%" = 16) OR // dagger
                        ("%type%" = 17) OR // maces
                        ("%type%" = 18) OR // sling
                        ("%type%" = 19) OR // short sword
                        ("%type%" = 20) OR // swords
                        ("%type%" = 21) OR // hammer
                        ("%type%" = 22) OR // morning stars
                        ("%type%" = 23) OR // flail
                        ("%type%" = 24) OR // darts
                        ("%type%" = 25) OR // axe
                        ("%type%" = 26) OR // staff
                        ("%type%" = 27) OR // xbow
                        ("%type%" = 28) OR // hand to hand
                        ("%type%" = 29) OR // Spear
                        ("%type%" = 30) OR // halberd
                        ("%type%" = 44)) AND ("%weapon4%" = 0) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00000100) = 0b00000100) AND ("%index%" > 17)))  BEGIN
              PATCH_IF ((("%flags%" BAND 0b00000010) != 0b00000010) AND ("%offhand%" = 0)) BEGIN
                PATCH_PRINT ~%SOURCE_FILE%: Equippable items in inventory: %item%.itm! Equipping WEAPON4~
                WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
                WRITE_SHORT ("%slot_off%" + (0x02 * 12))        "ref"
                SET "weapon4" = 1
              END
            END ELSE
            PATCH_IF ((("%type%" = 12) AND ("%offhand%" = 0) AND ("2handedequip" = 0)) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00000100) = 0b00000100)) AND ("%index%" > 17) BEGIN
              PATCH_PRINT ~%SOURCE_FILE%: Equippable items in inventory: %item%.itm! Equipping SHIELD~
              WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
              WRITE_SHORT ("%slot_off%" + (0x02 * 2))         "ref"
              SET "offhand" = 1
            END ELSE
            PATCH_IF ((("%type%" = 32) AND ("%cloak%" = 0)) AND ("%ignore%" = 0) AND (("%flags%" BAND 0b00000100) = 0b00000100)) AND ("%index%" > 17) BEGIN
              PATCH_PRINT ~%SOURCE_FILE%: Equippable items in inventory: %item%.itm! Equipping CLOAK~
              WRITE_SHORT ("%slot_off%" + (0x02 * "%index%")) 0xffff
              WRITE_SHORT ("%slot_off%" + (0x02 * 17))        "ref"
              SET "cloak" = 1
            END
          END
        END
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Item Stuff - Item Resource Fixer (res_fixer for ALL ITEMS)~
  GROUP ~Item Stuff~

//ResFixer - Basic Fixing
COPY_EXISTING_REGEXP GLOB ~^.+\.itm$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x71) BEGIN
    PATCH_INCLUDE ~lolfixer/lib/fj_spl_itm_reindex.tpp~
  END
BUT_ONLY_IF_IT_CHANGES
/*
BEGIN ~Item Stuff - Offset Checker (fixes incorrect offsets)~
  GROUP ~Item Stuff~

COPY_EXISTING_REGEXP GLOB ~^.+\.itm$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x72) BEGIN
    READ_LONG  0x64 "abil_off"
    READ_SHORT 0x68 "abil_num"
    READ_LONG  0x6a "fx_off"
    READ_SHORT 0x70 "fx_num"
    SET "running_offset" = 0x72

    // check abilities/extended header
    PATCH_IF ("%abil_off%" != "%running_offset%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Abilities offset is incorrect! Correcting..."
      WRITE_LONG  0x64 "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + ("%abil_num%" * 0x38))
    // check features/equipped effects
    PATCH_IF ("%fx_off%" != "%running_offset%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Equipped Effect offset is incorrect! Correcting..."
      WRITE_LONG  0x6a "running_offset"
    END
  END
BUT_ONLY_IF_IT_CHANGES
*/ /*
BEGIN ~Item Stuff - Permanent Effect Duration Nuller (sets duration for permanent effects to 0)~
  GROUP ~Item Stuff~

//G3Debugging Suite - Permanent effects with non-zero duration
COPY_EXISTING_REGEXP GLOB ~^.+\.itm$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x71) BEGIN
    READ_LONG  0x64 "abil_off"
    READ_SHORT 0x68 "abil_num"
    READ_LONG  0x6a "fx_off"

    FOR (index = 0; index < abil_num; index = index + 1) BEGIN
      READ_SHORT ("%abil_off%" + 0x1e + (0x38 * "%index%")) "abil_fx_num"
      READ_SHORT ("%abil_off%" + 0x20 + (0x38 * "%index%")) "abil_fx_idx"
      FOR (index2 = 0 ; index2 < abil_fx_num ; index2 = index2 + 1) BEGIN
        READ_SHORT ("%fx_off%" +        (("%index2%" + "%abil_fx_idx%") * 0x30)) "opcode"
        READ_BYTE  ("%fx_off%" + 0x0c + (("%index2%" + "%abil_fx_idx%") * 0x30)) "timing"
        READ_LONG  ("%fx_off%" + 0x0e + (("%index2%" + "%abil_fx_idx%") * 0x30)) "duration"
        PATCH_IF ((("%timing%" = 1) OR ("%timing%" = 9)) AND ("%duration%" > 0)) BEGIN
          PATCH_PRINT "%SOURCE_FILE%: Ability #%index% has a permanent effect with non-zero duration (effect #%index2%, opcode %opcode%)! Nulling duration..."
          WRITE_LONG  ("%fx_off%" + 0x0e + (("%index2%" + "%abil_fx_idx%") * 0x30)) 0
        END
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES
*/
BEGIN ~Item Stuff - Equipped Effect Checker (makes item equipped effects target self, active while equipped, undispellable)~
  GROUP ~Item Stuff~

COPY_EXISTING_REGEXP GLOB ~^.+\.itm$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x71) BEGIN
    READ_LONG  0x6a "fx_off"
    READ_SHORT 0x70 "fx_num"
    FOR (index = 0 ; index < fx_num ; index = index + 1) BEGIN // check equipping effects
      READ_SHORT ("%fx_off%" +        ("%index%" * 0x30)) "opcode"
      READ_BYTE  ("%fx_off%" + 0x02 + ("%index%" * 0x30)) "target"
      READ_BYTE  ("%fx_off%" + 0x0c + ("%index%" * 0x30)) "timing"
      READ_BYTE  ("%fx_off%" + 0x0d + ("%index%" * 0x30)) "dispel"
      READ_BYTE  ("%fx_off%" + 0x12 + ("%index%" * 0x30)) "prob1"
      READ_BYTE  ("%fx_off%" + 0x13 + ("%index%" * 0x30)) "prob2"
      PATCH_IF ("%target%" != 1) BEGIN
        PATCH_PRINT "%SOURCE_FILE%: Global Effect #%index% (opcode %opcode%) has an incorrect target! Targeting self..."
        WRITE_BYTE  ("%fx_off%" + 0x02 + ("%index%" * 0x30)) 1
        INNER_ACTION BEGIN
          APPEND_OUTER ~lolfixer\item.txt~ ~%SOURCE_FILE%%TAB%%TAB%Global Effect #%index% (opcode %opcode%) has an incorrect target%TAB%%TAB%Target self~
        END
      END
      PATCH_IF ("%timing%" != 2) BEGIN
        PATCH_PRINT "%SOURCE_FILE%: Global Effect #%index% (opcode %opcode%) has an incorrect timing mode! Making effect active when equipped..."
        WRITE_BYTE  ("%fx_off%" + 0x0c + ("%index%" * 0x30)) 2
        INNER_ACTION BEGIN
          APPEND_OUTER ~lolfixer\item.txt~ ~%SOURCE_FILE%%TAB%%TAB%Global Effect #%index% (opcode %opcode%) has an incorrect timing mode%TAB%%TAB%Activate on equip~
        END
      END
      PATCH_IF (("%dispel%" != 0) AND ("%dispel%" != 2)) BEGIN
        PATCH_PRINT "%SOURCE_FILE%: Global Effect #%index% (opcode %opcode%) can be dispelled! Making undispellable..."
        WRITE_BYTE  ("%fx_off%" + 0x0d + ("%index%" * 0x30)) 2
        INNER_ACTION BEGIN
          APPEND_OUTER ~lolfixer\item.txt~ ~%SOURCE_FILE%%TAB%%TAB%Global Effect #%index% (opcode %opcode%) can be dispelled%TAB%%TAB%Cannot dispel~
        END
      END
      PATCH_IF (("%prob1%" != 100) AND ("%prob2%" != 0)) BEGIN
        PATCH_PRINT "%SOURCE_FILE%: Global Effect #%index% (opcode %opcode%) is not always applied! Making effect occur at 100% probability..."
        WRITE_BYTE  ("%fx_off%" + 0x12 + ("%index%" * 0x30)) 100
        WRITE_BYTE  ("%fx_off%" + 0x13 + ("%index%" * 0x30)) 0
        INNER_ACTION BEGIN
          APPEND_OUTER ~lolfixer\item.txt~ ~%SOURCE_FILE%%TAB%%TAB%Global Effect #%index% (opcode %opcode%) is not always applied%TAB%%TAB%100% probability~
        END
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Item Stuff - Melee/Ranged Item Equalizer (finds inconsistencies in AXES and DAGGERS that can attack in range and fixes them)~
  GROUP ~Item Stuff~

COPY_EXISTING_REGEXP GLOB ~^.+\.itm$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x71) BEGIN
    READ_SHORT 0x1c "type"

    PATCH_IF (("%type%" = 16) OR ("%type%" = 25)) BEGIN
      READ_LONG  0x64 "abil_off"
      READ_SHORT 0x68 "abil_num"
      FOR (index = 0; index < abil_num; index = index + 1) BEGIN
        READ_SHORT ("%abil_off%" +        (0x38 * "%index%")) "abil_type"
        PATCH_IF ("%abil_type%" = 2) BEGIN
          READ_SHORT ("%abil_off%" + 0x2c + (0x38 * "%index%")) "anim_overhand_old"
          READ_SHORT ("%abil_off%" + 0x2e + (0x38 * "%index%")) "anim_backhand_old"
          READ_SHORT ("%abil_off%" + 0x30 + (0x38 * "%index%")) "anim_thrust_old"
          READ_SHORT ("%abil_off%" + 0x32 + (0x38 * "%index%")) "is_arrow"
          READ_SHORT ("%abil_off%" + 0x34 + (0x38 * "%index%")) "is_bolt"
          READ_SHORT ("%abil_off%" + 0x36 + (0x38 * "%index%")) "is_bullet"
          SET "anim_overhand" = "anim_overhand_old"
          SET "anim_backhand" = "anim_backhand_old"
          SET "anim_thrust" = "anim_thrust_old"
          PATCH_IF ("%is_arrow%" > 0) BEGIN
            WRITE_SHORT ("%abil_off%" + 0x32 + (0x38 * "%index%")) 0
            PATCH_PRINT "%SOURCE_FILE% error: Item is NOT supposed to be an ARROW!"
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\item.txt~ ~%SOURCE_FILE%%TAB%%TAB%Item is NOT supposed to be an ARROW%TAB%%TAB%Missile flag zeroed (may prevent crashes when using item)~
            END
          END
          PATCH_IF ("%is_bolt%" > 0) BEGIN
            WRITE_SHORT ("%abil_off%" + 0x34 + (0x38 * "%index%")) 0
            PATCH_PRINT "%SOURCE_FILE% error: Item is NOT supposed to be a BOLT!"
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\item.txt~ ~%SOURCE_FILE%%TAB%%TAB%Item is NOT supposed to be an BOLT%TAB%%TAB%Missile flag zeroed (may prevent crashes when using item)~
            END
          END
          PATCH_IF ("%is_bullet%" > 0) BEGIN
            WRITE_SHORT ("%abil_off%" + 0x35 + (0x38 * "%index%")) 0
            PATCH_PRINT "%SOURCE_FILE% error: Item is NOT supposed to be a BULLET!"
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\item.txt~ ~%SOURCE_FILE%%TAB%%TAB%Item is NOT supposed to be an BULLET%TAB%%TAB%Missile flag zeroed (may prevent crashes when using item)~
            END
          END
          PATCH_IF (("%anim_overhand%" + "%anim_backhand%" + "%anim_thrust%") < 100) BEGIN
            SET "perfection" = 0
            PATCH_IF (("%anim_overhand%" > 0) AND ("%perfection%" = 0)) BEGIN
              SET "anim_overhand" = 100 - ("anim_backhand" + "anim_thrust")
              PATCH_IF (("%anim_overhand%" + "%anim_backhand%" + "%anim_thrust%") = 100) BEGIN
                SET "perfection" = 1
              END
            END
            PATCH_IF (("%anim_backhand%" > 0) AND ("%perfection%" = 0)) BEGIN
              SET "anim_backhand" = 100 - ("anim_overhand" + "anim_thrust")
              PATCH_IF (("%anim_overhand%" + "%anim_backhand%" + "%anim_thrust%") = 100) BEGIN
                SET "perfection" = 1
              END
            END
            PATCH_IF (("%anim_thrust%" > 0) AND ("%perfection%" = 0)) BEGIN
              SET "anim_thrust" = 100 - ("anim_overhand" + "anim_backhand")
              PATCH_IF (("%anim_overhand%" + "%anim_backhand%" + "%anim_thrust%") = 100) BEGIN
                SET "perfection" = 1
              END
            END
            PATCH_IF ("%perfection%" = 0) BEGIN
              SET "anim_overhand" = 100 - ("anim_backhand" + "anim_thrust")
              PATCH_IF (("%anim_overhand%" + "%anim_backhand%" + "%anim_thrust%") = 100) BEGIN
                SET "perfection" = 1
              END
            END
            WRITE_SHORT ("%abil_off%" + 0x2c + (0x38 * "%index%")) "anim_overhand"
            WRITE_SHORT ("%abil_off%" + 0x2e + (0x38 * "%index%")) "anim_backhand"
            WRITE_SHORT ("%abil_off%" + 0x30 + (0x38 * "%index%")) "anim_thrust"
            PATCH_PRINT "%SOURCE_FILE% error: Ranged Ability Animations have wrong probabilities! %perfection% Corrections achieved..."
            PATCH_PRINT "  Overhand Swing: %anim_overhand_old% -> %anim_overhand%"
            PATCH_PRINT "  Backhand Swing: %anim_backhand_old% -> %anim_backhand%"
            PATCH_PRINT "  Thrust        : %anim_thrust_old% -> %anim_thrust%"
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\item.txt~ ~%SOURCE_FILE%%TAB%%TAB%Ranged Ability Animations have wrong probabilities~
              APPEND_OUTER ~lolfixer\item.txt~ ~  Overhand Swing: %anim_overhand_old% -> %anim_overhand%~
              APPEND_OUTER ~lolfixer\item.txt~ ~  Backhand Swing: %anim_backhand_old% -> %anim_backhand%~
              APPEND_OUTER ~lolfixer\item.txt~ ~  Thrust        : %anim_thrust_old% -> %anim_thrust%~
            END
          END
        END
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Item Stuff - Ranged Swing Fixer (finds inconsistencies in BOWS and XBOWS and nulls swing probabilities for RANGED effect headers)~
  GROUP ~Item Stuff~

COPY_EXISTING_REGEXP GLOB ~^.+\.itm$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x71) BEGIN
    READ_SHORT 0x1c "type"

    PATCH_IF (("%type%" = 15) OR ("%type%" = 18) OR ("%type%" = 27)) BEGIN
      READ_LONG  0x64 "abil_off"
      READ_SHORT 0x68 "abil_num"
      FOR (index = 0; index < abil_num; index = index + 1) BEGIN
        READ_SHORT ("%abil_off%" +        (0x38 * "%index%")) "abil_type"
        PATCH_IF ("%abil_type%" = 2) BEGIN
          READ_SHORT ("%abil_off%" + 0x2c + (0x38 * "%index%")) "anim_overhand"
          READ_SHORT ("%abil_off%" + 0x2e + (0x38 * "%index%")) "anim_backhand"
          READ_SHORT ("%abil_off%" + 0x30 + (0x38 * "%index%")) "anim_thrust"
          READ_SHORT ("%abil_off%" + 0x32 + (0x38 * "%index%")) "is_arrow"
          READ_SHORT ("%abil_off%" + 0x34 + (0x38 * "%index%")) "is_bolt"
          READ_SHORT ("%abil_off%" + 0x36 + (0x38 * "%index%")) "is_bullet"
          PATCH_IF ("%anim_overhand%" > 0) BEGIN
            WRITE_SHORT ("%abil_off%" + 0x2c + (0x38 * "%index%")) 0
            PATCH_PRINT "%SOURCE_FILE% error: Ranged Ability Animations have wrong probabilities! Overhand NULLed!"
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\item.txt~ ~%SOURCE_FILE%%TAB%%TAB%Ranged Ability Animations have wrong probabilities! Overhand NULLed!~
            END
          END
          PATCH_IF ("%anim_backhand%" > 0) BEGIN
            WRITE_SHORT ("%abil_off%" + 0x2e + (0x38 * "%index%")) 0
            PATCH_PRINT "%SOURCE_FILE% error: Ranged Ability Animations have wrong probabilities! Backhand NULLed!"
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\item.txt~ ~%SOURCE_FILE%%TAB%%TAB%Ranged Ability Animations have wrong probabilities! Backhand NULLed!~
            END
          END
          PATCH_IF ("%anim_thrust%" > 0) BEGIN
            WRITE_SHORT ("%abil_off%" + 0x30 + (0x38 * "%index%")) 0
            PATCH_PRINT "%SOURCE_FILE% error: Ranged Ability Animations have wrong probabilities! Thrust NULLed!"
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\item.txt~ ~%SOURCE_FILE%%TAB%%TAB%Ranged Ability Animations have wrong probabilities! Thrust NULLed!~
            END
          END
          PATCH_IF (("%type%" = 15) AND ("%is_arrow%" = 0)) BEGIN
            WRITE_SHORT ("%abil_off%" + 0x32 + (0x38 * "%index%")) 1
            PATCH_PRINT "%SOURCE_FILE% error: Item is supposed to fire ARROWS!"
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\item.txt~ ~%SOURCE_FILE%%TAB%%TAB%Item is supposed to fire ARROWS!~
            END
          END
          PATCH_IF (("%type%" = 18) AND ("%is_bullet%" = 0)) BEGIN
            WRITE_SHORT ("%abil_off%" + 0x34 + (0x38 * "%index%")) 1
            PATCH_PRINT "%SOURCE_FILE% error: Item is supposed to fire BULLETS!"
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\item.txt~ ~%SOURCE_FILE%%TAB%%TAB%Item is supposed to fire BULLETS!~
            END
          END
          PATCH_IF (("%type%" = 27) AND ("%is_bolt%" = 0)) BEGIN
            WRITE_SHORT ("%abil_off%" + 0x36 + (0x38 * "%index%")) 1
            PATCH_PRINT "%SOURCE_FILE% error: Item is supposed to fire BOLTS!"
            INNER_ACTION BEGIN
              APPEND_OUTER ~lolfixer\item.txt~ ~%SOURCE_FILE%%TAB%%TAB%Item is supposed to fire BOLTS!~
            END
          END
        END
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES

BEGIN ~Spell Stuff - Spell Resource Fixer (res_fixer for ALL THE SPELLS)~
  GROUP ~Spell Stuff~

//ResFixer
COPY_EXISTING_REGEXP GLOB ~^.+\.spl$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x71) BEGIN
    PATCH_INCLUDE ~lolfixer/lib/fj_spl_itm_reindex.tpp~
  END
BUT_ONLY_IF_IT_CHANGES
/*
BEGIN ~Spell Stuff - Offset Checker (fixes incorrect offsets)~
  GROUP ~Spell Stuff~

COPY_EXISTING_REGEXP GLOB ~^.+\.spl$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x72) BEGIN
    READ_LONG  0x64 "abil_off"
    READ_SHORT 0x68 "abil_num"
    READ_LONG  0x6a "fx_off"
    READ_SHORT 0x70 "fx_num"
    SET "running_offset" = 0x72

    // check abilities/extended header
    PATCH_IF ("%abil_off%" != "%running_offset%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Abilities offset is incorrect! Correcting..."
      WRITE_LONG  0x64 "running_offset"
    END

    SET "running_offset" = ("%running_offset%" + ("%abil_num%" * 0x28))
    // check features/equipped effects
    PATCH_IF ("%fx_off%" != "%running_offset%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Casting Effect offset is incorrect! Correcting..."
      WRITE_LONG  0x6a "running_offset"
    END
  END
BUT_ONLY_IF_IT_CHANGES
*/
BEGIN ~Spell Stuff - Innate Fixer (makes Innate spells level 1)~
  GROUP ~Spell Stuff~

//Innate Fixer
COPY_EXISTING_REGEXP GLOB ~^.+\.spl$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x71) BEGIN
    READ_LONG  0x34 spell_level
    READ_SHORT 0x1c spell_type
    PATCH_IF ((%spell_type% = 4) AND (%spell_level% != 1)) BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Innate Spell is not Level 1! Setting level to 1..."
      INNER_ACTION BEGIN
        APPEND_OUTER ~lolfixer\spell.txt~ ~%SOURCE_FILE%%TAB%%TAB%Innate Spell is not Level 1%TAB%%TAB%Level set to 1~
      END
      WRITE_LONG 0x34 ~1~
    END
  END
BUT_ONLY_IF_IT_CHANGES
/*
BEGIN ~Spell Stuff - Permanent Effect Duration Nuller (sets duration for permanent effects to 0)~
  GROUP ~Spell Stuff~

//G3 Debugging Suite
COPY_EXISTING_REGEXP GLOB ~^.+\.spl$~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x71) BEGIN
    READ_LONG  0x64 "abil_off"
    READ_SHORT 0x68 "abil_num"
    READ_LONG  0x6a "fx_off"

    FOR (index = 0; index < abil_num; index = index + 1) BEGIN
      READ_SHORT ("%abil_off%" + 0x1e + (0x28 * "%index%")) "abil_fx_num"
      READ_SHORT ("%abil_off%" + 0x20 + (0x28 * "%index%")) "abil_fx_idx"
      FOR (index2 = 0 ; index2 < abil_fx_num ; index2 = index2 + 1) BEGIN
        READ_SHORT ("%fx_off%" +        (("%index2%" + "%abil_fx_idx%") * 0x30)) "opcode"
        READ_BYTE  ("%fx_off%" + 0x0c + (("%index2%" + "%abil_fx_idx%") * 0x30)) "timing"
        READ_LONG  ("%fx_off%" + 0x0e + (("%index2%" + "%abil_fx_idx%") * 0x30)) "duration"
        PATCH_IF ((("%timing%" = 1) OR ("%timing%" = 9)) AND ("%duration%" > 0)) BEGIN
          PATCH_PRINT "%SOURCE_FILE%: Ability #%index% has a permanent effect with non-zero duration (effect #%index2%, opcode %opcode%)! Nulling duration..."
          WRITE_LONG  ("%fx_off%" + 0x0e + (("%index2%" + "%abil_fx_idx%") * 0x30)) 0
        END
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES
*/